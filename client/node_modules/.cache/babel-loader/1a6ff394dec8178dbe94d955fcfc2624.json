{"ast":null,"code":"/*\nCopyright (c) 2015-present NAVER Corp.\nname: @egjs/react-flicking\nlicense: MIT\nauthor: NAVER Corp.\nrepository: https://github.com/naver/egjs-flicking/tree/master/packages/react-flicking\nversion: 3.4.3\n*/\nimport NativeFlicking, { DEFAULT_OPTIONS, withFlickingMethods } from '@egjs/flicking';\nimport { Component, createElement, version, Children } from 'react';\nimport ListDiffer from '@egjs/list-differ';\nimport ChildrenDiffer from '@egjs/children-differ';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nvar CloneComponent = /*#__PURE__*/function (_super) {\n  __extends(CloneComponent, _super);\n\n  function CloneComponent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  var __proto = CloneComponent.prototype;\n\n  __proto.render = function () {\n    return this.props.children;\n  };\n\n  return CloneComponent;\n}(Component);\n\nvar FLICKING_PROPS = {\n  tag: \"div\",\n  viewportTag: \"div\",\n  cameraTag: \"div\",\n  classPrefix: \"eg-flick\",\n  plugins: [],\n  onNeedPanel: function (e) {},\n  onMoveStart: function (e) {},\n  onMove: function (e) {},\n  onMoveEnd: function (e) {},\n  onHoldStart: function (e) {},\n  onHoldEnd: function (e) {},\n  onRestore: function (e) {},\n  onSelect: function (e) {},\n  onChange: function (e) {},\n  onVisibleChange: function (e) {}\n};\n\nvar Flicking = /*#__PURE__*/function (_super) {\n  __extends(Flicking, _super); // life cycle\n\n\n  function Flicking(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      cloneCount: 0\n    };\n    _this.options = __assign({}, DEFAULT_OPTIONS, {\n      renderExternal: true\n    }); // differ\n\n    _this.pluginsDiffer = new ListDiffer();\n    var options = _this.options;\n\n    for (var name in props) {\n      if (name in DEFAULT_OPTIONS) {\n        options[name] = props[name];\n      }\n    }\n\n    return _this;\n  }\n\n  var __proto = Flicking.prototype;\n\n  __proto.render = function () {\n    var _this = this;\n\n    var props = this.props;\n    /* tslint:disable:naming-convention */\n\n    var Tag = props.tag;\n    var Viewport = props.viewportTag;\n    var Camera = props.cameraTag;\n    /* tslint:enable:naming-convention */\n\n    var classPrefix = props.classPrefix;\n    var attributes = {};\n\n    for (var name in props) {\n      if (!(name in FLICKING_PROPS) && !(name in DEFAULT_OPTIONS)) {\n        attributes[name] = props[name];\n      }\n    }\n\n    return createElement(Tag, __assign({}, attributes, {\n      ref: function (e) {\n        e && (_this.containerElement = e);\n      }\n    }), createElement(Viewport, {\n      className: classPrefix + \"-viewport\"\n    }, createElement(Camera, {\n      className: classPrefix + \"-camera\",\n      ref: function (e) {\n        e && (_this.cameraElement = e);\n      }\n    }, this.renderPanels())));\n  };\n\n  __proto.componentDidUpdate = function () {\n    var result = this.childrenDiffer.update(this.getElements());\n    this.flicking.sync(result);\n    this.checkPlugins();\n    this.checkCloneCount();\n  };\n\n  __proto.componentDidMount = function () {\n    var _this = this;\n\n    this.childrenDiffer = new ChildrenDiffer(this.getElements());\n    this.flicking = new NativeFlicking(this.containerElement, __assign({}, this.options, {\n      framework: \"react\",\n      frameworkVersion: version\n    })).on({\n      moveStart: function (e) {\n        return _this.props.onMoveStart(e);\n      },\n      move: function (e) {\n        return _this.props.onMove(e);\n      },\n      moveEnd: function (e) {\n        return _this.props.onMoveEnd(e);\n      },\n      holdStart: function (e) {\n        return _this.props.onHoldStart(e);\n      },\n      holdEnd: function (e) {\n        return _this.props.onHoldEnd(e);\n      },\n      select: function (e) {\n        return _this.props.onSelect(e);\n      },\n      needPanel: function (e) {\n        return _this.props.onNeedPanel(e);\n      },\n      change: function (e) {\n        return _this.props.onChange(e);\n      },\n      restore: function (e) {\n        return _this.props.onRestore(e);\n      },\n      visibleChange: function (e) {\n        _this.props.onVisibleChange(e);\n\n        _this.forceUpdate();\n      }\n    });\n    var children = this.getChildren();\n    this.jsxDiffer = new ListDiffer(children.map(function (child) {\n      return \"\" + child.key;\n    }));\n\n    if (this.props.status) {\n      this.setStatus(this.props.status);\n    }\n\n    this.checkPlugins();\n    this.checkCloneCount();\n\n    if (this.props.renderOnlyVisible) {\n      this.forceUpdate();\n    }\n  };\n\n  __proto.componentWillUnmount = function () {\n    this.destroy({\n      preserveUI: true\n    });\n  }; // private\n\n\n  __proto.checkPlugins = function () {\n    var _a = this.pluginsDiffer.update(this.props.plugins),\n        list = _a.list,\n        added = _a.added,\n        removed = _a.removed,\n        prevList = _a.prevList;\n\n    this.flicking.addPlugins(added.map(function (index) {\n      return list[index];\n    }));\n    this.flicking.removePlugins(removed.map(function (index) {\n      return prevList[index];\n    }));\n  };\n\n  __proto.checkCloneCount = function () {\n    var cloneCount = this.flicking.getCloneCount();\n\n    if (this.state.cloneCount !== cloneCount) {\n      this.setState({\n        cloneCount: cloneCount\n      });\n    }\n  };\n\n  __proto.renderPanels = function () {\n    var renderOnlyVisible = this.props.renderOnlyVisible;\n    var flicking = this.flicking;\n    var reactChildren = this.getChildren();\n    var panels;\n\n    if (flicking && renderOnlyVisible) {\n      var diffResult = this.jsxDiffer.update(reactChildren.map(function (child) {\n        return \"\" + child.key;\n      }));\n      var panelCnt_1 = reactChildren.length;\n      flicking.beforeSync(diffResult);\n      var indexesToRender = flicking.getRenderingIndexes(diffResult);\n      panels = indexesToRender.map(function (index) {\n        if (index >= panelCnt_1) {\n          var relativeIndex = index % panelCnt_1;\n          var cloneIndex = Math.floor(index / panelCnt_1) - 1;\n          var origEl = reactChildren[relativeIndex];\n          return createElement(CloneComponent, {\n            key: \"clone\" + cloneIndex + origEl.key\n          }, origEl);\n        } else {\n          return reactChildren[index];\n        }\n      });\n    } else {\n      var cloneCount = this.state.cloneCount;\n      panels = reactChildren.slice();\n\n      var _loop_1 = function (i) {\n        panels = panels.concat(reactChildren.map(function (el) {\n          return createElement(CloneComponent, {\n            key: \"clone\" + i + el.key\n          }, el);\n        }));\n      };\n\n      for (var i = 0; i < cloneCount; ++i) {\n        _loop_1(i);\n      }\n    }\n\n    return panels;\n  };\n\n  __proto.getChildren = function () {\n    var children = Children.toArray(this.props.children).slice();\n    return typeof this.props.lastIndex === \"number\" ? children.slice(0, this.props.lastIndex + 1) : children;\n  };\n\n  __proto.getElements = function () {\n    return this.cameraElement.children;\n  };\n\n  Flicking.defaultProps = FLICKING_PROPS;\n\n  __decorate([withFlickingMethods], Flicking.prototype, \"flicking\");\n\n  return Flicking;\n}(Component);\n\nexport default Flicking;","map":{"version":3,"sources":["../src/react-flicking/Clone.tsx","../src/react-flicking/consts.ts","../src/react-flicking/Flicking.tsx"],"names":["tslib_1","FLICKING_PROPS","tag","viewportTag","cameraTag","classPrefix","plugins","onNeedPanel","onMoveStart","onMove","onMoveEnd","onHoldStart","onHoldEnd","onRestore","onSelect","onChange","onVisibleChange","Flicking","_this","cloneCount","withFlickingMethods","DEFAULT_OPTIONS","renderExternal","_super","options","name","props","Tag","Viewport","Camera","attributes","ref","e","className","result","framework","frameworkVersion","React","moveStart","move","moveEnd","holdStart","holdEnd","select","needPanel","change","restore","visibleChange","children","child","preserveUI","_a","list","added","removed","prevList","renderOnlyVisible","flicking","reactChildren","diffResult","panelCnt_1","indexesToRender","panels","index","relativeIndex","cloneIndex","Math","origEl","key","i","el"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\n\nexport class CloneComponent extends Component {\n  public render() {\n    return this.props.children;\n  }\n}\n","import { ChangeEvent, FlickingEvent, SelectEvent, NeedPanelEvent, VisibleChangeEvent } from \"@egjs/flicking\";\nimport { FlickingProps } from \"./types\";\n\nexport const FLICKING_PROPS: FlickingProps = {\n  tag: \"div\",\n  viewportTag: \"div\",\n  cameraTag: \"div\",\n  classPrefix: \"eg-flick\",\n  plugins: [],\n  onNeedPanel: (e: NeedPanelEvent) => {},\n  onMoveStart: (e: FlickingEvent) => {},\n  onMove: (e: FlickingEvent) => {},\n  onMoveEnd: (e: FlickingEvent) => {},\n  onHoldStart: (e: FlickingEvent) => {},\n  onHoldEnd: (e: FlickingEvent) => {},\n  onRestore: (e: FlickingEvent) => {},\n  onSelect: (e: SelectEvent) => {},\n  onChange: (e: ChangeEvent) => {},\n  onVisibleChange: (e: VisibleChangeEvent) => {},\n};\n","import NativeFlicking, { FlickingOptions, Plugin, FlickingEvent, NeedPanelEvent, withFlickingMethods, DEFAULT_OPTIONS, VisibleChangeEvent } from \"@egjs/flicking\";\nimport * as React from \"react\";\nimport { CloneComponent } from \"./Clone\";\nimport { FLICKING_PROPS } from \"./consts\";\nimport { FlickingProps, FlickingType } from \"./types\";\nimport ListDiffer, { ListFormat } from \"@egjs/list-differ\";\nimport ChildrenDiffer from \"@egjs/children-differ\";\n\nclass Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n  public static defaultProps: FlickingProps = FLICKING_PROPS;\n  public state: {\n    cloneCount: number,\n  } = {\n      cloneCount: 0,\n    };\n  // Flicking\n  @withFlickingMethods\n  private flicking?: NativeFlicking | null;\n  private options: FlickingOptions = {\n    ...DEFAULT_OPTIONS,\n    renderExternal: true,\n  };\n  // differ\n  private pluginsDiffer: ListDiffer<Plugin> = new ListDiffer<Plugin>();\n  private childrenDiffer: ChildrenDiffer<HTMLElement>;\n  private jsxDiffer: ListDiffer<string>;\n  private containerElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  // life cycle\n  constructor(props: Partial<FlickingProps & FlickingOptions>) {\n    super(props);\n    const options = this.options;\n    for (const name in props) {\n      if (name in DEFAULT_OPTIONS) {\n        options[name] = props[name];\n      }\n    }\n  }\n\n  public render() {\n    const props = this.props;\n    /* tslint:disable:naming-convention */\n    const Tag = props.tag as any;\n    const Viewport = props.viewportTag as any;\n    const Camera = props.cameraTag as any;\n    /* tslint:enable:naming-convention */\n    const classPrefix = props.classPrefix;\n    const attributes: { [key: string]: any } = {};\n\n    for (const name in props) {\n      if (!(name in FLICKING_PROPS) && !(name in DEFAULT_OPTIONS)) {\n        attributes[name] = props[name];\n      }\n    }\n    return (\n      <Tag {...attributes} ref={e => {\n        e && (this.containerElement = e);\n      }}>\n        <Viewport className={`${classPrefix}-viewport`}>\n          <Camera className={`${classPrefix}-camera`} ref={e => {\n            e && (this.cameraElement = e);\n          }}>\n            {this.renderPanels()}\n          </Camera>\n        </Viewport>\n      </Tag>\n    );\n  }\n\n  public componentDidUpdate() {\n    const result = this.childrenDiffer!.update(this.getElements());\n    this.flicking!.sync(result);\n    this.checkPlugins();\n    this.checkCloneCount();\n  }\n\n  public componentDidMount() {\n    this.childrenDiffer = new ChildrenDiffer<HTMLElement>(this.getElements());\n    this.flicking = new NativeFlicking(\n      this.containerElement,\n      {\n        ...this.options,\n        framework: \"react\",\n        frameworkVersion: React.version,\n      } as object,\n    ).on({\n      moveStart: (e: FlickingEvent) => this.props.onMoveStart!(e),\n      move: (e: FlickingEvent) => this.props.onMove!(e),\n      moveEnd: (e: FlickingEvent) => this.props.onMoveEnd!(e),\n      holdStart: (e: FlickingEvent) => this.props.onHoldStart!(e),\n      holdEnd: (e: FlickingEvent) => this.props.onHoldEnd!(e),\n      select: (e: FlickingEvent) => this.props.onSelect!(e),\n      needPanel: (e: NeedPanelEvent) => this.props.onNeedPanel!(e),\n      change: (e: FlickingEvent) => this.props.onChange!(e),\n      restore: (e: FlickingEvent) => this.props.onRestore!(e),\n      visibleChange: (e: VisibleChangeEvent) => {\n        this.props.onVisibleChange!(e);\n        this.forceUpdate();\n      },\n    });\n    const children = this.getChildren();\n    this.jsxDiffer = new ListDiffer<string>(children.map(child => `${child.key}`));\n\n    if (this.props.status) {\n      this.setStatus(this.props.status);\n    }\n    this.checkPlugins();\n    this.checkCloneCount();\n\n    if (this.props.renderOnlyVisible) {\n      this.forceUpdate();\n    }\n  }\n\n  public componentWillUnmount() {\n    this.destroy({ preserveUI: true });\n  }\n\n  // private\n  private checkPlugins() {\n    const { list, added, removed, prevList } = this.pluginsDiffer.update(this.props.plugins!);\n\n    this.flicking!.addPlugins(added.map(index => list[index]));\n    this.flicking!.removePlugins(removed.map(index => prevList[index]));\n  }\n\n  private checkCloneCount() {\n    const cloneCount = this.flicking!.getCloneCount();\n\n    if (this.state.cloneCount !== cloneCount) {\n      this.setState({\n        cloneCount,\n      });\n    }\n  }\n\n  private renderPanels() {\n    const { renderOnlyVisible } = this.props;\n    const flicking = this.flicking;\n    const reactChildren = this.getChildren();\n    let panels: Array<React.ReactElement<any>>;\n\n    if (flicking && renderOnlyVisible) {\n      const diffResult = this.jsxDiffer.update(reactChildren.map(child => `${child.key}`));\n      const panelCnt = reactChildren.length;\n\n      flicking.beforeSync(diffResult);\n\n      const indexesToRender = flicking.getRenderingIndexes(diffResult);\n      panels = indexesToRender.map(index => {\n        if (index >= panelCnt) {\n          const relativeIndex = index % panelCnt;\n          const cloneIndex = Math.floor(index / panelCnt) - 1;\n          const origEl = reactChildren[relativeIndex];\n\n          return <CloneComponent key={`clone${cloneIndex}${origEl.key}`}>{origEl}</CloneComponent>;\n        } else {\n          return reactChildren[index];\n        }\n      });\n    } else {\n      const cloneCount = this.state.cloneCount;\n      panels = [...reactChildren];\n\n      for (let i = 0; i < cloneCount; ++i) {\n        panels = panels.concat(reactChildren.map(el => {\n          return <CloneComponent key={`clone${i}${el.key}`}>{el}</CloneComponent>;\n        }));\n      }\n    }\n\n    return panels;\n  }\n\n  private getChildren() {\n    const children = React.Children.toArray(this.props.children).slice() as Array<React.ReactElement<any>>;\n    return typeof this.props.lastIndex === \"number\"\n      ? children.slice(0, this.props.lastIndex + 1)\n      : children;\n  }\n\n  private getElements(): ListFormat<HTMLElement> {\n    return this.cameraElement.children as any;\n  }\n}\ninterface Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>>, FlickingType<Flicking> { }\nexport default Flicking;\n"]},"metadata":{},"sourceType":"module"}