{"ast":null,"code":"/*\nCopyright (c) 2015-present NAVER Corp.\nname: @egjs/flicking\nlicense: MIT\nauthor: NAVER Corp.\nrepository: https://github.com/naver/egjs-flicking\nversion: 3.6.3\n*/\nimport Component from '@egjs/component';\nimport Axes, { PanInput } from '@egjs/axes';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n}\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n\nvar MOVE_TYPE = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\"\n};\nvar DEFAULT_MOVE_TYPE_OPTIONS = {\n  snap: {\n    type: \"snap\",\n    count: 1\n  },\n  freeScroll: {\n    type: \"freeScroll\"\n  }\n};\nvar isBrowser = typeof document !== \"undefined\";\n/**\n * Default options for creating Flicking.\n * @ko 플리킹을 만들 때 사용하는 기본 옵션들\n * @private\n * @memberof eg.Flicking\n */\n\nvar DEFAULT_OPTIONS = {\n  classPrefix: \"eg-flick\",\n  deceleration: 0.0075,\n  horizontal: true,\n  circular: false,\n  infinite: false,\n  infiniteThreshold: 0,\n  lastIndex: Infinity,\n  threshold: 40,\n  duration: 100,\n  panelEffect: function (x) {\n    return 1 - Math.pow(1 - x, 3);\n  },\n  defaultIndex: 0,\n  inputType: [\"touch\", \"mouse\"],\n  thresholdAngle: 45,\n  bounce: 10,\n  autoResize: false,\n  adaptive: false,\n  zIndex: 2000,\n  bound: false,\n  overflow: false,\n  hanger: \"50%\",\n  anchor: \"50%\",\n  gap: 0,\n  moveType: DEFAULT_MOVE_TYPE_OPTIONS.snap,\n  useOffset: false,\n  isEqualSize: false,\n  isConstantSize: false,\n  renderOnlyVisible: false,\n  renderExternal: false,\n  iOSEdgeSwipeThreshold: 30,\n  collectStatistics: true\n};\nvar DEFAULT_VIEWPORT_CSS = {\n  position: \"relative\",\n  zIndex: DEFAULT_OPTIONS.zIndex,\n  overflow: \"hidden\"\n};\nvar DEFAULT_CAMERA_CSS = {\n  width: \"100%\",\n  height: \"100%\",\n  willChange: \"transform\"\n};\nvar DEFAULT_PANEL_CSS = {\n  position: \"absolute\"\n};\nvar EVENTS = {\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  CHANGE: \"change\",\n  RESTORE: \"restore\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  VISIBLE_CHANGE: \"visibleChange\"\n};\nvar AXES_EVENTS = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\"\n};\nvar STATE_TYPE = {\n  IDLE: 0,\n  HOLDING: 1,\n  DRAGGING: 2,\n  ANIMATING: 3,\n  DISABLED: 4\n};\nvar DIRECTION = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\"\n};\nvar FLICKING_METHODS = {\n  prev: true,\n  next: true,\n  moveTo: true,\n  getIndex: true,\n  getAllPanels: true,\n  getCurrentPanel: true,\n  getElement: true,\n  getPanel: true,\n  getPanelCount: true,\n  getStatus: true,\n  getVisiblePanels: true,\n  enableInput: true,\n  disableInput: true,\n  destroy: true,\n  resize: true,\n  setStatus: true,\n  isPlaying: true\n}; // Check whether browser supports transform: translate3d\n// https://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\n\nvar checkTranslateSupport = function () {\n  var transforms = {\n    webkitTransform: \"-webkit-transform\",\n    msTransform: \"-ms-transform\",\n    MozTransform: \"-moz-transform\",\n    OTransform: \"-o-transform\",\n    transform: \"transform\"\n  };\n\n  if (!isBrowser) {\n    return {\n      name: transforms.transform,\n      has3d: true\n    };\n  }\n\n  var supportedStyle = document.documentElement.style;\n  var transformName = \"\";\n\n  for (var prefixedTransform in transforms) {\n    if (prefixedTransform in supportedStyle) {\n      transformName = prefixedTransform;\n    }\n  }\n\n  if (!transformName) {\n    throw new Error(\"Browser doesn't support CSS3 2D Transforms.\");\n  }\n\n  var el = document.createElement(\"div\");\n  document.documentElement.insertBefore(el, null);\n  el.style[transformName] = \"translate3d(1px, 1px, 1px)\";\n  var styleVal = window.getComputedStyle(el).getPropertyValue(transforms[transformName]);\n  el.parentElement.removeChild(el);\n  var transformInfo = {\n    name: transformName,\n    has3d: styleVal.length > 0 && styleVal !== \"none\"\n  };\n\n  checkTranslateSupport = function () {\n    return transformInfo;\n  };\n\n  return transformInfo;\n};\n\nvar TRANSFORM = checkTranslateSupport();\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nfunction merge(target) {\n  var srcs = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    srcs[_i - 1] = arguments[_i];\n  }\n\n  srcs.forEach(function (source) {\n    Object.keys(source).forEach(function (key) {\n      var value = source[key];\n      target[key] = value;\n    });\n  });\n  return target;\n}\n\nfunction parseElement(element) {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  var elements = [];\n  element.forEach(function (el) {\n    if (isString(el)) {\n      var tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n      elements.push.apply(elements, toArray(tempDiv.children));\n\n      while (tempDiv.firstChild) {\n        tempDiv.removeChild(tempDiv.firstChild);\n      }\n    } else {\n      elements.push(el);\n    }\n  });\n  return elements;\n}\n\nfunction isString(value) {\n  return typeof value === \"string\";\n} // Get class list of element as string array\n\n\nfunction addClass(element, className) {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    if (!hasClass(element, className)) {\n      element.className = (element.className + \" \" + className).replace(/\\s{2,}/g, \" \");\n    }\n  }\n}\n\nfunction hasClass(element, className) {\n  if (element.classList) {\n    return element.classList.contains(className);\n  } else {\n    return element.className.split(\" \").indexOf(className) >= 0;\n  }\n}\n\nfunction applyCSS(element, cssObj) {\n  Object.keys(cssObj).forEach(function (property) {\n    element.style[property] = cssObj[property];\n  });\n}\n\nfunction clamp(val, min, max) {\n  return Math.max(Math.min(val, max), min);\n} // Min: inclusive, Max: exclusive\n\n\nfunction isBetween(val, min, max) {\n  return val >= min && val <= max;\n}\n\nfunction toArray(iterable) {\n  return [].slice.call(iterable);\n}\n\nfunction isArray(arr) {\n  return arr && arr.constructor === Array;\n}\n\nfunction parseArithmeticExpression(cssValue, base, defaultVal) {\n  // Set base / 2 to default value, if it's undefined\n  var defaultValue = defaultVal != null ? defaultVal : base / 2;\n  var cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return clamp(cssValue, 0, base);\n  }\n\n  var idx = 0;\n  var calculatedValue = 0;\n  var matchResult = cssRegex.exec(cssValue);\n\n  while (matchResult != null) {\n    var sign = matchResult[1];\n    var value = matchResult[2];\n    var unit = matchResult[3];\n    var parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    } // Return default value for values not in good form\n\n\n    if (!sign) {\n      return defaultValue;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = parsedValue / 100 * base;\n    }\n\n    calculatedValue += sign === \"+\" ? parsedValue : -parsedValue; // Match next occurrence\n\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  } // None-matched\n\n\n  if (idx === 0) {\n    return defaultValue;\n  } // Clamp between 0 ~ base\n\n\n  return clamp(calculatedValue, 0, base);\n}\n\nfunction getProgress(pos, range) {\n  // start, anchor, end\n  // -1 , 0 , 1\n  var min = range[0],\n      center = range[1],\n      max = range[2];\n\n  if (pos > center && max - center) {\n    // 0 ~ 1\n    return (pos - center) / (max - center);\n  } else if (pos < center && center - min) {\n    // -1 ~ 0\n    return (pos - center) / (center - min);\n  } else if (pos !== center && max - min) {\n    return (pos - min) / (max - min);\n  }\n\n  return 0;\n}\n\nfunction findIndex(iterable, callback) {\n  for (var i = 0; i < iterable.length; i += 1) {\n    var element = iterable[i];\n\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n} // return [0, 1, ...., max - 1]\n\n\nfunction counter(max) {\n  var counterArray = [];\n\n  for (var i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n\n  return counterArray;\n} // Circulate number between range [min, max]\n\n/*\n * \"indexed\" means min and max is not same, so if it's true \"min - 1\" should be max\n * While if it's false, \"min - 1\" should be \"max - 1\"\n * use `indexed: true` when it should be used for circulating integers like index\n * or `indexed: false` when it should be used for something like positions.\n */\n\n\nfunction circulate(value, min, max, indexed) {\n  var size = indexed ? max - min + 1 : max - min;\n\n  if (value < min) {\n    var offset = indexed ? (min - value - 1) % size : (min - value) % size;\n    value = max - offset;\n  } else if (value > max) {\n    var offset = indexed ? (value - max - 1) % size : (value - max) % size;\n    value = min + offset;\n  }\n\n  return value;\n}\n\nfunction restoreStyle(element, originalStyle) {\n  originalStyle.className ? element.setAttribute(\"class\", originalStyle.className) : element.removeAttribute(\"class\");\n  originalStyle.style ? element.setAttribute(\"style\", originalStyle.style) : element.removeAttribute(\"style\");\n}\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\n\n\nfunction withFlickingMethods(prototype, flickingName) {\n  Object.keys(FLICKING_METHODS).forEach(function (name) {\n    if (prototype[name]) {\n      return;\n    }\n\n    prototype[name] = function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var result = (_a = this[flickingName])[name].apply(_a, args); // fix `this` type to return your own `flicking` instance to the instance using the decorator.\n\n\n      if (result === this[flickingName]) {\n        return this;\n      } else {\n        return result;\n      }\n    };\n  });\n}\n\nfunction getBbox(element, useOffset) {\n  var bbox;\n\n  if (useOffset) {\n    bbox = {\n      x: 0,\n      y: 0,\n      width: element.offsetWidth,\n      height: element.offsetHeight\n    };\n  } else {\n    var clientRect = element.getBoundingClientRect();\n    bbox = {\n      x: clientRect.left,\n      y: clientRect.top,\n      width: clientRect.width,\n      height: clientRect.height\n    };\n  }\n\n  return bbox;\n}\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n\nvar Panel = /*#__PURE__*/function () {\n  function Panel(element, index, viewport) {\n    this.viewport = viewport;\n    this.prevSibling = null;\n    this.nextSibling = null;\n    this.clonedPanels = [];\n    this.state = {\n      index: index,\n      position: 0,\n      relativeAnchorPosition: 0,\n      size: 0,\n      isClone: false,\n      isVirtual: false,\n      cloneIndex: -1,\n      originalStyle: {\n        className: \"\",\n        style: \"\"\n      },\n      cachedBbox: null\n    };\n    this.setElement(element);\n  }\n\n  var __proto = Panel.prototype;\n\n  __proto.resize = function (givenBbox) {\n    var state = this.state;\n    var options = this.viewport.options;\n    var bbox = givenBbox ? givenBbox : this.getBbox();\n    this.state.cachedBbox = bbox;\n    var prevSize = state.size;\n    state.size = options.horizontal ? bbox.width : bbox.height;\n\n    if (prevSize !== state.size) {\n      state.relativeAnchorPosition = parseArithmeticExpression(options.anchor, state.size);\n    }\n\n    if (!state.isClone) {\n      this.clonedPanels.forEach(function (panel) {\n        var cloneState = panel.state;\n        cloneState.size = state.size;\n        cloneState.cachedBbox = state.cachedBbox;\n        cloneState.relativeAnchorPosition = state.relativeAnchorPosition;\n      });\n    }\n  };\n\n  __proto.unCacheBbox = function () {\n    this.state.cachedBbox = null;\n  };\n\n  __proto.getProgress = function () {\n    var viewport = this.viewport;\n    var options = viewport.options;\n    var panelCount = viewport.panelManager.getPanelCount();\n    var scrollAreaSize = viewport.getScrollAreaSize();\n    var relativeIndex = (options.circular ? Math.floor(this.getPosition() / scrollAreaSize) * panelCount : 0) + this.getIndex();\n    var progress = relativeIndex - viewport.getCurrentProgress();\n    return progress;\n  };\n\n  __proto.getOutsetProgress = function () {\n    var viewport = this.viewport;\n    var outsetRange = [-this.getSize(), viewport.getRelativeHangerPosition() - this.getRelativeAnchorPosition(), viewport.getSize()];\n    var relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    var outsetProgress = getProgress(relativePanelPosition, outsetRange);\n    return outsetProgress;\n  };\n\n  __proto.getVisibleRatio = function () {\n    var viewport = this.viewport;\n    var panelSize = this.getSize();\n    var relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    var rightRelativePanelPosition = relativePanelPosition + panelSize;\n    var visibleSize = Math.min(viewport.getSize(), rightRelativePanelPosition) - Math.max(relativePanelPosition, 0);\n    var visibleRatio = visibleSize >= 0 ? visibleSize / panelSize : 0;\n    return visibleRatio;\n  };\n\n  __proto.focus = function (duration) {\n    var viewport = this.viewport;\n    var currentPanel = viewport.getCurrentPanel();\n    var hangerPosition = viewport.getHangerPosition();\n    var anchorPosition = this.getAnchorPosition();\n\n    if (hangerPosition === anchorPosition || !currentPanel) {\n      return;\n    }\n\n    var currentPosition = currentPanel.getPosition();\n    var eventType = currentPosition === this.getPosition() ? \"\" : EVENTS.CHANGE;\n    viewport.moveTo(this, viewport.findEstimatedPosition(this), eventType, null, duration);\n  };\n\n  __proto.update = function (updateFunction, shouldResize) {\n    if (updateFunction === void 0) {\n      updateFunction = null;\n    }\n\n    if (shouldResize === void 0) {\n      shouldResize = true;\n    }\n\n    var identicalPanels = this.getIdenticalPanels();\n\n    if (updateFunction) {\n      identicalPanels.forEach(function (eachPanel) {\n        updateFunction(eachPanel.getElement());\n      });\n    }\n\n    if (shouldResize) {\n      identicalPanels.forEach(function (eachPanel) {\n        eachPanel.unCacheBbox();\n      });\n      this.viewport.addVisiblePanel(this);\n      this.viewport.resize();\n    }\n  };\n\n  __proto.prev = function () {\n    var viewport = this.viewport;\n    var options = viewport.options;\n    var prevSibling = this.prevSibling;\n\n    if (!prevSibling) {\n      return null;\n    }\n\n    var currentIndex = this.getIndex();\n    var currentPosition = this.getPosition();\n    var prevPanelIndex = prevSibling.getIndex();\n    var prevPanelPosition = prevSibling.getPosition();\n    var prevPanelSize = prevSibling.getSize();\n    var hasEmptyPanelBetween = currentIndex - prevPanelIndex > 1;\n    var notYetMinPanel = options.infinite && currentIndex > 0 && prevPanelIndex > currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMinPanel) {\n      // Empty panel exists between\n      return null;\n    }\n\n    var newPosition = currentPosition - prevPanelSize - options.gap;\n    var prevPanel = prevSibling;\n\n    if (prevPanelPosition !== newPosition) {\n      prevPanel = prevSibling.clone(prevSibling.getCloneIndex(), true);\n      prevPanel.setPosition(newPosition);\n    }\n\n    return prevPanel;\n  };\n\n  __proto.next = function () {\n    var viewport = this.viewport;\n    var options = viewport.options;\n    var nextSibling = this.nextSibling;\n    var lastIndex = viewport.panelManager.getLastIndex();\n\n    if (!nextSibling) {\n      return null;\n    }\n\n    var currentIndex = this.getIndex();\n    var currentPosition = this.getPosition();\n    var nextPanelIndex = nextSibling.getIndex();\n    var nextPanelPosition = nextSibling.getPosition();\n    var hasEmptyPanelBetween = nextPanelIndex - currentIndex > 1;\n    var notYetMaxPanel = options.infinite && currentIndex < lastIndex && nextPanelIndex < currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMaxPanel) {\n      return null;\n    }\n\n    var newPosition = currentPosition + this.getSize() + options.gap;\n    var nextPanel = nextSibling;\n\n    if (nextPanelPosition !== newPosition) {\n      nextPanel = nextSibling.clone(nextSibling.getCloneIndex(), true);\n      nextPanel.setPosition(newPosition);\n    }\n\n    return nextPanel;\n  };\n\n  __proto.insertBefore = function (element) {\n    var viewport = this.viewport;\n    var parsedElements = parseElement(element);\n    var firstPanel = viewport.panelManager.firstPanel();\n    var prevSibling = this.prevSibling; // Finding correct inserting index\n    // While it should insert removing empty spaces,\n    // It also should have to be bigger than prevSibling' s index\n\n    var targetIndex = prevSibling && firstPanel.getIndex() !== this.getIndex() ? Math.max(prevSibling.getIndex() + 1, this.getIndex() - parsedElements.length) : Math.max(this.getIndex() - parsedElements.length, 0);\n    return viewport.insert(targetIndex, parsedElements);\n  };\n\n  __proto.insertAfter = function (element) {\n    return this.viewport.insert(this.getIndex() + 1, element);\n  };\n\n  __proto.remove = function () {\n    this.viewport.remove(this.getIndex());\n    return this;\n  };\n\n  __proto.destroy = function (option) {\n    if (!option.preserveUI) {\n      var originalStyle = this.state.originalStyle;\n      restoreStyle(this.element, originalStyle);\n    } // release resources\n\n\n    for (var x in this) {\n      this[x] = null;\n    }\n  };\n\n  __proto.getElement = function () {\n    return this.element;\n  };\n\n  __proto.getAnchorPosition = function () {\n    return this.state.position + this.state.relativeAnchorPosition;\n  };\n\n  __proto.getRelativeAnchorPosition = function () {\n    return this.state.relativeAnchorPosition;\n  };\n\n  __proto.getIndex = function () {\n    return this.state.index;\n  };\n\n  __proto.getPosition = function () {\n    return this.state.position;\n  };\n\n  __proto.getSize = function () {\n    return this.state.size;\n  };\n\n  __proto.getBbox = function () {\n    var state = this.state;\n    var viewport = this.viewport;\n    var element = this.element;\n    var options = viewport.options;\n\n    if (!element) {\n      state.cachedBbox = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    } else if (!state.cachedBbox) {\n      var wasVisible = Boolean(element.parentNode);\n      var cameraElement = viewport.getCameraElement();\n\n      if (!wasVisible) {\n        cameraElement.appendChild(element);\n        viewport.addVisiblePanel(this);\n      }\n\n      state.cachedBbox = getBbox(element, options.useOffset);\n\n      if (!wasVisible && viewport.options.renderExternal) {\n        cameraElement.removeChild(element);\n      }\n    }\n\n    return state.cachedBbox;\n  };\n\n  __proto.isClone = function () {\n    return this.state.isClone;\n  };\n\n  __proto.getOverlappedClass = function (classes) {\n    var element = this.element;\n\n    for (var _i = 0, classes_1 = classes; _i < classes_1.length; _i++) {\n      var className = classes_1[_i];\n\n      if (hasClass(element, className)) {\n        return className;\n      }\n    }\n  };\n\n  __proto.getCloneIndex = function () {\n    return this.state.cloneIndex;\n  };\n\n  __proto.getClonedPanels = function () {\n    var state = this.state;\n    return state.isClone ? this.original.getClonedPanels() : this.clonedPanels;\n  };\n\n  __proto.getIdenticalPanels = function () {\n    var state = this.state;\n    return state.isClone ? this.original.getIdenticalPanels() : __spreadArrays([this], this.clonedPanels);\n  };\n\n  __proto.getOriginalPanel = function () {\n    return this.state.isClone ? this.original : this;\n  };\n\n  __proto.setIndex = function (index) {\n    var state = this.state;\n    state.index = index;\n    this.clonedPanels.forEach(function (panel) {\n      return panel.state.index = index;\n    });\n  };\n\n  __proto.setPosition = function (pos) {\n    this.state.position = pos;\n    return this;\n  };\n\n  __proto.setPositionCSS = function (offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    if (!this.element) {\n      return;\n    }\n\n    var state = this.state;\n    var pos = state.position;\n    var options = this.viewport.options;\n    var elementStyle = this.element.style;\n    var currentElementStyle = options.horizontal ? elementStyle.left : elementStyle.top;\n    var styleToApply = pos - offset + \"px\";\n\n    if (!state.isVirtual && currentElementStyle !== styleToApply) {\n      options.horizontal ? elementStyle.left = styleToApply : elementStyle.top = styleToApply;\n    }\n  };\n\n  __proto.clone = function (cloneIndex, isVirtual, element) {\n    if (isVirtual === void 0) {\n      isVirtual = false;\n    }\n\n    var state = this.state;\n    var viewport = this.viewport;\n    var cloneElement = element;\n\n    if (!cloneElement && this.element) {\n      cloneElement = isVirtual ? this.element : this.element.cloneNode(true);\n    }\n\n    var clonedPanel = new Panel(cloneElement, state.index, viewport);\n    var clonedState = clonedPanel.state;\n    clonedPanel.original = state.isClone ? this.original : this;\n    clonedState.isClone = true;\n    clonedState.isVirtual = isVirtual;\n    clonedState.cloneIndex = cloneIndex; // Inherit some state values\n\n    clonedState.size = state.size;\n    clonedState.relativeAnchorPosition = state.relativeAnchorPosition;\n    clonedState.originalStyle = state.originalStyle;\n    clonedState.cachedBbox = state.cachedBbox;\n\n    if (!isVirtual) {\n      this.clonedPanels.push(clonedPanel);\n    } else {\n      clonedPanel.prevSibling = this.prevSibling;\n      clonedPanel.nextSibling = this.nextSibling;\n    }\n\n    return clonedPanel;\n  };\n\n  __proto.removeElement = function () {\n    if (!this.viewport.options.renderExternal) {\n      var element = this.element;\n      element.parentNode && element.parentNode.removeChild(element);\n    } // Do the same thing for clones\n\n\n    if (!this.state.isClone) {\n      this.removeClonedPanelsAfter(0);\n    }\n  };\n\n  __proto.removeClonedPanelsAfter = function (start) {\n    var options = this.viewport.options;\n    var removingPanels = this.clonedPanels.splice(start);\n\n    if (!options.renderExternal) {\n      removingPanels.forEach(function (panel) {\n        panel.removeElement();\n      });\n    }\n  };\n\n  __proto.setElement = function (element) {\n    if (!element) {\n      return;\n    }\n\n    var currentElement = this.element;\n\n    if (element !== currentElement) {\n      var options = this.viewport.options;\n\n      if (currentElement) {\n        if (options.horizontal) {\n          element.style.left = currentElement.style.left;\n        } else {\n          element.style.top = currentElement.style.top;\n        }\n      } else {\n        var originalStyle = this.state.originalStyle;\n        originalStyle.className = element.getAttribute(\"class\");\n        originalStyle.style = element.getAttribute(\"style\");\n      }\n\n      this.element = element;\n\n      if (options.classPrefix) {\n        addClass(element, options.classPrefix + \"-panel\");\n      } // Update size info after applying panel css\n\n\n      applyCSS(this.element, DEFAULT_PANEL_CSS);\n    }\n  };\n\n  return Panel;\n}();\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n\nvar PanelManager = /*#__PURE__*/function () {\n  function PanelManager(cameraElement, options) {\n    this.cameraElement = cameraElement;\n    this.panels = [];\n    this.clones = [];\n    this.range = {\n      min: -1,\n      max: -1\n    };\n    this.length = 0;\n    this.cloneCount = 0;\n    this.options = options;\n    this.lastIndex = options.lastIndex;\n  }\n\n  var __proto = PanelManager.prototype;\n\n  __proto.firstPanel = function () {\n    return this.panels[this.range.min];\n  };\n\n  __proto.lastPanel = function () {\n    return this.panels[this.range.max];\n  };\n\n  __proto.allPanels = function () {\n    return __spreadArrays(this.panels, this.clones.reduce(function (allClones, clones) {\n      return __spreadArrays(allClones, clones);\n    }, []));\n  };\n\n  __proto.originalPanels = function () {\n    return this.panels;\n  };\n\n  __proto.clonedPanels = function () {\n    return this.clones;\n  };\n\n  __proto.replacePanels = function (newPanels, newClones) {\n    this.panels = newPanels;\n    this.clones = newClones;\n    this.range = {\n      min: findIndex(newPanels, function (panel) {\n        return Boolean(panel);\n      }),\n      max: newPanels.length - 1\n    };\n    this.length = newPanels.filter(function (panel) {\n      return Boolean(panel);\n    }).length;\n  };\n\n  __proto.has = function (index) {\n    return !!this.panels[index];\n  };\n\n  __proto.get = function (index) {\n    return this.panels[index];\n  };\n\n  __proto.getPanelCount = function () {\n    return this.length;\n  };\n\n  __proto.getLastIndex = function () {\n    return this.lastIndex;\n  };\n\n  __proto.getRange = function () {\n    return this.range;\n  };\n\n  __proto.getCloneCount = function () {\n    return this.cloneCount;\n  };\n\n  __proto.setLastIndex = function (lastIndex) {\n    this.lastIndex = lastIndex;\n    var firstPanel = this.firstPanel();\n    var lastPanel = this.lastPanel();\n\n    if (!firstPanel || !lastPanel) {\n      return; // no meaning of updating range & length\n    } // Remove panels above new last index\n\n\n    var range = this.range;\n\n    if (lastPanel.getIndex() > lastIndex) {\n      var removingPanels = this.panels.splice(lastIndex + 1);\n      this.length -= removingPanels.length;\n      var firstRemovedPanel = removingPanels.filter(function (panel) {\n        return !!panel;\n      })[0];\n      var possibleLastPanel = firstRemovedPanel.prevSibling;\n\n      if (possibleLastPanel) {\n        range.max = possibleLastPanel.getIndex();\n      } else {\n        range.min = -1;\n        range.max = -1;\n      }\n\n      if (this.shouldRender()) {\n        removingPanels.forEach(function (panel) {\n          return panel.removeElement();\n        });\n      }\n    }\n  };\n\n  __proto.setCloneCount = function (cloneCount) {\n    this.cloneCount = cloneCount;\n  }; // Insert at index\n  // Returns pushed elements from index, inserting at 'empty' position doesn't push elements behind it\n\n\n  __proto.insert = function (index, newPanels) {\n    var panels = this.panels;\n    var range = this.range;\n    var isCircular = this.options.circular;\n    var lastIndex = this.lastIndex; // Find first panel that index is greater than inserting index\n\n    var nextSibling = this.findFirstPanelFrom(index); // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n\n    var firstPanel = this.firstPanel();\n    var siblingElement = nextSibling ? nextSibling.getElement() : isCircular && firstPanel ? firstPanel.getClonedPanels()[0].getElement() : null; // Insert panels before sibling element\n\n    this.insertNewPanels(newPanels, siblingElement);\n    var pushedIndex = newPanels.length; // Like when setting index 50 while visible panels are 0, 1, 2\n\n    if (index > range.max) {\n      newPanels.forEach(function (panel, offset) {\n        panels[index + offset] = panel;\n      });\n    } else {\n      var panelsAfterIndex = panels.slice(index, index + newPanels.length); // Find empty from beginning\n\n      var emptyPanelCount = findIndex(panelsAfterIndex, function (panel) {\n        return !!panel;\n      });\n\n      if (emptyPanelCount < 0) {\n        // All empty\n        emptyPanelCount = panelsAfterIndex.length;\n      }\n\n      pushedIndex = newPanels.length - emptyPanelCount; // Insert removing empty panels\n\n      panels.splice.apply(panels, __spreadArrays([index, emptyPanelCount], newPanels)); // Remove panels after last index\n\n      if (panels.length > lastIndex + 1) {\n        var removedPanels = panels.splice(lastIndex + 1).filter(function (panel) {\n          return Boolean(panel);\n        });\n        this.length -= removedPanels.length; // Find first\n\n        var newLastIndex = lastIndex - findIndex(this.panels.concat().reverse(), function (panel) {\n          return !!panel;\n        }); // Can be filled with empty after newLastIndex\n\n        this.panels.splice(newLastIndex + 1);\n        this.range.max = newLastIndex;\n\n        if (this.shouldRender()) {\n          removedPanels.forEach(function (panel) {\n            return panel.removeElement();\n          });\n        }\n      }\n    } // Update index of previous panels\n\n\n    if (pushedIndex > 0) {\n      panels.slice(index + newPanels.length).forEach(function (panel) {\n        panel.setIndex(panel.getIndex() + pushedIndex);\n      });\n    } // Update state\n\n\n    this.length += newPanels.length;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length - pushedIndex, nextSibling);\n      var clones = this.clones;\n      var panelCount_1 = this.panels.length;\n\n      if (clones[0] && clones[0].length > lastIndex + 1) {\n        clones.forEach(function (cloneSet) {\n          cloneSet.splice(panelCount_1);\n        });\n      }\n    }\n\n    return pushedIndex;\n  };\n\n  __proto.replace = function (index, newPanels) {\n    var panels = this.panels;\n    var range = this.range;\n    var options = this.options;\n    var isCircular = options.circular; // Find first panel that index is greater than inserting index\n\n    var nextSibling = this.findFirstPanelFrom(index + newPanels.length); // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n\n    var firstPanel = this.firstPanel();\n    var siblingElement = nextSibling ? nextSibling.getElement() : isCircular && firstPanel ? firstPanel.getClonedPanels()[0].getElement() : null; // Insert panels before sibling element\n\n    this.insertNewPanels(newPanels, siblingElement);\n\n    if (index > range.max) {\n      // Temporarily insert null at index to use splice()\n      panels[index] = null;\n    }\n\n    var replacedPanels = panels.splice.apply(panels, __spreadArrays([index, newPanels.length], newPanels));\n    var wasNonEmptyCount = replacedPanels.filter(function (panel) {\n      return Boolean(panel);\n    }).length; // Suppose inserting [1, 2, 3] at 0 position when there were [empty, 1]\n    // So length should be increased by 3(inserting panels) - 1(non-empty panels)\n\n    this.length += newPanels.length - wasNonEmptyCount;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length, nextSibling);\n    }\n\n    if (this.shouldRender()) {\n      replacedPanels.forEach(function (panel) {\n        return panel && panel.removeElement();\n      });\n    }\n\n    return replacedPanels;\n  };\n\n  __proto.remove = function (index, deleteCount) {\n    if (deleteCount === void 0) {\n      deleteCount = 1;\n    }\n\n    var isCircular = this.options.circular;\n    var panels = this.panels;\n    var clones = this.clones; // Delete count should be equal or larger than 0\n\n    deleteCount = Math.max(deleteCount, 0);\n    var deletedPanels = panels.splice(index, deleteCount).filter(function (panel) {\n      return !!panel;\n    });\n\n    if (this.shouldRender()) {\n      deletedPanels.forEach(function (panel) {\n        return panel.removeElement();\n      });\n    }\n\n    if (isCircular) {\n      clones.forEach(function (cloneSet) {\n        cloneSet.splice(index, deleteCount);\n      });\n    } // Update indexes\n\n\n    panels.slice(index).forEach(function (panel) {\n      panel.setIndex(panel.getIndex() - deleteCount);\n    }); // Check last panel is empty\n\n    var lastIndex = panels.length - 1;\n\n    if (!panels[lastIndex]) {\n      var reversedPanels = panels.concat().reverse();\n      var nonEmptyIndexFromLast = findIndex(reversedPanels, function (panel) {\n        return !!panel;\n      });\n      lastIndex = nonEmptyIndexFromLast < 0 ? -1 // All empty\n      : lastIndex - nonEmptyIndexFromLast; // Remove all empty panels from last\n\n      panels.splice(lastIndex + 1);\n\n      if (isCircular) {\n        clones.forEach(function (cloneSet) {\n          cloneSet.splice(lastIndex + 1);\n        });\n      }\n    } // Update range & length\n\n\n    this.range = {\n      min: findIndex(panels, function (panel) {\n        return !!panel;\n      }),\n      max: lastIndex\n    };\n    this.length -= deletedPanels.length;\n\n    if (this.length <= 0) {\n      // Reset clones\n      this.clones = [];\n      this.cloneCount = 0;\n    }\n\n    return deletedPanels;\n  };\n\n  __proto.chainAllPanels = function () {\n    var allPanels = this.allPanels().filter(function (panel) {\n      return !!panel;\n    });\n    var allPanelsCount = allPanels.length;\n\n    if (allPanelsCount <= 1) {\n      return;\n    }\n\n    allPanels.slice(1, allPanels.length - 1).forEach(function (panel, idx) {\n      var prevPanel = allPanels[idx];\n      var nextPanel = allPanels[idx + 2];\n      panel.prevSibling = prevPanel;\n      panel.nextSibling = nextPanel;\n    });\n    var firstPanel = allPanels[0];\n    var lastPanel = allPanels[allPanelsCount - 1];\n    firstPanel.prevSibling = null;\n    firstPanel.nextSibling = allPanels[1];\n    lastPanel.prevSibling = allPanels[allPanelsCount - 2];\n    lastPanel.nextSibling = null;\n\n    if (this.options.circular) {\n      firstPanel.prevSibling = lastPanel;\n      lastPanel.nextSibling = firstPanel;\n    }\n  };\n\n  __proto.insertClones = function (cloneIndex, index, clonedPanels, deleteCount) {\n    if (deleteCount === void 0) {\n      deleteCount = 0;\n    }\n\n    var clones = this.clones;\n    var lastIndex = this.lastIndex;\n\n    if (!clones[cloneIndex]) {\n      var newClones_1 = [];\n      clonedPanels.forEach(function (panel, offset) {\n        newClones_1[index + offset] = panel;\n      });\n      clones[cloneIndex] = newClones_1;\n    } else {\n      var insertTarget_1 = clones[cloneIndex];\n\n      if (index >= insertTarget_1.length) {\n        clonedPanels.forEach(function (panel, offset) {\n          insertTarget_1[index + offset] = panel;\n        });\n      } else {\n        insertTarget_1.splice.apply(insertTarget_1, __spreadArrays([index, deleteCount], clonedPanels)); // Remove panels after last index\n\n        if (clonedPanels.length > lastIndex + 1) {\n          clonedPanels.splice(lastIndex + 1);\n        }\n      }\n    }\n  }; // clones are operating in set\n\n\n  __proto.removeClonesAfter = function (cloneIndex) {\n    var panels = this.panels;\n    panels.forEach(function (panel) {\n      panel.removeClonedPanelsAfter(cloneIndex);\n    });\n    this.clones.splice(cloneIndex);\n  };\n\n  __proto.findPanelOf = function (element) {\n    var allPanels = this.allPanels();\n\n    for (var _i = 0, allPanels_1 = allPanels; _i < allPanels_1.length; _i++) {\n      var panel = allPanels_1[_i];\n\n      if (!panel) {\n        continue;\n      }\n\n      var panelElement = panel.getElement();\n\n      if (panelElement.contains(element)) {\n        return panel;\n      }\n    }\n  };\n\n  __proto.findFirstPanelFrom = function (index) {\n    for (var _i = 0, _a = this.panels.slice(index); _i < _a.length; _i++) {\n      var panel = _a[_i];\n\n      if (panel && panel.getIndex() >= index && panel.getElement().parentNode) {\n        return panel;\n      }\n    }\n  };\n\n  __proto.addNewClones = function (index, originalPanels, deleteCount, nextSibling) {\n    var _this = this;\n\n    var cameraElement = this.cameraElement;\n    var cloneCount = this.getCloneCount();\n    var lastPanel = this.lastPanel();\n    var lastPanelClones = lastPanel ? lastPanel.getClonedPanels() : [];\n    var nextSiblingClones = nextSibling ? nextSibling.getClonedPanels() : [];\n\n    var _loop_1 = function (cloneIndex) {\n      var cloneNextSibling = nextSiblingClones[cloneIndex];\n      var lastPanelSibling = lastPanelClones[cloneIndex];\n      var cloneSiblingElement = cloneNextSibling ? cloneNextSibling.getElement() : lastPanelSibling ? lastPanelSibling.getElement().nextElementSibling : null;\n      var newClones = originalPanels.map(function (panel) {\n        var clone = panel.clone(cloneIndex);\n\n        if (_this.shouldRender()) {\n          cameraElement.insertBefore(clone.getElement(), cloneSiblingElement);\n        }\n\n        return clone;\n      });\n      this_1.insertClones(cloneIndex, index, newClones, deleteCount);\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, _a = counter(cloneCount); _i < _a.length; _i++) {\n      var cloneIndex = _a[_i];\n\n      _loop_1(cloneIndex);\n    }\n  };\n\n  __proto.updateIndex = function (insertingIndex) {\n    var panels = this.panels;\n    var range = this.range;\n    var newLastIndex = panels.length - 1;\n\n    if (newLastIndex > range.max) {\n      range.max = newLastIndex;\n    }\n\n    if (insertingIndex < range.min || range.min < 0) {\n      range.min = insertingIndex;\n    }\n  };\n\n  __proto.insertNewPanels = function (newPanels, siblingElement) {\n    if (this.shouldRender()) {\n      var fragment_1 = document.createDocumentFragment();\n      newPanels.forEach(function (panel) {\n        return fragment_1.appendChild(panel.getElement());\n      });\n      this.cameraElement.insertBefore(fragment_1, siblingElement);\n    }\n  };\n\n  __proto.shouldRender = function () {\n    var options = this.options;\n    return !options.renderExternal && !options.renderOnlyVisible;\n  };\n\n  return PanelManager;\n}();\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n\nvar State = /*#__PURE__*/function () {\n  function State() {\n    this.delta = 0;\n    this.direction = null;\n    this.targetPanel = null;\n    this.lastPosition = 0;\n  }\n\n  var __proto = State.prototype;\n\n  __proto.onEnter = function (prevState) {\n    this.delta = prevState.delta;\n    this.direction = prevState.direction;\n    this.targetPanel = prevState.targetPanel;\n    this.lastPosition = prevState.lastPosition;\n  };\n\n  __proto.onExit = function (nextState) {// DO NOTHING\n  };\n\n  __proto.onHold = function (e, context) {// DO NOTHING\n  };\n\n  __proto.onChange = function (e, context) {// DO NOTHING\n  };\n\n  __proto.onRelease = function (e, context) {// DO NOTHING\n  };\n\n  __proto.onAnimationEnd = function (e, context) {// DO NOTHING\n  };\n\n  __proto.onFinish = function (e, context) {// DO NOTHING\n  };\n\n  return State;\n}();\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n\nvar IdleState = /*#__PURE__*/function (_super) {\n  __extends(IdleState, _super);\n\n  function IdleState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = STATE_TYPE.IDLE;\n    _this.holding = false;\n    _this.playing = false;\n    return _this;\n  }\n\n  var __proto = IdleState.prototype;\n\n  __proto.onEnter = function () {\n    this.direction = null;\n    this.targetPanel = null;\n    this.delta = 0;\n    this.lastPosition = 0;\n  };\n\n  __proto.onHold = function (e, _a) {\n    var flicking = _a.flicking,\n        viewport = _a.viewport,\n        triggerEvent = _a.triggerEvent,\n        transitTo = _a.transitTo; // Shouldn't do any action until any panels on flicking area\n\n    if (flicking.getPanelCount() <= 0) {\n      if (viewport.options.infinite) {\n        viewport.moveCamera(viewport.getCameraPosition(), e);\n      }\n\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    this.lastPosition = viewport.getCameraPosition();\n    triggerEvent(EVENTS.HOLD_START, e, true).onSuccess(function () {\n      transitTo(STATE_TYPE.HOLDING);\n    }).onStopped(function () {\n      transitTo(STATE_TYPE.DISABLED);\n    });\n  }; // By methods call\n\n\n  __proto.onChange = function (e, context) {\n    var triggerEvent = context.triggerEvent,\n        transitTo = context.transitTo;\n    triggerEvent(EVENTS.MOVE_START, e, false).onSuccess(function () {\n      // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.ANIMATING).onChange(e, context);\n    }).onStopped(function () {\n      transitTo(STATE_TYPE.DISABLED);\n    });\n  };\n\n  return IdleState;\n}(State);\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n\nvar HoldingState = /*#__PURE__*/function (_super) {\n  __extends(HoldingState, _super);\n\n  function HoldingState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = STATE_TYPE.HOLDING;\n    _this.holding = true;\n    _this.playing = true;\n    _this.releaseEvent = null;\n    return _this;\n  }\n\n  var __proto = HoldingState.prototype;\n\n  __proto.onChange = function (e, context) {\n    var flicking = context.flicking,\n        triggerEvent = context.triggerEvent,\n        transitTo = context.transitTo;\n    var offset = flicking.options.horizontal ? e.inputEvent.offsetX : e.inputEvent.offsetY;\n    this.direction = offset < 0 ? DIRECTION.NEXT : DIRECTION.PREV;\n    triggerEvent(EVENTS.MOVE_START, e, true).onSuccess(function () {\n      // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.DRAGGING).onChange(e, context);\n    }).onStopped(function () {\n      transitTo(STATE_TYPE.DISABLED);\n    });\n  };\n\n  __proto.onRelease = function (e, context) {\n    var viewport = context.viewport,\n        triggerEvent = context.triggerEvent,\n        transitTo = context.transitTo;\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (e.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      e.setTo({\n        flick: viewport.getCameraPosition()\n      }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    } // Can't handle select event here,\n    // As \"finish\" axes event happens\n\n\n    this.releaseEvent = e;\n  };\n\n  __proto.onFinish = function (e, _a) {\n    var viewport = _a.viewport,\n        triggerEvent = _a.triggerEvent,\n        transitTo = _a.transitTo; // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this.releaseEvent) {\n      return;\n    } // Handle release event here\n    // To prevent finish event called twice\n\n\n    var releaseEvent = this.releaseEvent; // Static click\n\n    var srcEvent = releaseEvent.inputEvent.srcEvent;\n    var clickedElement;\n\n    if (srcEvent.type === \"touchend\") {\n      var touchEvent = srcEvent;\n      var touch = touchEvent.changedTouches[0];\n      clickedElement = document.elementFromPoint(touch.clientX, touch.clientY);\n    } else {\n      clickedElement = srcEvent.target;\n    }\n\n    var clickedPanel = viewport.panelManager.findPanelOf(clickedElement);\n    var cameraPosition = viewport.getCameraPosition();\n\n    if (clickedPanel) {\n      var clickedPanelPosition = clickedPanel.getPosition();\n      var direction = clickedPanelPosition > cameraPosition ? DIRECTION.NEXT : clickedPanelPosition < cameraPosition ? DIRECTION.PREV : null; // Don't provide axes event, to use axes instance instead\n\n      triggerEvent(EVENTS.SELECT, null, true, {\n        direction: direction,\n        index: clickedPanel.getIndex(),\n        panel: clickedPanel\n      });\n    }\n  };\n\n  return HoldingState;\n}(State);\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n\nvar DraggingState = /*#__PURE__*/function (_super) {\n  __extends(DraggingState, _super);\n\n  function DraggingState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = STATE_TYPE.DRAGGING;\n    _this.holding = true;\n    _this.playing = true;\n    return _this;\n  }\n\n  var __proto = DraggingState.prototype;\n\n  __proto.onChange = function (e, _a) {\n    var moveCamera = _a.moveCamera,\n        transitTo = _a.transitTo;\n\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e).onStopped(function () {\n      transitTo(STATE_TYPE.DISABLED);\n    });\n  };\n\n  __proto.onRelease = function (e, context) {\n    var flicking = context.flicking,\n        viewport = context.viewport,\n        triggerEvent = context.triggerEvent,\n        transitTo = context.transitTo,\n        stopCamera = context.stopCamera;\n    var delta = this.delta;\n    var absDelta = Math.abs(delta);\n    var options = flicking.options;\n    var horizontal = options.horizontal;\n    var moveType = viewport.moveType;\n    var inputEvent = e.inputEvent;\n    var velocity = horizontal ? inputEvent.velocityX : inputEvent.velocityY;\n    var inputDelta = horizontal ? inputEvent.deltaX : inputEvent.deltaY;\n    var isNextDirection = Math.abs(velocity) > 1 ? velocity < 0 : absDelta > 0 ? delta > 0 : inputDelta < 0;\n    var swipeDistance = viewport.options.bound ? Math.max(absDelta, Math.abs(inputDelta)) : absDelta;\n    var swipeAngle = inputEvent.deltaX ? Math.abs(180 * Math.atan(inputEvent.deltaY / inputEvent.deltaX) / Math.PI) : 90;\n    var belowAngleThreshold = horizontal ? swipeAngle <= options.thresholdAngle : swipeAngle > options.thresholdAngle;\n    var overThreshold = swipeDistance >= options.threshold && belowAngleThreshold;\n    var moveTypeContext = {\n      viewport: viewport,\n      axesEvent: e,\n      state: this,\n      swipeDistance: swipeDistance,\n      isNextDirection: isNextDirection\n    }; // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n    var targetPanel = this.targetPanel;\n\n    if (!overThreshold && targetPanel) {\n      // Interrupted while animating\n      var interruptDestInfo = moveType.findPanelWhenInterrupted(moveTypeContext);\n      viewport.moveTo(interruptDestInfo.panel, interruptDestInfo.destPos, interruptDestInfo.eventType, e, interruptDestInfo.duration);\n      transitTo(STATE_TYPE.ANIMATING);\n      return;\n    }\n\n    var currentPanel = viewport.getCurrentPanel();\n    var nearestPanel = viewport.getNearestPanel();\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      e.stop();\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    var destInfo = overThreshold ? moveType.findTargetPanel(moveTypeContext) : moveType.findRestorePanel(moveTypeContext);\n    viewport.moveTo(destInfo.panel, destInfo.destPos, destInfo.eventType, e, destInfo.duration).onSuccess(function () {\n      transitTo(STATE_TYPE.ANIMATING);\n    }).onStopped(function () {\n      transitTo(STATE_TYPE.DISABLED);\n      stopCamera(e);\n    });\n  };\n\n  return DraggingState;\n}(State);\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n\nvar AnimatingState = /*#__PURE__*/function (_super) {\n  __extends(AnimatingState, _super);\n\n  function AnimatingState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = STATE_TYPE.ANIMATING;\n    _this.holding = false;\n    _this.playing = true;\n    return _this;\n  }\n\n  var __proto = AnimatingState.prototype;\n\n  __proto.onHold = function (e, _a) {\n    var viewport = _a.viewport,\n        triggerEvent = _a.triggerEvent,\n        transitTo = _a.transitTo;\n    var options = viewport.options;\n    var scrollArea = viewport.getScrollArea();\n    var scrollAreaSize = viewport.getScrollAreaSize();\n    var loopCount = Math.floor((this.lastPosition + this.delta - scrollArea.prev) / scrollAreaSize);\n    var targetPanel = this.targetPanel;\n\n    if (options.circular && loopCount !== 0 && targetPanel) {\n      var cloneCount = viewport.panelManager.getCloneCount();\n      var originalTargetPosition = targetPanel.getPosition(); // cloneIndex is from -1 to cloneCount - 1\n\n      var newCloneIndex = circulate(targetPanel.getCloneIndex() - loopCount, -1, cloneCount - 1, true);\n      var newTargetPosition = originalTargetPosition - loopCount * scrollAreaSize;\n      var newTargetPanel = targetPanel.getIdenticalPanels()[newCloneIndex + 1].clone(newCloneIndex, true); // Set new target panel considering looped count\n\n      newTargetPanel.setPosition(newTargetPosition);\n      this.targetPanel = newTargetPanel;\n    } // Reset last position and delta\n\n\n    this.delta = 0;\n    this.lastPosition = viewport.getCameraPosition(); // Update current panel as current nearest panel\n\n    viewport.setCurrentPanel(viewport.getNearestPanel());\n    triggerEvent(EVENTS.HOLD_START, e, true).onSuccess(function () {\n      transitTo(STATE_TYPE.DRAGGING);\n    }).onStopped(function () {\n      transitTo(STATE_TYPE.DISABLED);\n    });\n  };\n\n  __proto.onChange = function (e, _a) {\n    var moveCamera = _a.moveCamera,\n        transitTo = _a.transitTo;\n\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e).onStopped(function () {\n      transitTo(STATE_TYPE.DISABLED);\n    });\n  };\n\n  __proto.onFinish = function (e, _a) {\n    var flicking = _a.flicking,\n        viewport = _a.viewport,\n        triggerEvent = _a.triggerEvent,\n        transitTo = _a.transitTo;\n    var isTrusted = e && e.isTrusted;\n    viewport.options.bound ? viewport.setCurrentPanel(this.targetPanel) : viewport.setCurrentPanel(viewport.getNearestPanel());\n\n    if (flicking.options.adaptive) {\n      viewport.updateAdaptiveSize();\n    }\n\n    transitTo(STATE_TYPE.IDLE);\n    viewport.updateCameraPosition();\n    triggerEvent(EVENTS.MOVE_END, e, isTrusted, {\n      direction: this.direction\n    });\n  };\n\n  return AnimatingState;\n}(State);\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n\nvar DisabledState = /*#__PURE__*/function (_super) {\n  __extends(DisabledState, _super);\n\n  function DisabledState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = STATE_TYPE.DISABLED;\n    _this.holding = false;\n    _this.playing = true;\n    return _this;\n  }\n\n  var __proto = DisabledState.prototype;\n\n  __proto.onAnimationEnd = function (e, _a) {\n    var transitTo = _a.transitTo;\n    transitTo(STATE_TYPE.IDLE);\n  };\n\n  __proto.onChange = function (e, _a) {\n    var viewport = _a.viewport,\n        transitTo = _a.transitTo; // Can stop Axes's change event\n\n    e.stop(); // Should update axes position as it's already changed at this moment\n\n    viewport.updateAxesPosition(viewport.getCameraPosition());\n    transitTo(STATE_TYPE.IDLE);\n  };\n\n  __proto.onRelease = function (e, _a) {\n    var transitTo = _a.transitTo; // This is needed when stopped hold start event\n\n    if (e.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  };\n\n  return DisabledState;\n}(State);\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n\nvar StateMachine = /*#__PURE__*/function () {\n  function StateMachine() {\n    var _this = this;\n\n    this.state = new IdleState();\n\n    this.transitTo = function (nextStateType) {\n      var currentState = _this.state;\n\n      if (currentState.type !== nextStateType) {\n        var nextState = void 0;\n\n        switch (nextStateType) {\n          case STATE_TYPE.IDLE:\n            nextState = new IdleState();\n            break;\n\n          case STATE_TYPE.HOLDING:\n            nextState = new HoldingState();\n            break;\n\n          case STATE_TYPE.DRAGGING:\n            nextState = new DraggingState();\n            break;\n\n          case STATE_TYPE.ANIMATING:\n            nextState = new AnimatingState();\n            break;\n\n          case STATE_TYPE.DISABLED:\n            nextState = new DisabledState();\n            break;\n        }\n\n        currentState.onExit(nextState);\n        nextState.onEnter(currentState);\n        _this.state = nextState;\n      }\n\n      return _this.state;\n    };\n  }\n\n  var __proto = StateMachine.prototype;\n\n  __proto.fire = function (eventType, e, context) {\n    var currentState = this.state;\n\n    switch (eventType) {\n      case AXES_EVENTS.HOLD:\n        currentState.onHold(e, context);\n        break;\n\n      case AXES_EVENTS.CHANGE:\n        currentState.onChange(e, context);\n        break;\n\n      case AXES_EVENTS.RELEASE:\n        currentState.onRelease(e, context);\n        break;\n\n      case AXES_EVENTS.ANIMATION_END:\n        currentState.onAnimationEnd(e, context);\n        break;\n\n      case AXES_EVENTS.FINISH:\n        currentState.onFinish(e, context);\n        break;\n    }\n  };\n\n  __proto.getState = function () {\n    return this.state;\n  };\n\n  return StateMachine;\n}();\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n\nvar MoveType = /*#__PURE__*/function () {\n  function MoveType() {}\n\n  var __proto = MoveType.prototype;\n\n  __proto.is = function (type) {\n    return type === this.type;\n  };\n\n  __proto.findRestorePanel = function (ctx) {\n    var viewport = ctx.viewport;\n    var options = viewport.options;\n    var panel = options.circular ? this.findRestorePanelInCircularMode(ctx) : viewport.getCurrentPanel();\n    return {\n      panel: panel,\n      destPos: viewport.findEstimatedPosition(panel),\n      duration: options.duration,\n      eventType: EVENTS.RESTORE\n    };\n  };\n\n  __proto.findPanelWhenInterrupted = function (ctx) {\n    var state = ctx.state,\n        viewport = ctx.viewport;\n    var targetPanel = state.targetPanel;\n    return {\n      panel: targetPanel,\n      destPos: viewport.findEstimatedPosition(targetPanel),\n      duration: viewport.options.duration,\n      eventType: \"\"\n    };\n  }; // Calculate minimum distance to \"change\" panel\n\n\n  __proto.calcBrinkOfChange = function (ctx) {\n    var viewport = ctx.viewport,\n        isNextDirection = ctx.isNextDirection;\n    var options = viewport.options;\n    var currentPanel = viewport.getCurrentPanel();\n    var halfGap = options.gap / 2;\n    var relativeAnchorPosition = currentPanel.getRelativeAnchorPosition(); // Minimum distance needed to decide prev/next panel as nearest\n\n    /*\n     * |  Prev  |     Next     |\n     * |--------|--------------|\n     * [][      |<-Anchor    ][] <- Panel + Half-Gap\n     */\n\n    var minimumDistanceToChange = isNextDirection ? currentPanel.getSize() - relativeAnchorPosition + halfGap : relativeAnchorPosition + halfGap;\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n    return minimumDistanceToChange;\n  };\n\n  __proto.findRestorePanelInCircularMode = function (ctx) {\n    var viewport = ctx.viewport;\n    var originalPanel = viewport.getCurrentPanel().getOriginalPanel();\n    var hangerPosition = viewport.getHangerPosition();\n    var firstClonedPanel = originalPanel.getIdenticalPanels()[1];\n    var lapped = Math.abs(originalPanel.getAnchorPosition() - hangerPosition) > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n    return !ctx.isNextDirection && lapped ? firstClonedPanel : originalPanel;\n  };\n\n  return MoveType;\n}();\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n\nvar Snap = /*#__PURE__*/function (_super) {\n  __extends(Snap, _super);\n\n  function Snap(count) {\n    var _this = _super.call(this) || this;\n\n    _this.type = MOVE_TYPE.SNAP;\n    _this.count = count;\n    return _this;\n  }\n\n  var __proto = Snap.prototype;\n\n  __proto.findTargetPanel = function (ctx) {\n    var viewport = ctx.viewport,\n        axesEvent = ctx.axesEvent,\n        swipeDistance = ctx.swipeDistance;\n    var snapCount = this.count;\n    var eventDelta = Math.abs(axesEvent.delta.flick);\n    var currentPanel = viewport.getCurrentPanel();\n    var nearestPanel = viewport.getNearestPanel();\n    var minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    var nearestIsCurrent = nearestPanel.getIndex() === currentPanel.getIndex(); // This can happen when bounce is 0\n\n    var shouldMoveWhenBounceIs0 = viewport.canSetBoundMode() && nearestIsCurrent;\n    var shouldMoveToAdjacent = !viewport.isOutOfBound() && (swipeDistance <= minimumDistanceToChange || shouldMoveWhenBounceIs0);\n\n    if (snapCount > 1 && eventDelta > minimumDistanceToChange) {\n      return this.findSnappedPanel(ctx);\n    } else if (shouldMoveToAdjacent) {\n      return this.findAdjacentPanel(ctx);\n    } else {\n      return {\n        panel: nearestPanel,\n        duration: viewport.options.duration,\n        destPos: viewport.findEstimatedPosition(nearestPanel),\n        // As swipeDistance holds mouse/touch position change regardless of bounce option value\n        // swipDistance > minimumDistanceToChange can happen in bounce area\n        // Second condition is for handling that.\n        eventType: swipeDistance <= minimumDistanceToChange || viewport.isOutOfBound() && nearestIsCurrent ? EVENTS.RESTORE : EVENTS.CHANGE\n      };\n    }\n  };\n\n  __proto.findSnappedPanel = function (ctx) {\n    var axesEvent = ctx.axesEvent,\n        viewport = ctx.viewport,\n        state = ctx.state,\n        isNextDirection = ctx.isNextDirection;\n    var eventDelta = Math.abs(axesEvent.delta.flick);\n    var minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    var snapCount = this.count;\n    var options = viewport.options;\n    var scrollAreaSize = viewport.getScrollAreaSize();\n    var halfGap = options.gap / 2;\n    var estimatedHangerPos = axesEvent.destPos.flick + viewport.getRelativeHangerPosition();\n    var panelToMove = viewport.getNearestPanel();\n    var cycleIndex = panelToMove.getCloneIndex() + 1; // 0(original) or 1(clone)\n\n    var passedPanelCount = 0;\n\n    while (passedPanelCount < snapCount) {\n      // Since panelToMove holds also cloned panels, we should use original panel's position\n      var originalPanel = panelToMove.getOriginalPanel();\n      var panelPosition = originalPanel.getPosition() + cycleIndex * scrollAreaSize;\n      var panelSize = originalPanel.getSize();\n      var panelNextPosition = panelPosition + panelSize + halfGap;\n      var panelPrevPosition = panelPosition - halfGap; // Current panelToMove contains destPos\n\n      if (isNextDirection && panelNextPosition > estimatedHangerPos || !isNextDirection && panelPrevPosition < estimatedHangerPos) {\n        break;\n      }\n\n      var siblingPanel = isNextDirection ? panelToMove.nextSibling : panelToMove.prevSibling;\n\n      if (!siblingPanel) {\n        break;\n      }\n\n      var panelIndex = panelToMove.getIndex();\n      var siblingIndex = siblingPanel.getIndex();\n\n      if (isNextDirection && siblingIndex <= panelIndex || !isNextDirection && siblingIndex >= panelIndex) {\n        cycleIndex = isNextDirection ? cycleIndex + 1 : cycleIndex - 1;\n      }\n\n      panelToMove = siblingPanel;\n      passedPanelCount += 1;\n    }\n\n    var originalPosition = panelToMove.getOriginalPanel().getPosition();\n\n    if (cycleIndex !== 0) {\n      panelToMove = panelToMove.clone(panelToMove.getCloneIndex(), true);\n      panelToMove.setPosition(originalPosition + cycleIndex * scrollAreaSize);\n    }\n\n    var defaultDuration = viewport.options.duration;\n    var duration = clamp(axesEvent.duration, defaultDuration, defaultDuration * passedPanelCount);\n    return {\n      panel: panelToMove,\n      destPos: viewport.findEstimatedPosition(panelToMove),\n      duration: duration,\n      eventType: Math.max(eventDelta, state.delta) > minimumDistanceToChange ? EVENTS.CHANGE : EVENTS.RESTORE\n    };\n  };\n\n  __proto.findAdjacentPanel = function (ctx) {\n    var viewport = ctx.viewport,\n        isNextDirection = ctx.isNextDirection;\n    var options = viewport.options;\n    var currentIndex = viewport.getCurrentIndex();\n    var currentPanel = viewport.panelManager.get(currentIndex);\n    var hangerPosition = viewport.getHangerPosition();\n    var scrollArea = viewport.getScrollArea();\n    var firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n    var lapped = options.circular && Math.abs(currentPanel.getAnchorPosition() - hangerPosition) > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition); // If lapped in circular mode, use first cloned panel as base panel\n\n    var basePanel = lapped ? firstClonedPanel : currentPanel;\n    var basePosition = basePanel.getPosition();\n    var adjacentPanel = isNextDirection ? basePanel.nextSibling : basePanel.prevSibling;\n    var eventType = adjacentPanel ? EVENTS.CHANGE : EVENTS.RESTORE;\n    var panelToMove = adjacentPanel ? adjacentPanel : basePanel;\n    var targetRelativeAnchorPosition = panelToMove.getRelativeAnchorPosition();\n    var estimatedPanelPosition = options.circular ? isNextDirection ? basePosition + basePanel.getSize() + targetRelativeAnchorPosition + options.gap : basePosition - (panelToMove.getSize() - targetRelativeAnchorPosition) - options.gap : panelToMove.getAnchorPosition();\n    var estimatedPosition = estimatedPanelPosition - viewport.getRelativeHangerPosition();\n    var destPos = viewport.canSetBoundMode() ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next) : estimatedPosition;\n    return {\n      panel: panelToMove,\n      destPos: destPos,\n      duration: options.duration,\n      eventType: eventType\n    };\n  };\n\n  return Snap;\n}(MoveType);\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n\nvar FreeScroll = /*#__PURE__*/function (_super) {\n  __extends(FreeScroll, _super);\n\n  function FreeScroll() {\n    var _this = // Set snap count to Infinity\n    _super.call(this, Infinity) || this;\n\n    _this.type = MOVE_TYPE.FREE_SCROLL;\n    return _this;\n  }\n\n  var __proto = FreeScroll.prototype;\n\n  __proto.findTargetPanel = function (ctx) {\n    var axesEvent = ctx.axesEvent,\n        state = ctx.state,\n        viewport = ctx.viewport;\n    var destPos = axesEvent.destPos.flick;\n    var minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    var scrollArea = viewport.getScrollArea();\n    var currentPanel = viewport.getCurrentPanel();\n    var options = viewport.options;\n    var delta = Math.abs(axesEvent.delta.flick + state.delta);\n\n    if (delta > minimumDistanceToChange) {\n      var destInfo = _super.prototype.findSnappedPanel.call(this, ctx);\n\n      destInfo.duration = axesEvent.duration;\n      destInfo.destPos = destPos;\n      destInfo.eventType = !options.circular && destInfo.panel === currentPanel ? \"\" : EVENTS.CHANGE;\n      return destInfo;\n    } else {\n      var estimatedPosition = options.circular ? circulate(destPos, scrollArea.prev, scrollArea.next, false) : destPos;\n      estimatedPosition = clamp(estimatedPosition, scrollArea.prev, scrollArea.next);\n      estimatedPosition += viewport.getRelativeHangerPosition();\n      var estimatedPanel = viewport.findNearestPanelAt(estimatedPosition);\n      return {\n        panel: estimatedPanel,\n        destPos: destPos,\n        duration: axesEvent.duration,\n        eventType: \"\"\n      };\n    }\n  };\n\n  __proto.findRestorePanel = function (ctx) {\n    return this.findTargetPanel(ctx);\n  };\n\n  __proto.findPanelWhenInterrupted = function (ctx) {\n    var viewport = ctx.viewport;\n    return {\n      panel: viewport.getNearestPanel(),\n      destPos: viewport.getCameraPosition(),\n      duration: 0,\n      eventType: \"\"\n    };\n  };\n\n  __proto.calcBrinkOfChange = function (ctx) {\n    var viewport = ctx.viewport,\n        isNextDirection = ctx.isNextDirection;\n    var options = viewport.options;\n    var currentPanel = viewport.getCurrentPanel();\n    var halfGap = options.gap / 2;\n    var lastPosition = viewport.stateMachine.getState().lastPosition;\n    var currentPanelPosition = currentPanel.getPosition(); // As camera can stop anywhere in free scroll mode,\n    // minimumDistanceToChange should be calculated differently.\n    // Ref #191(https://github.com/naver/egjs-flicking/issues/191)\n\n    var lastHangerPosition = lastPosition + viewport.getRelativeHangerPosition();\n    var scrollAreaSize = viewport.getScrollAreaSize();\n    var minimumDistanceToChange = isNextDirection ? currentPanelPosition + currentPanel.getSize() - lastHangerPosition + halfGap : lastHangerPosition - currentPanelPosition + halfGap;\n    minimumDistanceToChange = Math.abs(minimumDistanceToChange % scrollAreaSize);\n    return Math.min(minimumDistanceToChange, scrollAreaSize - minimumDistanceToChange);\n  };\n\n  return FreeScroll;\n}(Snap);\n\nvar Viewport = /*#__PURE__*/function () {\n  function Viewport(flicking, options, triggerEvent) {\n    var _this = this;\n\n    this.plugins = [];\n\n    this.stopCamera = function (axesEvent) {\n      if (axesEvent && axesEvent.setTo) {\n        axesEvent.setTo({\n          flick: _this.state.position\n        }, 0);\n      }\n\n      _this.stateMachine.transitTo(STATE_TYPE.IDLE);\n    };\n\n    this.flicking = flicking;\n    this.triggerEvent = triggerEvent;\n    this.state = {\n      size: 0,\n      position: 0,\n      panelMaintainRatio: 0,\n      relativeHangerPosition: 0,\n      positionOffset: 0,\n      scrollArea: {\n        prev: 0,\n        next: 0\n      },\n      translate: TRANSFORM,\n      infiniteThreshold: 0,\n      checkedIndexes: [],\n      isAdaptiveCached: false,\n      isViewportGiven: false,\n      isCameraGiven: false,\n      originalViewportStyle: {\n        className: null,\n        style: null\n      },\n      originalCameraStyle: {\n        className: null,\n        style: null\n      },\n      cachedBbox: null\n    };\n    this.options = options;\n    this.stateMachine = new StateMachine();\n    this.visiblePanels = [];\n    this.panelBboxes = {};\n    this.build();\n  }\n\n  var __proto = Viewport.prototype;\n\n  __proto.moveTo = function (panel, destPos, eventType, axesEvent, duration) {\n    var _this = this;\n\n    if (duration === void 0) {\n      duration = this.options.duration;\n    }\n\n    var state = this.state;\n    var currentState = this.stateMachine.getState();\n    var currentPosition = state.position;\n    var isTrusted = axesEvent ? axesEvent.isTrusted : false;\n    var direction = destPos === currentPosition ? null : destPos > currentPosition ? DIRECTION.NEXT : DIRECTION.PREV;\n    var eventResult;\n\n    if (eventType === EVENTS.CHANGE) {\n      eventResult = this.triggerEvent(EVENTS.CHANGE, axesEvent, isTrusted, {\n        index: panel.getIndex(),\n        panel: panel,\n        direction: direction\n      });\n    } else if (eventType === EVENTS.RESTORE) {\n      eventResult = this.triggerEvent(EVENTS.RESTORE, axesEvent, isTrusted);\n    } else {\n      eventResult = {\n        onSuccess: function (callback) {\n          callback();\n          return this;\n        },\n        onStopped: function () {\n          return this;\n        }\n      };\n    }\n\n    eventResult.onSuccess(function () {\n      currentState.delta = 0;\n      currentState.lastPosition = _this.getCameraPosition();\n      currentState.targetPanel = panel;\n      currentState.direction = destPos === currentPosition ? null : destPos > currentPosition ? DIRECTION.NEXT : DIRECTION.PREV;\n\n      if (destPos === currentPosition) {\n        // no move\n        _this.nearestPanel = panel;\n        _this.currentPanel = panel;\n      }\n\n      if (axesEvent && axesEvent.setTo) {\n        // freeScroll only occurs in release events\n        axesEvent.setTo({\n          flick: destPos\n        }, duration);\n      } else {\n        _this.axes.setTo({\n          flick: destPos\n        }, duration);\n      }\n    });\n    return eventResult;\n  };\n\n  __proto.moveCamera = function (pos, axesEvent) {\n    var state = this.state;\n    var options = this.options;\n    var transform = state.translate.name;\n    var scrollArea = state.scrollArea; // Update position & nearestPanel\n\n    if (options.circular && !isBetween(pos, scrollArea.prev, scrollArea.next)) {\n      pos = circulate(pos, scrollArea.prev, scrollArea.next, false);\n    }\n\n    state.position = pos;\n    this.nearestPanel = this.findNearestPanel();\n    var nearestPanel = this.nearestPanel;\n    var originalNearestPosition = nearestPanel ? nearestPanel.getPosition() : 0; // From 0(panel position) to 1(panel position + panel size)\n    // When it's on gap area value will be (val > 1 || val < 0)\n\n    if (nearestPanel) {\n      var hangerPosition = this.getHangerPosition();\n      var panelPosition = nearestPanel.getPosition();\n      var panelSize = nearestPanel.getSize();\n      var halfGap = options.gap / 2; // As panel's range is from panel position - half gap ~ panel pos + panel size + half gap\n\n      state.panelMaintainRatio = (hangerPosition - panelPosition + halfGap) / (panelSize + 2 * halfGap);\n    } else {\n      state.panelMaintainRatio = 0;\n    }\n\n    this.checkNeedPanel(axesEvent); // Possibly modified after need panel, if it's looped\n\n    var modifiedNearestPosition = nearestPanel ? nearestPanel.getPosition() : 0;\n    pos += modifiedNearestPosition - originalNearestPosition;\n    state.position = pos;\n    this.updateVisiblePanels(); // Offset is needed to fix camera layer size in visible-only rendering mode\n\n    var posOffset = options.renderOnlyVisible ? state.positionOffset : 0;\n    var moveVector = options.horizontal ? [-(pos - posOffset), 0] : [0, -(pos - posOffset)];\n    var moveCoord = moveVector.map(function (coord) {\n      return Math.round(coord) + \"px\";\n    }).join(\", \");\n    this.cameraElement.style[transform] = state.translate.has3d ? \"translate3d(\" + moveCoord + \", 0px)\" : \"translate(\" + moveCoord + \")\";\n  };\n\n  __proto.unCacheBbox = function () {\n    var state = this.state;\n    var options = this.options;\n    state.cachedBbox = null;\n    this.visiblePanels = [];\n    var viewportElement = this.viewportElement;\n\n    if (!options.horizontal) {\n      // Don't preserve previous width for adaptive resizing\n      viewportElement.style.width = \"\";\n    } else {\n      viewportElement.style.height = \"\";\n    }\n\n    state.isAdaptiveCached = false;\n    this.panelBboxes = {};\n  };\n\n  __proto.resize = function () {\n    this.updateSize();\n    this.updateOriginalPanelPositions();\n    this.updateAdaptiveSize();\n    this.updateScrollArea();\n    this.updateClonePanels();\n    this.updateVisiblePanelPositions();\n    this.updateCameraPosition();\n    this.updatePlugins();\n  }; // Find nearest anchor from current hanger position\n\n\n  __proto.findNearestPanel = function () {\n    var state = this.state;\n    var panelManager = this.panelManager;\n    var hangerPosition = this.getHangerPosition();\n\n    if (this.isOutOfBound()) {\n      var position = state.position;\n      return position <= state.scrollArea.prev ? panelManager.firstPanel() : panelManager.lastPanel();\n    }\n\n    return this.findNearestPanelAt(hangerPosition);\n  };\n\n  __proto.findNearestPanelAt = function (position) {\n    var panelManager = this.panelManager;\n    var allPanels = panelManager.allPanels();\n    var minimumDistance = Infinity;\n    var nearestPanel;\n\n    for (var _i = 0, allPanels_1 = allPanels; _i < allPanels_1.length; _i++) {\n      var panel = allPanels_1[_i];\n\n      if (!panel) {\n        continue;\n      }\n\n      var prevPosition = panel.getPosition();\n      var nextPosition = prevPosition + panel.getSize(); // Use shortest distance from panel's range\n\n      var distance = isBetween(position, prevPosition, nextPosition) ? 0 : Math.min(Math.abs(prevPosition - position), Math.abs(nextPosition - position));\n\n      if (distance > minimumDistance) {\n        break;\n      } else if (distance === minimumDistance) {\n        var minimumAnchorDistance = Math.abs(position - nearestPanel.getAnchorPosition());\n        var anchorDistance = Math.abs(position - panel.getAnchorPosition());\n\n        if (anchorDistance > minimumAnchorDistance) {\n          break;\n        }\n      }\n\n      minimumDistance = distance;\n      nearestPanel = panel;\n    }\n\n    return nearestPanel;\n  };\n\n  __proto.findNearestIdenticalPanel = function (panel) {\n    var nearest = panel;\n    var shortestDistance = Infinity;\n    var hangerPosition = this.getHangerPosition();\n    var identicals = panel.getIdenticalPanels();\n    identicals.forEach(function (identical) {\n      var anchorPosition = identical.getAnchorPosition();\n      var distance = Math.abs(anchorPosition - hangerPosition);\n\n      if (distance < shortestDistance) {\n        nearest = identical;\n        shortestDistance = distance;\n      }\n    });\n    return nearest;\n  }; // Find shortest camera position that distance is minimum\n\n\n  __proto.findShortestPositionToPanel = function (panel) {\n    var state = this.state;\n    var options = this.options;\n    var anchorPosition = panel.getAnchorPosition();\n    var hangerPosition = this.getHangerPosition();\n    var distance = Math.abs(hangerPosition - anchorPosition);\n    var scrollAreaSize = state.scrollArea.next - state.scrollArea.prev;\n\n    if (!options.circular) {\n      var position = anchorPosition - state.relativeHangerPosition;\n      return this.canSetBoundMode() ? clamp(position, state.scrollArea.prev, state.scrollArea.next) : position;\n    } else {\n      // If going out of viewport border is more efficient way of moving, choose that position\n      return distance <= scrollAreaSize - distance ? anchorPosition - state.relativeHangerPosition : anchorPosition > hangerPosition // PREV TO NEXT\n      ? anchorPosition - state.relativeHangerPosition - scrollAreaSize // NEXT TO PREV\n      : anchorPosition - state.relativeHangerPosition + scrollAreaSize;\n    }\n  };\n\n  __proto.findEstimatedPosition = function (panel) {\n    var scrollArea = this.getScrollArea();\n    var estimatedPosition = panel.getAnchorPosition() - this.getRelativeHangerPosition();\n    estimatedPosition = this.canSetBoundMode() ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next) : estimatedPosition;\n    return estimatedPosition;\n  };\n\n  __proto.addVisiblePanel = function (panel) {\n    if (this.getVisibleIndexOf(panel) < 0) {\n      this.visiblePanels.push(panel);\n    }\n  };\n\n  __proto.enable = function () {\n    this.panInput.enable();\n  };\n\n  __proto.disable = function () {\n    this.panInput.disable();\n  };\n\n  __proto.insert = function (index, element) {\n    var _this = this;\n\n    var lastIndex = this.panelManager.getLastIndex(); // Index should not below 0\n\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    var state = this.state;\n    var options = this.options;\n    var parsedElements = parseElement(element);\n    var panels = parsedElements.map(function (el, idx) {\n      return new Panel(el, index + idx, _this);\n    }).slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    var pushedIndex = this.panelManager.insert(index, panels); // ...then calc bbox for all panels\n\n    this.resizePanels(panels);\n\n    if (!this.currentPanel) {\n      this.currentPanel = panels[0];\n      this.nearestPanel = panels[0];\n      var newCenterPanel = panels[0];\n      var newPanelPosition = this.findEstimatedPosition(newCenterPanel);\n      state.position = newPanelPosition;\n      this.updateAxesPosition(newPanelPosition);\n      state.panelMaintainRatio = (newCenterPanel.getRelativeAnchorPosition() + options.gap / 2) / (newCenterPanel.getSize() + options.gap);\n    } // Update checked indexes in infinite mode\n\n\n    this.updateCheckedIndexes({\n      min: index,\n      max: index\n    });\n    state.checkedIndexes.forEach(function (indexes, idx) {\n      var min = indexes[0],\n          max = indexes[1];\n\n      if (index < min) {\n        // Push checked index\n        state.checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n      }\n    });\n    this.resize();\n    return panels;\n  };\n\n  __proto.replace = function (index, element) {\n    var _this = this;\n\n    var state = this.state;\n    var options = this.options;\n    var panelManager = this.panelManager;\n    var lastIndex = panelManager.getLastIndex(); // Index should not below 0\n\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    var parsedElements = parseElement(element);\n    var panels = parsedElements.map(function (el, idx) {\n      return new Panel(el, index + idx, _this);\n    }).slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    var replacedPanels = panelManager.replace(index, panels);\n    replacedPanels.forEach(function (panel) {\n      var visibleIndex = _this.getVisibleIndexOf(panel);\n\n      if (visibleIndex > -1) {\n        _this.visiblePanels.splice(visibleIndex, 1);\n      }\n    }); // ...then calc bbox for all panels\n\n    this.resizePanels(panels);\n    var currentPanel = this.currentPanel;\n    var wasEmpty = !currentPanel;\n\n    if (wasEmpty) {\n      this.currentPanel = panels[0];\n      this.nearestPanel = panels[0];\n      var newCenterPanel = panels[0];\n      var newPanelPosition = this.findEstimatedPosition(newCenterPanel);\n      state.position = newPanelPosition;\n      this.updateAxesPosition(newPanelPosition);\n      state.panelMaintainRatio = (newCenterPanel.getRelativeAnchorPosition() + options.gap / 2) / (newCenterPanel.getSize() + options.gap);\n    } else if (isBetween(currentPanel.getIndex(), index, index + panels.length - 1)) {\n      // Current panel is replaced\n      this.currentPanel = panelManager.get(currentPanel.getIndex());\n    } // Update checked indexes in infinite mode\n\n\n    this.updateCheckedIndexes({\n      min: index,\n      max: index + panels.length - 1\n    });\n    this.resize();\n    return panels;\n  };\n\n  __proto.remove = function (index, deleteCount) {\n    if (deleteCount === void 0) {\n      deleteCount = 1;\n    }\n\n    var state = this.state; // Index should not below 0\n\n    index = Math.max(index, 0);\n    var panelManager = this.panelManager;\n    var currentIndex = this.getCurrentIndex();\n    var removedPanels = panelManager.remove(index, deleteCount);\n\n    if (isBetween(currentIndex, index, index + deleteCount - 1)) {\n      // Current panel is removed\n      // Use panel at removing index - 1 as new current panel if it exists\n      var newCurrentIndex = Math.max(index - 1, panelManager.getRange().min);\n      this.currentPanel = panelManager.get(newCurrentIndex);\n    } // Update checked indexes in infinite mode\n\n\n    if (deleteCount > 0) {\n      // Check whether removing index will affect checked indexes\n      // Suppose index 0 is empty and removed index 1, then checked index 0 should be deleted and vice versa.\n      this.updateCheckedIndexes({\n        min: index - 1,\n        max: index + deleteCount\n      }); // Uncache visible panels to refresh panels\n\n      this.visiblePanels = [];\n    }\n\n    if (panelManager.getPanelCount() <= 0) {\n      this.currentPanel = undefined;\n      this.nearestPanel = undefined;\n    }\n\n    this.resize();\n    var scrollArea = state.scrollArea;\n\n    if (state.position < scrollArea.prev || state.position > scrollArea.next) {\n      var newPosition = circulate(state.position, scrollArea.prev, scrollArea.next, false);\n      this.moveCamera(newPosition);\n      this.updateAxesPosition(newPosition);\n    }\n\n    return removedPanels;\n  };\n\n  __proto.updateAdaptiveSize = function () {\n    var state = this.state;\n    var options = this.options;\n    var horizontal = options.horizontal;\n    var currentPanel = this.getCurrentPanel();\n\n    if (!currentPanel) {\n      return;\n    }\n\n    var shouldApplyAdaptive = options.adaptive || !state.isAdaptiveCached;\n    var viewportStyle = this.viewportElement.style;\n\n    if (shouldApplyAdaptive) {\n      var sizeToApply = void 0;\n\n      if (options.adaptive) {\n        var panelBbox = currentPanel.getBbox();\n        sizeToApply = horizontal ? panelBbox.height : panelBbox.width;\n      } else {\n        // Find minimum height of panels to maximum panel size\n        var maximumPanelSize = this.panelManager.originalPanels().reduce(function (maximum, panel) {\n          var panelBbox = panel.getBbox();\n          return Math.max(maximum, horizontal ? panelBbox.height : panelBbox.width);\n        }, 0);\n        sizeToApply = maximumPanelSize;\n      }\n\n      if (!state.isAdaptiveCached) {\n        var viewportBbox = this.updateBbox();\n        sizeToApply = Math.max(sizeToApply, horizontal ? viewportBbox.height : viewportBbox.width);\n        state.isAdaptiveCached = true;\n      }\n\n      var viewportSize = sizeToApply + \"px\";\n\n      if (horizontal) {\n        viewportStyle.height = viewportSize;\n        state.cachedBbox.height = sizeToApply;\n      } else {\n        viewportStyle.width = viewportSize;\n        state.cachedBbox.width = sizeToApply;\n      }\n    }\n  }; // Update camera position after resizing\n\n\n  __proto.updateCameraPosition = function () {\n    var state = this.state;\n    var currentPanel = this.getCurrentPanel();\n    var cameraPosition = this.getCameraPosition();\n    var currentState = this.stateMachine.getState();\n    var isFreeScroll = this.moveType.is(MOVE_TYPE.FREE_SCROLL);\n    var relativeHangerPosition = this.getRelativeHangerPosition();\n    var halfGap = this.options.gap / 2;\n\n    if (currentState.holding || currentState.playing) {\n      this.updateVisiblePanels();\n      return;\n    }\n\n    var newPosition;\n\n    if (isFreeScroll) {\n      var positionBounded = this.canSetBoundMode() && (cameraPosition === state.scrollArea.prev || cameraPosition === state.scrollArea.next);\n      var nearestPanel = this.getNearestPanel(); // Preserve camera position if it is bound to scroll area limit\n\n      newPosition = positionBounded || !nearestPanel ? cameraPosition : nearestPanel.getPosition() - halfGap + (nearestPanel.getSize() + 2 * halfGap) * state.panelMaintainRatio - relativeHangerPosition;\n    } else {\n      newPosition = currentPanel ? currentPanel.getAnchorPosition() - relativeHangerPosition : cameraPosition;\n    }\n\n    if (this.canSetBoundMode()) {\n      newPosition = clamp(newPosition, state.scrollArea.prev, state.scrollArea.next);\n    } // Pause & resume axes to prevent axes's \"change\" event triggered\n    // This should be done before moveCamera, as moveCamera can trigger needPanel\n\n\n    this.updateAxesPosition(newPosition);\n    this.moveCamera(newPosition);\n  };\n\n  __proto.updateBbox = function () {\n    var state = this.state;\n    var options = this.options;\n    var viewportElement = this.viewportElement;\n\n    if (!state.cachedBbox) {\n      state.cachedBbox = getBbox(viewportElement, options.useOffset);\n    }\n\n    return state.cachedBbox;\n  };\n\n  __proto.updatePlugins = function () {\n    var _this = this; // update for resize\n\n\n    this.plugins.forEach(function (plugin) {\n      plugin.update && plugin.update(_this.flicking);\n    });\n  };\n\n  __proto.destroy = function (option) {\n    var state = this.state;\n    var wrapper = this.flicking.getElement();\n    var viewportElement = this.viewportElement;\n    var cameraElement = this.cameraElement;\n    var originalPanels = this.panelManager.originalPanels();\n    this.removePlugins(this.plugins);\n\n    if (!option.preserveUI) {\n      restoreStyle(viewportElement, state.originalViewportStyle);\n      restoreStyle(cameraElement, state.originalCameraStyle);\n\n      if (!state.isCameraGiven && !this.options.renderExternal) {\n        var topmostElement_1 = state.isViewportGiven ? viewportElement : wrapper;\n        var deletingElement = state.isViewportGiven ? cameraElement : viewportElement;\n        originalPanels.forEach(function (panel) {\n          topmostElement_1.appendChild(panel.getElement());\n        });\n        topmostElement_1.removeChild(deletingElement);\n      }\n    }\n\n    this.axes.destroy();\n    this.panInput.destroy();\n    originalPanels.forEach(function (panel) {\n      panel.destroy(option);\n    }); // release resources\n\n    for (var x in this) {\n      this[x] = null;\n    }\n  };\n\n  __proto.restore = function (status) {\n    var panels = status.panels;\n    var defaultIndex = this.options.defaultIndex;\n    var cameraElement = this.cameraElement;\n    var panelManager = this.panelManager; // Restore index\n\n    cameraElement.innerHTML = panels.map(function (panel) {\n      return panel.html;\n    }).join(\"\"); // Create panels first\n\n    this.refreshPanels();\n    var createdPanels = panelManager.originalPanels(); // ...then order it by its index\n\n    var orderedPanels = [];\n    panels.forEach(function (panel, idx) {\n      var createdPanel = createdPanels[idx];\n      createdPanel.setIndex(panel.index);\n      orderedPanels[panel.index] = createdPanel;\n    });\n    panelManager.replacePanels(orderedPanels, []);\n    panelManager.setCloneCount(0); // No clones at this point\n\n    var panelCount = panelManager.getPanelCount();\n\n    if (panelCount > 0) {\n      this.currentPanel = panelManager.get(status.index) || panelManager.get(defaultIndex) || panelManager.firstPanel();\n      this.nearestPanel = this.currentPanel;\n    } else {\n      this.currentPanel = undefined;\n      this.nearestPanel = undefined;\n    }\n\n    this.visiblePanels = orderedPanels.filter(function (panel) {\n      return Boolean(panel);\n    });\n    this.resize();\n    this.axes.setTo({\n      flick: status.position\n    }, 0);\n    this.moveCamera(status.position);\n  };\n\n  __proto.calcVisiblePanels = function () {\n    var allPanels = this.panelManager.allPanels();\n\n    if (this.options.renderOnlyVisible) {\n      var cameraPos_1 = this.getCameraPosition();\n      var viewportSize_1 = this.getSize();\n      var basePanel = this.nearestPanel;\n\n      var getNextPanel = function (panel) {\n        var nextPanel = panel.nextSibling;\n\n        if (nextPanel && nextPanel.getPosition() >= panel.getPosition()) {\n          return nextPanel;\n        } else {\n          return null;\n        }\n      };\n\n      var getPrevPanel = function (panel) {\n        var prevPanel = panel.prevSibling;\n\n        if (prevPanel && prevPanel.getPosition() <= panel.getPosition()) {\n          return prevPanel;\n        } else {\n          return null;\n        }\n      };\n\n      var isOutOfBoundNext = function (panel) {\n        return panel.getPosition() >= cameraPos_1 + viewportSize_1;\n      };\n\n      var isOutOfBoundPrev = function (panel) {\n        return panel.getPosition() + panel.getSize() <= cameraPos_1;\n      };\n\n      var getVisiblePanels = function (panel, getNext, isOutOfViewport) {\n        var visiblePanels = [];\n        var lastPanel = panel;\n\n        while (true) {\n          var nextPanel = getNext(lastPanel);\n\n          if (!nextPanel || isOutOfViewport(nextPanel)) {\n            break;\n          }\n\n          visiblePanels.push(nextPanel);\n          lastPanel = nextPanel;\n        }\n\n        return visiblePanels;\n      };\n\n      var panelCount_1 = this.panelManager.getPanelCount();\n\n      var getAbsIndex_1 = function (panel) {\n        return panel.getIndex() + (panel.getCloneIndex() + 1) * panelCount_1;\n      };\n\n      var nextPanels = getVisiblePanels(basePanel, getNextPanel, isOutOfBoundNext);\n      var prevPanels = getVisiblePanels(basePanel, getPrevPanel, isOutOfBoundPrev);\n      return __spreadArrays([basePanel], nextPanels, prevPanels).sort(function (panel1, panel2) {\n        return getAbsIndex_1(panel1) - getAbsIndex_1(panel2);\n      });\n    } else {\n      return allPanels.filter(function (panel) {\n        var outsetProgress = panel.getOutsetProgress();\n        return outsetProgress > -1 && outsetProgress < 1;\n      });\n    }\n  };\n\n  __proto.getCurrentPanel = function () {\n    return this.currentPanel;\n  };\n\n  __proto.getCurrentIndex = function () {\n    var currentPanel = this.currentPanel;\n    return currentPanel ? currentPanel.getIndex() : -1;\n  };\n\n  __proto.getNearestPanel = function () {\n    return this.nearestPanel;\n  }; // Get progress from nearest panel\n\n\n  __proto.getCurrentProgress = function () {\n    var currentState = this.stateMachine.getState();\n    var nearestPanel = currentState.playing || currentState.holding ? this.nearestPanel : this.currentPanel;\n    var panelManager = this.panelManager;\n\n    if (!nearestPanel) {\n      // There're no panels\n      return NaN;\n    }\n\n    var _a = this.getScrollArea(),\n        prevRange = _a.prev,\n        nextRange = _a.next;\n\n    var cameraPosition = this.getCameraPosition();\n    var isOutOfBound = this.isOutOfBound();\n    var prevPanel = nearestPanel.prevSibling;\n    var nextPanel = nearestPanel.nextSibling;\n    var hangerPosition = this.getHangerPosition();\n    var nearestAnchorPos = nearestPanel.getAnchorPosition();\n\n    if (isOutOfBound && prevPanel && nextPanel && cameraPosition < nextRange // On the basis of anchor, prevPanel is nearestPanel.\n    && hangerPosition - prevPanel.getAnchorPosition() < nearestAnchorPos - hangerPosition) {\n      nearestPanel = prevPanel;\n      nextPanel = nearestPanel.nextSibling;\n      prevPanel = nearestPanel.prevSibling;\n      nearestAnchorPos = nearestPanel.getAnchorPosition();\n    }\n\n    var nearestIndex = nearestPanel.getIndex() + (nearestPanel.getCloneIndex() + 1) * panelManager.getPanelCount();\n    var nearestSize = nearestPanel.getSize();\n\n    if (isOutOfBound) {\n      var relativeHangerPosition = this.getRelativeHangerPosition();\n\n      if (nearestAnchorPos > nextRange + relativeHangerPosition) {\n        // next bounce area: hangerPosition - relativeHangerPosition - nextRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - nextRange;\n      } else if (nearestAnchorPos < prevRange + relativeHangerPosition) {\n        // prev bounce area: hangerPosition - relativeHangerPosition - prevRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - prevRange;\n      }\n    }\n\n    var hangerIsNextToNearestPanel = hangerPosition >= nearestAnchorPos;\n    var gap = this.options.gap;\n    var basePosition = nearestAnchorPos;\n    var targetPosition = nearestAnchorPos;\n\n    if (hangerIsNextToNearestPanel) {\n      targetPosition = nextPanel ? nextPanel.getAnchorPosition() : nearestAnchorPos + nearestSize + gap;\n    } else {\n      basePosition = prevPanel ? prevPanel.getAnchorPosition() : nearestAnchorPos - nearestSize - gap;\n    }\n\n    var progressBetween = (hangerPosition - basePosition) / (targetPosition - basePosition);\n    var startIndex = hangerIsNextToNearestPanel ? nearestIndex : prevPanel ? prevPanel.getIndex() : nearestIndex - 1;\n    return startIndex + progressBetween;\n  }; // Update axes flick position without triggering event\n\n\n  __proto.updateAxesPosition = function (position) {\n    var axes = this.axes;\n    axes.off();\n    axes.setTo({\n      flick: position\n    }, 0);\n    axes.on(this.axesHandlers);\n  };\n\n  __proto.getSize = function () {\n    return this.state.size;\n  };\n\n  __proto.getScrollArea = function () {\n    return this.state.scrollArea;\n  };\n\n  __proto.isOutOfBound = function () {\n    var state = this.state;\n    var options = this.options;\n    var scrollArea = state.scrollArea;\n    return !options.circular && options.bound && (state.position <= scrollArea.prev || state.position >= scrollArea.next);\n  };\n\n  __proto.canSetBoundMode = function () {\n    var options = this.options;\n    return options.bound && !options.circular;\n  };\n\n  __proto.getViewportElement = function () {\n    return this.viewportElement;\n  };\n\n  __proto.getCameraElement = function () {\n    return this.cameraElement;\n  };\n\n  __proto.getScrollAreaSize = function () {\n    var scrollArea = this.state.scrollArea;\n    return scrollArea.next - scrollArea.prev;\n  };\n\n  __proto.getRelativeHangerPosition = function () {\n    return this.state.relativeHangerPosition;\n  };\n\n  __proto.getHangerPosition = function () {\n    return this.state.position + this.state.relativeHangerPosition;\n  };\n\n  __proto.getCameraPosition = function () {\n    return this.state.position;\n  };\n\n  __proto.getPositionOffset = function () {\n    return this.state.positionOffset;\n  };\n\n  __proto.getCheckedIndexes = function () {\n    return this.state.checkedIndexes;\n  };\n\n  __proto.getVisiblePanels = function () {\n    return this.visiblePanels;\n  };\n\n  __proto.setCurrentPanel = function (panel) {\n    this.currentPanel = panel;\n  };\n\n  __proto.setLastIndex = function (index) {\n    var currentPanel = this.currentPanel;\n    var panelManager = this.panelManager;\n    panelManager.setLastIndex(index);\n\n    if (currentPanel && currentPanel.getIndex() > index) {\n      this.currentPanel = panelManager.lastPanel();\n    }\n\n    this.resize();\n  };\n\n  __proto.setVisiblePanels = function (panels) {\n    this.visiblePanels = panels;\n  };\n\n  __proto.connectAxesHandler = function (handlers) {\n    var axes = this.axes;\n    this.axesHandlers = handlers;\n    axes.on(handlers);\n  };\n\n  __proto.addPlugins = function (plugins) {\n    var _this = this;\n\n    var newPlugins = [].concat(plugins);\n    newPlugins.forEach(function (plugin) {\n      plugin.init(_this.flicking);\n    });\n    this.plugins = this.plugins.concat(newPlugins);\n    return this;\n  };\n\n  __proto.removePlugins = function (plugins) {\n    var _this = this;\n\n    var currentPlugins = this.plugins;\n    var removedPlugins = [].concat(plugins);\n    removedPlugins.forEach(function (plugin) {\n      var index = currentPlugins.indexOf(plugin);\n\n      if (index > -1) {\n        currentPlugins.splice(index, 1);\n      }\n\n      plugin.destroy(_this.flicking);\n    });\n    return this;\n  };\n\n  __proto.updateCheckedIndexes = function (changedRange) {\n    var state = this.state;\n    var removed = 0;\n    state.checkedIndexes.concat().forEach(function (indexes, idx) {\n      var min = indexes[0],\n          max = indexes[1]; // Can fill part of indexes in range\n\n      if (changedRange.min <= max && changedRange.max >= min) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx - removed, 1);\n        removed++;\n      }\n    });\n  };\n\n  __proto.appendUncachedPanelElements = function (panels) {\n    var _this = this;\n\n    var options = this.options;\n    var fragment = document.createDocumentFragment();\n\n    if (options.isEqualSize) {\n      var prevVisiblePanels = this.visiblePanels;\n      var equalSizeClasses_1 = options.isEqualSize; // for readability\n\n      var cached_1 = {};\n      this.visiblePanels = [];\n      Object.keys(this.panelBboxes).forEach(function (className) {\n        cached_1[className] = true;\n      });\n      panels.forEach(function (panel) {\n        var overlappedClass = panel.getOverlappedClass(equalSizeClasses_1);\n\n        if (overlappedClass && !cached_1[overlappedClass]) {\n          if (!options.renderExternal) {\n            fragment.appendChild(panel.getElement());\n          }\n\n          _this.visiblePanels.push(panel);\n\n          cached_1[overlappedClass] = true;\n        } else if (!overlappedClass) {\n          if (!options.renderExternal) {\n            fragment.appendChild(panel.getElement());\n          }\n\n          _this.visiblePanels.push(panel);\n        }\n      });\n      prevVisiblePanels.forEach(function (panel) {\n        _this.addVisiblePanel(panel);\n      });\n    } else {\n      if (!options.renderExternal) {\n        panels.forEach(function (panel) {\n          return fragment.appendChild(panel.getElement());\n        });\n      }\n\n      this.visiblePanels = panels.filter(function (panel) {\n        return Boolean(panel);\n      });\n    }\n\n    if (!options.renderExternal) {\n      this.cameraElement.appendChild(fragment);\n    }\n  };\n\n  __proto.updateClonePanels = function () {\n    var panelManager = this.panelManager; // Clone panels in circular mode\n\n    if (this.options.circular && panelManager.getPanelCount() > 0) {\n      this.clonePanels();\n      this.updateClonedPanelPositions();\n    }\n\n    panelManager.chainAllPanels();\n  };\n\n  __proto.getVisibleIndexOf = function (panel) {\n    return findIndex(this.visiblePanels, function (visiblePanel) {\n      return visiblePanel === panel;\n    });\n  };\n\n  __proto.build = function () {\n    this.setElements();\n    this.applyCSSValue();\n    this.setMoveType();\n    this.setAxesInstance();\n    this.refreshPanels();\n    this.setDefaultPanel();\n    this.resize();\n    this.moveToDefaultPanel();\n  };\n\n  __proto.setElements = function () {\n    var state = this.state;\n    var options = this.options;\n    var wrapper = this.flicking.getElement();\n    var classPrefix = options.classPrefix;\n    var viewportCandidate = wrapper.children[0];\n    var hasViewportElement = viewportCandidate && hasClass(viewportCandidate, classPrefix + \"-viewport\");\n    var viewportElement = hasViewportElement ? viewportCandidate : document.createElement(\"div\");\n    var cameraCandidate = hasViewportElement ? viewportElement.children[0] : wrapper.children[0];\n    var hasCameraElement = cameraCandidate && hasClass(cameraCandidate, classPrefix + \"-camera\");\n    var cameraElement = hasCameraElement ? cameraCandidate : document.createElement(\"div\");\n\n    if (!hasCameraElement) {\n      cameraElement.className = classPrefix + \"-camera\";\n      var panelElements = hasViewportElement ? viewportElement.children : wrapper.children; // Make all panels to be a child of camera element\n      // wrapper <- viewport <- camera <- panels[1...n]\n\n      toArray(panelElements).forEach(function (child) {\n        cameraElement.appendChild(child);\n      });\n    } else {\n      state.originalCameraStyle = {\n        className: cameraElement.getAttribute(\"class\"),\n        style: cameraElement.getAttribute(\"style\")\n      };\n    }\n\n    if (!hasViewportElement) {\n      viewportElement.className = classPrefix + \"-viewport\"; // Add viewport element to wrapper\n\n      wrapper.appendChild(viewportElement);\n    } else {\n      state.originalViewportStyle = {\n        className: viewportElement.getAttribute(\"class\"),\n        style: viewportElement.getAttribute(\"style\")\n      };\n    }\n\n    if (!hasCameraElement || !hasViewportElement) {\n      viewportElement.appendChild(cameraElement);\n    }\n\n    this.viewportElement = viewportElement;\n    this.cameraElement = cameraElement;\n    state.isViewportGiven = hasViewportElement;\n    state.isCameraGiven = hasCameraElement;\n  };\n\n  __proto.applyCSSValue = function () {\n    var options = this.options;\n    var viewportElement = this.viewportElement;\n    var cameraElement = this.cameraElement;\n    var viewportStyle = this.viewportElement.style; // Set default css values for each element\n\n    applyCSS(viewportElement, DEFAULT_VIEWPORT_CSS);\n    applyCSS(cameraElement, DEFAULT_CAMERA_CSS);\n    viewportElement.style.zIndex = \"\" + options.zIndex;\n\n    if (options.horizontal) {\n      viewportStyle.minHeight = \"100%\";\n      viewportStyle.width = \"100%\";\n    } else {\n      viewportStyle.minWidth = \"100%\";\n      viewportStyle.height = \"100%\";\n    }\n\n    if (options.overflow) {\n      viewportStyle.overflow = \"visible\";\n    }\n\n    this.panelManager = new PanelManager(this.cameraElement, options);\n  };\n\n  __proto.setMoveType = function () {\n    var moveType = this.options.moveType;\n\n    switch (moveType.type) {\n      case MOVE_TYPE.SNAP:\n        this.moveType = new Snap(moveType.count);\n        break;\n\n      case MOVE_TYPE.FREE_SCROLL:\n        this.moveType = new FreeScroll();\n        break;\n\n      default:\n        throw new Error(\"moveType is not correct!\");\n    }\n  };\n\n  __proto.setAxesInstance = function () {\n    var state = this.state;\n    var options = this.options;\n    var scrollArea = state.scrollArea;\n    var horizontal = options.horizontal;\n    this.axes = new Axes({\n      flick: {\n        range: [scrollArea.prev, scrollArea.next],\n        circular: options.circular,\n        bounce: [0, 0]\n      }\n    }, {\n      easing: options.panelEffect,\n      deceleration: options.deceleration,\n      interruptable: true\n    });\n    this.panInput = new PanInput(this.viewportElement, {\n      inputType: options.inputType,\n      thresholdAngle: options.thresholdAngle,\n      iOSEdgeSwipeThreshold: options.iOSEdgeSwipeThreshold,\n      scale: options.horizontal ? [-1, 0] : [0, -1]\n    });\n    this.axes.connect(horizontal ? [\"flick\", \"\"] : [\"\", \"flick\"], this.panInput);\n  };\n\n  __proto.refreshPanels = function () {\n    var _this = this;\n\n    var panelManager = this.panelManager; // Panel elements were attached to camera element by Flicking class\n\n    var panelElements = this.cameraElement.children; // Initialize panels\n\n    var panels = toArray(panelElements).map(function (el, idx) {\n      return new Panel(el, idx, _this);\n    });\n    panelManager.replacePanels(panels, []);\n    this.visiblePanels = panels.filter(function (panel) {\n      return Boolean(panel);\n    });\n  };\n\n  __proto.setDefaultPanel = function () {\n    var options = this.options;\n    var panelManager = this.panelManager;\n    var indexRange = this.panelManager.getRange();\n    var index = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n    this.currentPanel = panelManager.get(index);\n  };\n\n  __proto.clonePanels = function () {\n    var state = this.state;\n    var options = this.options;\n    var panelManager = this.panelManager;\n    var gap = options.gap;\n    var viewportSize = state.size;\n    var firstPanel = panelManager.firstPanel();\n    var lastPanel = panelManager.lastPanel(); // There're no panels exist\n\n    if (!firstPanel) {\n      return;\n    } // For each panels, clone itself while last panel's position + size is below viewport size\n\n\n    var panels = panelManager.originalPanels();\n    var reversedPanels = panels.concat().reverse();\n    var sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + gap;\n    var relativeAnchorPosition = firstPanel.getRelativeAnchorPosition();\n    var relativeHangerPosition = this.getRelativeHangerPosition();\n    var areaPrev = (relativeHangerPosition - relativeAnchorPosition) % sumOriginalPanelSize;\n    var sizeSum = 0;\n    var panelAtLeftBoundary;\n\n    for (var _i = 0, reversedPanels_1 = reversedPanels; _i < reversedPanels_1.length; _i++) {\n      var panel = reversedPanels_1[_i];\n\n      if (!panel) {\n        continue;\n      }\n\n      sizeSum += panel.getSize() + gap;\n\n      if (sizeSum >= areaPrev) {\n        panelAtLeftBoundary = panel;\n        break;\n      }\n    }\n\n    var areaNext = (viewportSize - relativeHangerPosition + relativeAnchorPosition) % sumOriginalPanelSize;\n    sizeSum = 0;\n    var panelAtRightBoundary;\n\n    for (var _a = 0, panels_1 = panels; _a < panels_1.length; _a++) {\n      var panel = panels_1[_a];\n\n      if (!panel) {\n        continue;\n      }\n\n      sizeSum += panel.getSize() + gap;\n\n      if (sizeSum >= areaNext) {\n        panelAtRightBoundary = panel;\n        break;\n      }\n    } // Need one more set of clones on prev area of original panel 0\n\n\n    var needCloneOnPrev = panelAtLeftBoundary.getIndex() !== 0 && panelAtLeftBoundary.getIndex() <= panelAtRightBoundary.getIndex(); // Visible count of panel 0 on first screen\n\n    var panel0OnFirstscreen = Math.ceil((relativeHangerPosition + firstPanel.getSize() - relativeAnchorPosition) / sumOriginalPanelSize) + Math.ceil((viewportSize - relativeHangerPosition + relativeAnchorPosition) / sumOriginalPanelSize) - 1; // duplication\n\n    var cloneCount = panel0OnFirstscreen + (needCloneOnPrev ? 1 : 0);\n    var prevCloneCount = panelManager.getCloneCount();\n    panelManager.setCloneCount(cloneCount);\n\n    if (options.renderExternal) {\n      return;\n    }\n\n    if (cloneCount > prevCloneCount) {\n      var _loop_1 = function (cloneIndex) {\n        var _a;\n\n        var clones = panels.map(function (origPanel) {\n          return origPanel.clone(cloneIndex);\n        });\n        var fragment = document.createDocumentFragment();\n        clones.forEach(function (panel) {\n          return fragment.appendChild(panel.getElement());\n        });\n        this_1.cameraElement.appendChild(fragment);\n\n        (_a = this_1.visiblePanels).push.apply(_a, clones.filter(function (clone) {\n          return Boolean(clone);\n        }));\n\n        panelManager.insertClones(cloneIndex, 0, clones);\n      };\n\n      var this_1 = this; // should clone more\n\n      for (var cloneIndex = prevCloneCount; cloneIndex < cloneCount; cloneIndex++) {\n        _loop_1(cloneIndex);\n      }\n    } else if (cloneCount < prevCloneCount) {\n      // should remove some\n      panelManager.removeClonesAfter(cloneCount);\n    }\n  };\n\n  __proto.moveToDefaultPanel = function () {\n    var state = this.state;\n    var panelManager = this.panelManager;\n    var options = this.options;\n    var indexRange = this.panelManager.getRange();\n    var defaultIndex = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n    var defaultPanel = panelManager.get(defaultIndex);\n    var defaultPosition = 0;\n\n    if (defaultPanel) {\n      defaultPosition = defaultPanel.getAnchorPosition() - state.relativeHangerPosition;\n      defaultPosition = this.canSetBoundMode() ? clamp(defaultPosition, state.scrollArea.prev, state.scrollArea.next) : defaultPosition;\n    }\n\n    this.moveCamera(defaultPosition);\n    this.axes.setTo({\n      flick: defaultPosition\n    }, 0);\n  };\n\n  __proto.updateSize = function () {\n    var state = this.state;\n    var options = this.options;\n    var panels = this.panelManager.originalPanels().filter(function (panel) {\n      return Boolean(panel);\n    });\n    var bbox = this.updateBbox();\n    var prevSize = state.size; // Update size & hanger position\n\n    state.size = options.horizontal ? bbox.width : bbox.height;\n\n    if (prevSize !== state.size) {\n      state.relativeHangerPosition = parseArithmeticExpression(options.hanger, state.size);\n      state.infiniteThreshold = parseArithmeticExpression(options.infiniteThreshold, state.size);\n    }\n\n    if (panels.length <= 0) {\n      return;\n    }\n\n    this.resizePanels(panels);\n  };\n\n  __proto.updateOriginalPanelPositions = function () {\n    var gap = this.options.gap;\n    var panelManager = this.panelManager;\n    var firstPanel = panelManager.firstPanel();\n    var panels = panelManager.originalPanels();\n\n    if (!firstPanel) {\n      return;\n    }\n\n    var currentPanel = this.currentPanel;\n    var nearestPanel = this.nearestPanel;\n    var currentState = this.stateMachine.getState();\n    var scrollArea = this.state.scrollArea; // Update panel position && fit to wrapper\n\n    var nextPanelPos = firstPanel.getPosition();\n    var maintainingPanel = firstPanel;\n\n    if (nearestPanel) {\n      // We should maintain nearestPanel's position\n      var looped = !isBetween(currentState.lastPosition + currentState.delta, scrollArea.prev, scrollArea.next);\n      maintainingPanel = looped ? currentPanel : nearestPanel;\n    } else if (firstPanel.getIndex() > 0) {\n      maintainingPanel = currentPanel;\n    }\n\n    var panelsBeforeMaintainPanel = panels.slice(0, maintainingPanel.getIndex() + (maintainingPanel.getCloneIndex() + 1) * panels.length);\n    var accumulatedSize = panelsBeforeMaintainPanel.reduce(function (total, panel) {\n      return total + panel.getSize() + gap;\n    }, 0);\n    nextPanelPos = maintainingPanel.getPosition() - accumulatedSize;\n    panels.forEach(function (panel) {\n      var newPosition = nextPanelPos;\n      var panelSize = panel.getSize();\n      panel.setPosition(newPosition);\n      nextPanelPos += panelSize + gap;\n    });\n\n    if (!this.options.renderOnlyVisible) {\n      panels.forEach(function (panel) {\n        return panel.setPositionCSS();\n      });\n    }\n  };\n\n  __proto.updateClonedPanelPositions = function () {\n    var state = this.state;\n    var options = this.options;\n    var panelManager = this.panelManager;\n    var clonedPanels = panelManager.clonedPanels().reduce(function (allClones, clones) {\n      return __spreadArrays(allClones, clones);\n    }, []).filter(function (panel) {\n      return Boolean(panel);\n    });\n    var scrollArea = state.scrollArea;\n    var firstPanel = panelManager.firstPanel();\n    var lastPanel = panelManager.lastPanel();\n\n    if (!firstPanel) {\n      return;\n    }\n\n    var sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap; // Locate all cloned panels linearly first\n\n    for (var _i = 0, clonedPanels_1 = clonedPanels; _i < clonedPanels_1.length; _i++) {\n      var panel = clonedPanels_1[_i];\n      var origPanel = panel.getOriginalPanel();\n      var cloneIndex = panel.getCloneIndex();\n      var cloneBasePos = sumOriginalPanelSize * (cloneIndex + 1);\n      var clonedPanelPos = cloneBasePos + origPanel.getPosition();\n      panel.setPosition(clonedPanelPos);\n    }\n\n    var lastReplacePosition = firstPanel.getPosition(); // reverse() pollutes original array, so copy it with concat()\n\n    for (var _a = 0, _b = clonedPanels.concat().reverse(); _a < _b.length; _a++) {\n      var panel = _b[_a];\n      var panelSize = panel.getSize();\n      var replacePosition = lastReplacePosition - panelSize - options.gap;\n\n      if (replacePosition + panelSize <= scrollArea.prev) {\n        // Replace is not meaningful, as it won't be seen in current scroll area\n        break;\n      }\n\n      panel.setPosition(replacePosition);\n      lastReplacePosition = replacePosition;\n    }\n\n    if (!this.options.renderOnlyVisible) {\n      clonedPanels.forEach(function (panel) {\n        panel.setPositionCSS();\n      });\n    }\n  };\n\n  __proto.updateVisiblePanelPositions = function () {\n    var _this = this;\n\n    if (this.options.renderOnlyVisible) {\n      this.visiblePanels.forEach(function (panel) {\n        panel.setPositionCSS(_this.state.positionOffset);\n      });\n    }\n  };\n\n  __proto.updateScrollArea = function () {\n    var state = this.state;\n    var panelManager = this.panelManager;\n    var options = this.options;\n    var axes = this.axes; // Set viewport scrollable area\n\n    var firstPanel = panelManager.firstPanel();\n    var lastPanel = panelManager.lastPanel();\n    var relativeHangerPosition = state.relativeHangerPosition;\n\n    if (!firstPanel) {\n      state.scrollArea = {\n        prev: 0,\n        next: 0\n      };\n    } else if (this.canSetBoundMode()) {\n      var sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition();\n\n      if (sumOriginalPanelSize >= state.size) {\n        state.scrollArea = {\n          prev: firstPanel.getPosition(),\n          next: lastPanel.getPosition() + lastPanel.getSize() - state.size\n        };\n      } else {\n        // Find anchor position of set of the combined panels\n        var relAnchorPosOfCombined = parseArithmeticExpression(options.anchor, sumOriginalPanelSize);\n        var anchorPos = firstPanel.getPosition() + clamp(relAnchorPosOfCombined, sumOriginalPanelSize - (state.size - relativeHangerPosition), relativeHangerPosition);\n        state.scrollArea = {\n          prev: anchorPos - relativeHangerPosition,\n          next: anchorPos - relativeHangerPosition\n        };\n      }\n    } else if (options.circular) {\n      var sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap; // Maximum scroll extends to first clone sequence's first panel\n\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: sumOriginalPanelSize + firstPanel.getAnchorPosition() - relativeHangerPosition\n      };\n    } else {\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: lastPanel.getAnchorPosition() - relativeHangerPosition\n      };\n    }\n\n    var viewportSize = state.size;\n    var bounce = options.bounce;\n    var parsedBounce;\n\n    if (isArray(bounce)) {\n      parsedBounce = bounce.map(function (val) {\n        return parseArithmeticExpression(val, viewportSize, DEFAULT_OPTIONS.bounce);\n      });\n    } else {\n      var parsedVal = parseArithmeticExpression(bounce, viewportSize, DEFAULT_OPTIONS.bounce);\n      parsedBounce = [parsedVal, parsedVal];\n    } // Update axes range and bounce\n\n\n    var flick = axes.axis.flick;\n    flick.range = [state.scrollArea.prev, state.scrollArea.next];\n    flick.bounce = parsedBounce;\n  };\n\n  __proto.checkNeedPanel = function (axesEvent) {\n    var state = this.state;\n    var options = this.options;\n    var panelManager = this.panelManager;\n    var currentPanel = this.currentPanel;\n    var nearestPanel = this.nearestPanel;\n    var currentState = this.stateMachine.getState();\n\n    if (!options.infinite) {\n      return;\n    }\n\n    var gap = options.gap;\n    var infiniteThreshold = state.infiniteThreshold;\n    var maxLastIndex = panelManager.getLastIndex();\n\n    if (maxLastIndex < 0) {\n      return;\n    }\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      this.triggerNeedPanel({\n        axesEvent: axesEvent,\n        siblingPanel: null,\n        direction: null,\n        indexRange: {\n          min: 0,\n          max: maxLastIndex,\n          length: maxLastIndex + 1\n        }\n      });\n      return;\n    }\n\n    var originalNearestPosition = nearestPanel.getPosition(); // Check next direction\n\n    var checkingPanel = !currentState.holding && !currentState.playing ? currentPanel : nearestPanel;\n\n    while (checkingPanel) {\n      var currentIndex = checkingPanel.getIndex();\n      var nextSibling = checkingPanel.nextSibling;\n      var lastPanel = panelManager.lastPanel();\n      var atLastPanel = currentIndex === lastPanel.getIndex();\n      var nextIndex = !atLastPanel && nextSibling ? nextSibling.getIndex() : maxLastIndex + 1;\n      var currentNearestPosition = nearestPanel.getPosition();\n      var panelRight = checkingPanel.getPosition() + checkingPanel.getSize() - (currentNearestPosition - originalNearestPosition);\n      var cameraNext = state.position + state.size; // There're empty panels between\n\n      var emptyPanelExistsBetween = nextIndex - currentIndex > 1; // Expected prev panel's left position is smaller than camera position\n\n      var overThreshold = panelRight + gap - infiniteThreshold <= cameraNext;\n\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent: axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.NEXT,\n          indexRange: {\n            min: currentIndex + 1,\n            max: nextIndex - 1,\n            length: nextIndex - currentIndex - 1\n          }\n        });\n      } // Trigger needPanel in circular & at max panel index\n\n\n      if (options.circular && currentIndex === maxLastIndex && overThreshold) {\n        var firstPanel = panelManager.firstPanel();\n        var firstIndex = firstPanel ? firstPanel.getIndex() : -1;\n\n        if (firstIndex > 0) {\n          this.triggerNeedPanel({\n            axesEvent: axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.NEXT,\n            indexRange: {\n              min: 0,\n              max: firstIndex - 1,\n              length: firstIndex\n            }\n          });\n        }\n      } // Check whether panels are changed\n\n\n      var lastPanelAfterNeed = panelManager.lastPanel();\n      var atLastPanelAfterNeed = lastPanelAfterNeed && currentIndex === lastPanelAfterNeed.getIndex();\n\n      if (atLastPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.nextSibling;\n    } // Check prev direction\n\n\n    checkingPanel = nearestPanel;\n\n    while (checkingPanel) {\n      var cameraPrev = state.position;\n      var checkingIndex = checkingPanel.getIndex();\n      var prevSibling = checkingPanel.prevSibling;\n      var firstPanel = panelManager.firstPanel();\n      var atFirstPanel = checkingIndex === firstPanel.getIndex();\n      var prevIndex = !atFirstPanel && prevSibling ? prevSibling.getIndex() : -1;\n      var currentNearestPosition = nearestPanel.getPosition();\n      var panelLeft = checkingPanel.getPosition() - (currentNearestPosition - originalNearestPosition); // There're empty panels between\n\n      var emptyPanelExistsBetween = checkingIndex - prevIndex > 1; // Expected prev panel's right position is smaller than camera position\n\n      var overThreshold = panelLeft - gap + infiniteThreshold >= cameraPrev;\n\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent: axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.PREV,\n          indexRange: {\n            min: prevIndex + 1,\n            max: checkingIndex - 1,\n            length: checkingIndex - prevIndex - 1\n          }\n        });\n      } // Trigger needPanel in circular & at panel 0\n\n\n      if (options.circular && checkingIndex === 0 && overThreshold) {\n        var lastPanel = panelManager.lastPanel();\n\n        if (lastPanel && lastPanel.getIndex() < maxLastIndex) {\n          var lastIndex = lastPanel.getIndex();\n          this.triggerNeedPanel({\n            axesEvent: axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.PREV,\n            indexRange: {\n              min: lastIndex + 1,\n              max: maxLastIndex,\n              length: maxLastIndex - lastIndex\n            }\n          });\n        }\n      } // Check whether panels were changed\n\n\n      var firstPanelAfterNeed = panelManager.firstPanel();\n      var atFirstPanelAfterNeed = firstPanelAfterNeed && checkingIndex === firstPanelAfterNeed.getIndex(); // Looped in circular mode\n\n      if (atFirstPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.prevSibling;\n    }\n  };\n\n  __proto.triggerNeedPanel = function (params) {\n    var _this = this;\n\n    var axesEvent = params.axesEvent,\n        siblingPanel = params.siblingPanel,\n        direction = params.direction,\n        indexRange = params.indexRange;\n    var options = this.options;\n    var checkedIndexes = this.state.checkedIndexes;\n    var alreadyTriggered = checkedIndexes.some(function (_a) {\n      var min = _a[0],\n          max = _a[1];\n      return min === indexRange.min || max === indexRange.max;\n    });\n    var hasHandler = this.flicking.hasOn(EVENTS.NEED_PANEL);\n\n    if (alreadyTriggered || !hasHandler) {\n      return;\n    } // Should done before triggering event, as we can directly add panels by event callback\n\n\n    checkedIndexes.push([indexRange.min, indexRange.max]);\n    var index = siblingPanel ? siblingPanel.getIndex() : 0;\n    var isTrusted = axesEvent ? axesEvent.isTrusted : false;\n    this.triggerEvent(EVENTS.NEED_PANEL, axesEvent, isTrusted, {\n      index: index,\n      panel: siblingPanel,\n      direction: direction,\n      range: indexRange,\n      fill: function (element) {\n        var panelManager = _this.panelManager;\n\n        if (!siblingPanel) {\n          return _this.insert(panelManager.getRange().max + 1, element);\n        }\n\n        var parsedElements = parseElement(element); // Slice elements to fit size equal to empty spaces\n\n        var elements = direction === DIRECTION.NEXT ? parsedElements.slice(0, indexRange.length) : parsedElements.slice(-indexRange.length);\n\n        if (direction === DIRECTION.NEXT) {\n          if (options.circular && index === panelManager.getLastIndex()) {\n            // needPanel event is triggered on last index, insert at index 0\n            return _this.insert(0, elements);\n          } else {\n            return siblingPanel.insertAfter(elements);\n          }\n        } else if (direction === DIRECTION.PREV) {\n          if (options.circular && index === 0) {\n            // needPanel event is triggered on first index(0), insert at the last index\n            return _this.insert(indexRange.max - elements.length + 1, elements);\n          } else {\n            return siblingPanel.insertBefore(elements);\n          }\n        } else {\n          // direction is null when there're no panels exist\n          return _this.insert(0, elements);\n        }\n      }\n    });\n  };\n\n  __proto.updateVisiblePanels = function () {\n    var state = this.state;\n    var options = this.options;\n    var panelManager = this.panelManager;\n    var currentState = this.stateMachine.getState();\n    var cameraElement = this.cameraElement;\n    var renderExternal = options.renderExternal,\n        renderOnlyVisible = options.renderOnlyVisible;\n\n    if (!renderOnlyVisible) {\n      return;\n    }\n\n    if (!this.nearestPanel) {\n      this.visiblePanels = [];\n\n      while (cameraElement.firstChild) {\n        cameraElement.removeChild(cameraElement.firstChild);\n      }\n\n      return;\n    }\n\n    var prevVisiblePanels = this.visiblePanels;\n    var newVisiblePanels = this.calcVisiblePanels();\n\n    var _a = this.checkVisiblePanelChange(prevVisiblePanels, newVisiblePanels),\n        addedPanels = _a.addedPanels,\n        removedPanels = _a.removedPanels;\n\n    if (addedPanels.length <= 0 && removedPanels.length <= 0) {\n      // Visible panels not changed\n      return;\n    }\n\n    if (currentState.holding) {\n      newVisiblePanels.push.apply(newVisiblePanels, removedPanels);\n    } else {\n      var firstVisiblePanelPos = newVisiblePanels[0].getPosition();\n      state.positionOffset = firstVisiblePanelPos;\n    }\n\n    newVisiblePanels.forEach(function (panel) {\n      panel.setPositionCSS(state.positionOffset);\n    });\n\n    if (!renderExternal) {\n      if (!currentState.holding) {\n        removedPanels.forEach(function (panel) {\n          var panelElement = panel.getElement();\n          panelElement.parentNode && cameraElement.removeChild(panelElement);\n        });\n      }\n\n      var fragment_1 = document.createDocumentFragment();\n      addedPanels.forEach(function (panel) {\n        fragment_1.appendChild(panel.getElement());\n      });\n      cameraElement.appendChild(fragment_1);\n    }\n\n    var firstVisiblePanel = newVisiblePanels[0];\n    var lastVisiblePanel = newVisiblePanels[newVisiblePanels.length - 1];\n\n    var getAbsIndex = function (panel) {\n      return panel.getIndex() + (panel.getCloneIndex() + 1) * panelManager.getPanelCount();\n    };\n\n    var newVisibleRange = {\n      min: getAbsIndex(firstVisiblePanel),\n      max: getAbsIndex(lastVisiblePanel)\n    };\n    this.visiblePanels = newVisiblePanels;\n    this.flicking.trigger(EVENTS.VISIBLE_CHANGE, {\n      type: EVENTS.VISIBLE_CHANGE,\n      range: newVisibleRange\n    });\n  };\n\n  __proto.checkVisiblePanelChange = function (prevVisiblePanels, newVisiblePanels) {\n    var prevRefCount = prevVisiblePanels.map(function () {\n      return 0;\n    });\n    var newRefCount = newVisiblePanels.map(function () {\n      return 0;\n    });\n    prevVisiblePanels.forEach(function (prevPanel, prevIndex) {\n      newVisiblePanels.forEach(function (newPanel, newIndex) {\n        if (prevPanel === newPanel) {\n          prevRefCount[prevIndex]++;\n          newRefCount[newIndex]++;\n        }\n      });\n    });\n    var removedPanels = prevRefCount.reduce(function (removed, count, index) {\n      return count === 0 ? __spreadArrays(removed, [prevVisiblePanels[index]]) : removed;\n    }, []);\n    var addedPanels = newRefCount.reduce(function (added, count, index) {\n      return count === 0 ? __spreadArrays(added, [newVisiblePanels[index]]) : added;\n    }, []);\n    return {\n      removedPanels: removedPanels,\n      addedPanels: addedPanels\n    };\n  };\n\n  __proto.resizePanels = function (panels) {\n    var options = this.options;\n    var panelBboxes = this.panelBboxes;\n\n    if (options.isEqualSize === true) {\n      if (!panelBboxes.default) {\n        var defaultPanel = panels[0];\n        panelBboxes.default = defaultPanel.getBbox();\n      }\n\n      var defaultBbox_1 = panelBboxes.default;\n      panels.forEach(function (panel) {\n        panel.resize(defaultBbox_1);\n      });\n      return;\n    } else if (options.isEqualSize) {\n      var equalSizeClasses_2 = options.isEqualSize;\n      panels.forEach(function (panel) {\n        var overlappedClass = panel.getOverlappedClass(equalSizeClasses_2);\n\n        if (overlappedClass) {\n          panel.resize(panelBboxes[overlappedClass]);\n          panelBboxes[overlappedClass] = panel.getBbox();\n        } else {\n          panel.resize();\n        }\n      });\n      return;\n    }\n\n    panels.forEach(function (panel) {\n      panel.resize();\n    });\n  };\n\n  return Viewport;\n}();\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n/**\n * @memberof eg\n * @extends eg.Component\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\" , \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|eg.Component}\n * @requires {@link https://github.com/naver/egjs-axes|eg.Axes}\n * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n */\n\n\nvar Flicking = /*#__PURE__*/function (_super) {\n  __extends(Flicking, _super);\n  /**\n   * @param element A base element for the eg.Flicking module. When specifying a value as a `string` type, you must specify a css selector string to select the element.<ko>eg.Flicking 모듈을 사용할 기준 요소. `string`타입으로 값 지정시 요소를 선택하기 위한 css 선택자 문자열을 지정해야 한다.</ko>\n   * @param options An option object of the eg.Flicking module<ko>eg.Flicking 모듈의 옵션 객체</ko>\n   * @param {string} [options.classPrefix=\"eg-flick\"] A prefix of class names will be added for the panels, viewport, and camera.<ko>패널들과 뷰포트, 카메라에 추가될 클래스 이름의 접두사.</ko>\n   * @param {number} [options.deceleration=0.0075] Deceleration value for panel movement animation for animation triggered by manual user input. A higher value means a shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n   * @param {boolean} [options.horizontal=true] The direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param {boolean} [options.circular=false] Enables circular mode, which connects first/last panel for continuous scrolling.<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능하다.</ko>\n   * @param {boolean} [options.infinite=false] Enables infinite mode, which can automatically trigger needPanel until reaching the last panel's index reaches the lastIndex.<ko>무한 모드를 활성화한다. 무한 모드에서는 needPanel 이벤트를 자동으로 트리거한다. 해당 동작은 마지막 패널의 인덱스가 lastIndex와 일치할때까지 일어난다.</ko>\n   * @param {number} [options.infiniteThreshold=0] A Threshold from viewport edge before triggering `needPanel` event in infinite mode.<ko>무한 모드에서 `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리.</ko>\n   * @param {number} [options.lastIndex=Infinity] Maximum panel index that Flicking can set. Flicking won't trigger `needPanel` when the event's panel index is greater than it.<br/>Also, if the last panel's index reached a given index, you can't add more panels.<ko>Flicking이 설정 가능한 패널의 최대 인덱스. `needPanel` 이벤트에 지정된 인덱스가 최대 패널의 개수보다 같거나 커야 하는 경우에 이벤트를 트리거하지 않게 한다.<br>또한, 마지막 패널의 인덱스가 주어진 인덱스와 동일할 경우, 새로운 패널을 더 이상 추가할 수 없다.</ko>\n   * @param {number} [options.threshold=40] Movement threshold to change panel(unit: pixel). It should be dragged above the threshold to change the current panel.<ko>패널 변경을 위한 이동 임계값 (단위: 픽셀). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.</ko>\n   * @param {number} [options.duration=100] Duration of the panel movement animation. (unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @param {function} [options.panelEffect=x => 1 - Math.pow(1 - x, 3)] An easing function applied to the panel movement animation. Default value is `easeOutCubic`.<ko>패널 이동 애니메이션에 적용할 easing함수. 기본값은 `easeOutCubic`이다.</ko>\n   * @param {number} [options.defaultIndex=0] Index of the panel to set as default when initializing. A zero-based integer.<ko>초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n   * @param {string[]} [options.inputType=[\"touch,\"mouse\"]] Types of input devices to enable.({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Reference})<ko>활성화할 입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 참고})</ko>\n   * @param {number} [options.thresholdAngle=45] The threshold angle value(0 ~ 90).<br>If the input angle from click/touched position is above or below this value in horizontal and vertical mode each, scrolling won't happen.<ko>스크롤 동작을 막기 위한 임계각(0 ~ 90).<br>클릭/터치한 지점으로부터 계산된 사용자 입력의 각도가 horizontal/vertical 모드에서 각각 크거나 작으면, 스크롤 동작이 이루어지지 않는다.</ko>\n   * @param {number|string|number[]|string[]} [options.bounce=[10,10]] The size value of the bounce area. Only can be enabled when `circular=false`.<br>You can set different bounce value for prev/next direction by using array.<br>`number` for px value, and `string` for px, and % value relative to viewport size.(ex - 0, \"10px\", \"20%\")<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.<br>배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정 가능하다.<br>`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있다.(ex - 0, \"10px\", \"20%\")</ko>\n   * @param {boolean} [options.autoResize=false] Whether the `resize` method should be called automatically after a window resize event.<ko>window의 `resize` 이벤트 이후 자동으로 resize()메소드를 호출할지의 여부.</ko>\n   * @param {boolean} [options.adaptive=false] Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n   * @param {number|\"\"} [options.zIndex=2000] z-index value for viewport element.<ko>뷰포트 엘리먼트의 z-index 값.</ko>\n   * @param {boolean} [options.bound=false] Prevent the view from going out of the first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {boolean} [options.overflow=false] Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n   * @param {string} [options.hanger=\"50%\"] The reference position of the hanger in the viewport, which hangs panel anchors should be stopped at.<br>It should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign.<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {string} [options.anchor=\"50%\"] The reference position of the anchor in panels, which can be hanged by viewport hanger.<br>It should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign.<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {number} [options.gap=0] Space value between panels. Should be given in number.(px)<ko>패널간에 부여할 간격의 크기를 나타내는 숫자.(px)</ko>\n   * @param {eg.Flicking.MoveTypeOption} [options.moveType=\"snap\"] Movement style by user input. (ex: snap, freeScroll)<ko>사용자 입력에 의한 이동 방식.(ex: snap, freeScroll)</ko>\n   * @param {boolean} [options.useOffset=false] Whether to use `offsetWidth`/`offsetHeight` instead of `getBoundingClientRect` for panel/viewport size calculation.<br/>You can use this option to calculate the original panel size when CSS transform is applied to viewport or panel.<br/>⚠️ If panel size is not fixed integer value, there can be a 1px gap between panels.<ko>패널과 뷰포트의 크기를 계산할 때 `offsetWidth`/`offsetHeight`를 `getBoundingClientRect` 대신 사용할지 여부.<br/>패널이나 뷰포트에 CSS transform이 설정되어 있을 때 원래 패널 크기를 계산하려면 옵션을 활성화한다.<br/>⚠️ 패널의 크기가 정수로 고정되어있지 않다면 패널 사이에 1px의 공간이 생길 수 있다.</ko>\n   * @param {boolean} [options.renderOnlyVisible] Whether to render visible panels only. This can dramatically increase performance when there're many panels.<ko>보이는 패널만 렌더링할지 여부를 설정한다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있다.</ko>\n   * @param {boolean|string[]} [options.isEqualSize] This option indicates whether all panels have the same size(true) of first panel, or it can hold a list of class names that determines panel size.<br/>Enabling this option can increase performance while recalculating panel size.<ko>모든 패널의 크기가 동일한지(true), 혹은 패널 크기를 결정하는 패널 클래스들의 리스트.<br/>이 옵션을 설정하면 패널 크기 재설정시에 성능을 높일 수 있다.</ko>\n   * @param {boolean} [options.isConstantSize] Whether all panels have a constant size that won't be changed after resize. Enabling this option can increase performance while recalculating panel size.<ko>모든 패널의 크기가 불변인지의 여부. 이 옵션을 'true'로 설정하면 패널 크기 재설정시에 성능을 높일 수 있다.</ko>\n   * @param {boolean} [options.renderExternal] Whether to use external rendering. It will delegate DOM manipulation and can synchronize the rendered state by calling `sync()` method. You can use this option to use in frameworks like React, Vue, Angular, which has its states and rendering methods.<ko>외부 렌더링을 사용할 지의 여부. 이 옵션을 사용시 렌더링을 외부에 위임할 수 있고, `sync()`를 호출하여 그 상태를 동기화할 수 있다. 이 옵션을 사용하여, React, Vue, Angular 등 자체적인 상태와 렌더링 방법을 갖는 프레임워크에 대응할 수 있다.</ko>\n   * @param {boolean} [options.collectStatistics=true] Whether to collect statistics on how you are using `Flicking`. These statistical data do not contain any personal information and are used only as a basis for the development of a user-friendly product.<ko>어떻게 `Flicking`을 사용하고 있는지에 대한 통계 수집 여부를 나타낸다. 이 통계자료는 개인정보를 포함하고 있지 않으며 오직 사용자 친화적인 제품으로 발전시키기 위한 근거자료로서 활용한다.</ko>\n   */\n\n\n  function Flicking(element, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.isPanelChangedAtBeforeSync = false;\n    /**\n     * Update panels to current state.\n     * @ko 패널들을 현재 상태에 맞춰 갱신한다.\n     * @method\n     * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n     */\n\n    _this.resize = function () {\n      var viewport = _this.viewport;\n      var options = _this.options;\n\n      var wrapper = _this.getElement();\n\n      var allPanels = viewport.panelManager.allPanels();\n\n      if (!options.isConstantSize) {\n        allPanels.forEach(function (panel) {\n          return panel.unCacheBbox();\n        });\n      }\n\n      var shouldResetElements = options.renderOnlyVisible && !options.isConstantSize && options.isEqualSize !== true; // Temporarily set parent's height to prevent scroll (#333)\n\n      var parent = wrapper.parentElement;\n      var origStyle = parent.style.height;\n      parent.style.height = parent.offsetHeight + \"px\";\n      viewport.unCacheBbox(); // This should be done before adding panels, to lower performance issue\n\n      viewport.updateBbox();\n\n      if (shouldResetElements) {\n        viewport.appendUncachedPanelElements(allPanels);\n      }\n\n      viewport.resize();\n      parent.style.height = origStyle;\n      return _this;\n    };\n\n    _this.triggerEvent = function (eventName, // visibleChange event has no common event definition from other events\n    axesEvent, isTrusted, params) {\n      if (params === void 0) {\n        params = {};\n      }\n\n      var viewport = _this.viewport;\n      var canceled = true; // Ignore events before viewport is initialized\n\n      if (viewport) {\n        var state = viewport.stateMachine.getState();\n\n        var _a = viewport.getScrollArea(),\n            prev = _a.prev,\n            next = _a.next;\n\n        var pos = viewport.getCameraPosition();\n        var progress = getProgress(pos, [prev, prev, next]);\n\n        if (_this.options.circular) {\n          progress %= 1;\n        }\n\n        canceled = !_super.prototype.trigger.call(_this, eventName, merge({\n          type: eventName,\n          index: _this.getIndex(),\n          panel: _this.getCurrentPanel(),\n          direction: state.direction,\n          holding: state.holding,\n          progress: progress,\n          axesEvent: axesEvent,\n          isTrusted: isTrusted\n        }, params));\n      }\n\n      return {\n        onSuccess: function (callback) {\n          if (!canceled) {\n            callback();\n          }\n\n          return this;\n        },\n        onStopped: function (callback) {\n          if (canceled) {\n            callback();\n          }\n\n          return this;\n        }\n      };\n    }; // Return result of \"move\" event triggered\n\n\n    _this.moveCamera = function (axesEvent) {\n      var viewport = _this.viewport;\n      var state = viewport.stateMachine.getState();\n      var options = _this.options;\n      var pos = axesEvent.pos.flick;\n      var previousPosition = viewport.getCameraPosition();\n\n      if (axesEvent.isTrusted && state.holding) {\n        var inputOffset = options.horizontal ? axesEvent.inputEvent.offsetX : axesEvent.inputEvent.offsetY;\n        var isNextDirection = inputOffset < 0;\n        var cameraChange = pos - previousPosition;\n        var looped = isNextDirection === pos < previousPosition;\n\n        if (options.circular && looped) {\n          // Reached at max/min range of axes\n          var scrollAreaSize = viewport.getScrollAreaSize();\n          cameraChange = (cameraChange > 0 ? -1 : 1) * (scrollAreaSize - Math.abs(cameraChange));\n        }\n\n        var currentDirection = cameraChange === 0 ? state.direction : cameraChange > 0 ? DIRECTION.NEXT : DIRECTION.PREV;\n        state.direction = currentDirection;\n      }\n\n      state.delta += axesEvent.delta.flick;\n      viewport.moveCamera(pos, axesEvent);\n      return _this.triggerEvent(EVENTS.MOVE, axesEvent, axesEvent.isTrusted).onStopped(function () {\n        // Undo camera movement\n        viewport.moveCamera(previousPosition, axesEvent);\n      });\n    }; // Set flicking wrapper user provided\n\n\n    var wrapper;\n\n    if (isString(element)) {\n      wrapper = document.querySelector(element);\n\n      if (!wrapper) {\n        throw new Error(\"Base element doesn't exist.\");\n      }\n    } else if (element.nodeName && element.nodeType === 1) {\n      wrapper = element;\n    } else {\n      throw new Error(\"Element should be provided in string or HTMLElement.\");\n    }\n\n    _this.wrapper = wrapper; // Override default options\n\n    _this.options = merge({}, DEFAULT_OPTIONS, options); // Override moveType option\n\n    var currentOptions = _this.options;\n    var moveType = currentOptions.moveType;\n\n    if (moveType in DEFAULT_MOVE_TYPE_OPTIONS) {\n      currentOptions.moveType = DEFAULT_MOVE_TYPE_OPTIONS[moveType];\n    } // Make viewport instance with panel container element\n\n\n    _this.viewport = new Viewport(_this, _this.options, _this.triggerEvent);\n\n    _this.listenInput();\n\n    _this.listenResize();\n\n    return _this; // if (this.options.collectStatistics) {\n    //   sendEvent(\n    //     \"usage\",\n    //     \"options\",\n    //     options,\n    //   );\n    // }\n  }\n  /**\n   * Move to the previous panel if it exists.\n   * @ko 이전 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n\n\n  var __proto = Flicking.prototype;\n\n  __proto.prev = function (duration) {\n    var currentPanel = this.getCurrentPanel();\n    var currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      var prevPanel = currentPanel.prev();\n\n      if (prevPanel) {\n        prevPanel.focus(duration);\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Move to the next panel if it exists.\n   * @ko 다음 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation(unit: ms).<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n\n\n  __proto.next = function (duration) {\n    var currentPanel = this.getCurrentPanel();\n    var currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      var nextPanel = currentPanel.next();\n\n      if (nextPanel) {\n        nextPanel.focus(duration);\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Move to the panel of given index.\n   * @ko 주어진 인덱스에 해당하는 패널로 이동한다.\n   * @param index The index number of the panel to move.<ko>이동할 패널의 인덱스 번호.</ko>\n   * @param duration [duration=options.duration] Duration of the panel movement.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n\n\n  __proto.moveTo = function (index, duration) {\n    var viewport = this.viewport;\n    var panel = viewport.panelManager.get(index);\n    var state = viewport.stateMachine.getState();\n\n    if (!panel || state.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    var anchorPosition = panel.getAnchorPosition();\n    var hangerPosition = viewport.getHangerPosition();\n    var targetPanel = panel;\n\n    if (this.options.circular) {\n      var scrollAreaSize = viewport.getScrollAreaSize(); // Check all three possible locations, find the nearest position among them.\n\n      var possiblePositions = [anchorPosition - scrollAreaSize, anchorPosition, anchorPosition + scrollAreaSize];\n      var nearestPosition = possiblePositions.reduce(function (nearest, current) {\n        return Math.abs(current - hangerPosition) < Math.abs(nearest - hangerPosition) ? current : nearest;\n      }, Infinity) - panel.getRelativeAnchorPosition();\n      var identicals = panel.getIdenticalPanels();\n      var offset = nearestPosition - anchorPosition;\n\n      if (offset > 0) {\n        // First cloned panel is nearest\n        targetPanel = identicals[1];\n      } else if (offset < 0) {\n        // Last cloned panel is nearest\n        targetPanel = identicals[identicals.length - 1];\n      }\n\n      targetPanel = targetPanel.clone(targetPanel.getCloneIndex(), true);\n      targetPanel.setPosition(nearestPosition);\n    }\n\n    var currentIndex = this.getIndex();\n\n    if (hangerPosition === targetPanel.getAnchorPosition() && currentIndex === index) {\n      return this;\n    }\n\n    var eventType = panel.getIndex() === viewport.getCurrentIndex() ? \"\" : EVENTS.CHANGE;\n    viewport.moveTo(targetPanel, viewport.findEstimatedPosition(targetPanel), eventType, null, duration);\n    return this;\n  };\n  /**\n   * Return index of the current panel. `-1` if no panel exists.\n   * @ko 현재 패널의 인덱스 번호를 반환한다. 패널이 하나도 없을 경우 `-1`을 반환한다.\n   * @return Current panel's index, zero-based integer.<ko>현재 패널의 인덱스 번호. 0부터 시작하는 정수.</ko>\n   */\n\n\n  __proto.getIndex = function () {\n    return this.viewport.getCurrentIndex();\n  };\n  /**\n   * Return the wrapper element user provided in constructor.\n   * @ko 사용자가 생성자에서 제공한 래퍼 엘리먼트를 반환한다.\n   * @return Wrapper element user provided.<ko>사용자가 제공한 래퍼 엘리먼트.</ko>\n   */\n\n\n  __proto.getElement = function () {\n    return this.wrapper;\n  };\n  /**\n   * Return current panel. `null` if no panel exists.\n   * @ko 현재 패널을 반환한다. 패널이 하나도 없을 경우 `null`을 반환한다.\n   * @return Current panel.<ko>현재 패널.</ko>\n   */\n\n\n  __proto.getCurrentPanel = function () {\n    var viewport = this.viewport;\n    var panel = viewport.getCurrentPanel();\n    return panel ? panel : null;\n  };\n  /**\n   * Return the panel of given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 패널을 반환한다. 해당 패널이 존재하지 않을 시 `null`이다.\n   * @return Panel of given index.<ko>주어진 인덱스에 해당하는 패널.</ko>\n   */\n\n\n  __proto.getPanel = function (index) {\n    var viewport = this.viewport;\n    var panel = viewport.panelManager.get(index);\n    return panel ? panel : null;\n  };\n  /**\n   * Return all panels.\n   * @ko 모든 패널들을 반환한다.\n   * @param - Should include cloned panels or not.<ko>복사된 패널들을 포함할지의 여부.</ko>\n   * @return All panels.<ko>모든 패널들.</ko>\n   */\n\n\n  __proto.getAllPanels = function (includeClone) {\n    var viewport = this.viewport;\n    var panelManager = viewport.panelManager;\n    var panels = includeClone ? panelManager.allPanels() : panelManager.originalPanels();\n    return panels.filter(function (panel) {\n      return !!panel;\n    });\n  };\n  /**\n   * Return the panels currently shown in viewport area.\n   * @ko 현재 뷰포트 영역에서 보여지고 있는 패널들을 반환한다.\n   * @return Panels currently shown in viewport area.<ko>현재 뷰포트 영역에 보여지는 패널들</ko>\n   */\n\n\n  __proto.getVisiblePanels = function () {\n    return this.viewport.calcVisiblePanels();\n  };\n  /**\n   * Return length of original panels.\n   * @ko 원본 패널의 개수를 반환한다.\n   * @return Length of original panels.<ko>원본 패널의 개수</ko>\n   */\n\n\n  __proto.getPanelCount = function () {\n    return this.viewport.panelManager.getPanelCount();\n  };\n  /**\n   * Return how many groups of clones are created.\n   * @ko 몇 개의 클론 그룹이 생성되었는지를 반환한다.\n   * @return Length of cloned panel groups.<ko>클론된 패널 그룹의 개수</ko>\n   */\n\n\n  __proto.getCloneCount = function () {\n    return this.viewport.panelManager.getCloneCount();\n  };\n  /**\n   * Get maximum panel index for `infinite` mode.\n   * @ko `infinite` 모드에서 적용되는 추가 가능한 패널의 최대 인덱스 값을 반환한다.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return Maximum index of panel that can be added.<ko>최대 추가 가능한 패널의 인덱스.</ko>\n   */\n\n\n  __proto.getLastIndex = function () {\n    return this.viewport.panelManager.getLastIndex();\n  };\n  /**\n   * Set maximum panel index for `infinite' mode.<br>[needPanel]{@link eg.Flicking#events:needPanel} won't be triggered anymore when last panel's index reaches it.<br>Also, you can't add more panels after it.\n   * @ko `infinite` 모드에서 적용되는 패널의 최대 인덱스를 설정한다.<br>마지막 패널의 인덱스가 설정한 값에 도달할 경우 더 이상 [needPanel]{@link eg.Flicking#events:needPanel} 이벤트가 발생되지 않는다.<br>또한, 설정한 인덱스 이후로 새로운 패널을 추가할 수 없다.\n   * @param - Maximum panel index.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n\n\n  __proto.setLastIndex = function (index) {\n    this.viewport.setLastIndex(index);\n    return this;\n  };\n  /**\n   * Return panel movement animation.\n   * @ko 현재 패널 이동 애니메이션이 진행 중인지를 반환한다.\n   * @return Is animating or not.<ko>애니메이션 진행 여부.</ko>\n   */\n\n\n  __proto.isPlaying = function () {\n    return this.viewport.stateMachine.getState().playing;\n  };\n  /**\n   * Unblock input devices.\n   * @ko 막았던 입력 장치로부터의 입력을 푼다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n\n\n  __proto.enableInput = function () {\n    this.viewport.enable();\n    return this;\n  };\n  /**\n   * Block input devices.\n   * @ko 입력 장치로부터의 입력을 막는다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n\n\n  __proto.disableInput = function () {\n    this.viewport.disable();\n    return this;\n  };\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to [setStatus()]{@link eg.Flicking#setStatus}.\n   * @ko 현재 상태 값을 반환한다. 반환받은 값을 [setStatus()]{@link eg.Flicking#setStatus} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있다.\n   * @return An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n\n\n  __proto.getStatus = function () {\n    var viewport = this.viewport;\n    var panels = viewport.panelManager.originalPanels().filter(function (panel) {\n      return !!panel;\n    }).map(function (panel) {\n      return {\n        html: panel.getElement().outerHTML,\n        index: panel.getIndex()\n      };\n    });\n    return {\n      index: viewport.getCurrentIndex(),\n      panels: panels,\n      position: viewport.getCameraPosition()\n    };\n  };\n  /**\n   * Restore to the state of the `status`.\n   * @ko `status`의 상태로 복원한다.\n   * @param status Status value to be restored. You can specify the return value of the [getStatus()]{@link eg.Flicking#getStatus} method.<ko>복원할 상태 값. [getStatus()]{@link eg.Flicking#getStatus}메서드의 반환값을 지정하면 된다.</ko>\n   */\n\n\n  __proto.setStatus = function (status) {\n    this.viewport.restore(status);\n  };\n  /**\n   * Add plugins that can have different effects on Flicking.\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가한다.\n   * @param - The plugin(s) to add.<ko>추가할 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n\n\n  __proto.addPlugins = function (plugins) {\n    this.viewport.addPlugins(plugins);\n    return this;\n  };\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거한다.\n   * @param - The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n\n\n  __proto.removePlugins = function (plugins) {\n    this.viewport.removePlugins(plugins);\n    return this;\n  };\n  /**\n   * Return the reference element and all its children to the state they were in before the instance was created. Remove all attached event handlers. Specify `null` for all attributes of the instance (including inherited attributes).\n   * @ko 기준 요소와 그 하위 패널들을 인스턴스 생성전의 상태로 되돌린다. 부착된 모든 이벤트 핸들러를 탈거한다. 인스턴스의 모든 속성(상속받은 속성포함)에 `null`을 지정한다.\n   * @example\n   * const flick = new eg.Flicking(\"#flick\");\n   * flick.destroy();\n   * console.log(flick.moveTo); // null\n   */\n\n\n  __proto.destroy = function (option) {\n    if (option === void 0) {\n      option = {};\n    }\n\n    this.off();\n\n    if (this.options.autoResize) {\n      window.removeEventListener(\"resize\", this.resize);\n    }\n\n    this.viewport.destroy(option); // release resources\n\n    for (var x in this) {\n      this[x] = null;\n    }\n  };\n  /**\n   * Add new panels at the beginning of panels.\n   * @ko 제일 앞에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.replace(3, document.createElement(\"div\")); // Add new panel at index 3\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 2\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Prepended at index 0, 1\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 0, pushing every panels behind it.\n   */\n\n\n  __proto.prepend = function (element) {\n    var viewport = this.viewport;\n    var parsedElements = parseElement(element);\n    var insertingIndex = Math.max(viewport.panelManager.getRange().min - parsedElements.length, 0);\n    return viewport.insert(insertingIndex, parsedElements);\n  };\n  /**\n   * Add new panels at the end of panels.\n   * @ko 제일 끝에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.append(document.createElement(\"div\")); // Appended at index 0\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\"); // Appended at index 1\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Appended at index 2, 3\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\"); // Appended at index 4, 5\n   */\n\n\n  __proto.append = function (element) {\n    var viewport = this.viewport;\n    return viewport.insert(viewport.panelManager.getRange().max + 1, element);\n  };\n  /**\n   * Replace existing panels with new panels from given index. If target index is empty, add new panel at target index.\n   * @ko 주어진 인덱스로부터의 패널들을 새로운 패널들로 교체한다. 인덱스에 해당하는 자리가 비어있다면, 새로운 패널을 해당 자리에 집어넣는다.\n   * @param index - Start index to replace new panels.<ko>새로운 패널들로 교체할 시작 인덱스</ko>\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of created panels by replace.<ko>교체되어 새롭게 추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   *\n   * // This will add new panel at index 3,\n   * // Index 0, 1, 2 is empty at this moment.\n   * // [empty, empty, empty, PANEL]\n   * flicking.replace(3, document.createElement(\"div\"));\n   *\n   * // As index 2 was empty, this will also add new panel at index 2.\n   * // [empty, empty, PANEL, PANEL]\n   * flicking.replace(2, \"\\<div\\>Panel\\</div\\>\");\n   *\n   * // Index 3 was not empty, so it will replace previous one.\n   * // It will also add new panels at index 4 and 5.\n   * // before - [empty, empty, PANEL, PANEL]\n   * // after - [empty, empty, PANEL, NEW_PANEL, NEW_PANEL, NEW_PANEL]\n   * flicking.replace(3, [\"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\"])\n   */\n\n\n  __proto.replace = function (index, element) {\n    return this.viewport.replace(index, element);\n  };\n  /**\n   * Remove panel at target index. This will decrease index of panels behind it.\n   * @ko `index`에 해당하는 자리의 패널을 제거한다. 수행시 `index` 이후의 패널들의 인덱스가 감소된다.\n   * @param index - Index of panel to remove.<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] - Number of panels to remove from index.<ko>`index` 이후로 제거할 패널의 개수.</ko>\n   * @return Array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n\n\n  __proto.remove = function (index, deleteCount) {\n    if (deleteCount === void 0) {\n      deleteCount = 1;\n    }\n\n    return this.viewport.remove(index, deleteCount);\n  };\n  /**\n   * Get indexes to render. Should be used with `renderOnlyVisible` option.\n   * @private\n   * @ko 렌더링이 필요한 인덱스들을 반환한다. `renderOnlyVisible` 옵션과 함께 사용해야 한다.\n   * @param - Info object of how panel infos are changed.<ko>패널 정보들의 변경 정보를 담는 오브젝트.</ko>\n   * @return Array of indexes to render.<ko>렌더링할 인덱스의 배열</ko>\n   */\n\n\n  __proto.getRenderingIndexes = function (diffResult) {\n    var viewport = this.viewport;\n    var isCircular = this.options.circular;\n    var visiblePanels = viewport.getVisiblePanels();\n    var maintained = diffResult.maintained.reduce(function (values, _a) {\n      var before = _a[0],\n          after = _a[1];\n      values[before] = after;\n      return values;\n    }, {});\n    var prevPanelCount = diffResult.prevList.length;\n    var panelCount = diffResult.list.length;\n    var added = diffResult.added;\n\n    var getPanelAbsIndex = function (panel) {\n      return panel.getIndex() + (panel.getCloneIndex() + 1) * prevPanelCount;\n    };\n\n    var visibleIndexes = visiblePanels.map(function (panel) {\n      return getPanelAbsIndex(panel);\n    });\n    visibleIndexes = visibleIndexes.filter(function (val) {\n      return maintained[val % prevPanelCount] != null;\n    }).map(function (val) {\n      var cloneIndex = Math.floor(val / prevPanelCount);\n      var changedIndex = maintained[val % prevPanelCount];\n      return isCircular ? changedIndex + panelCount * cloneIndex : changedIndex;\n    });\n\n    var renderingPanels = __spreadArrays(visibleIndexes, added);\n\n    var allPanels = viewport.panelManager.allPanels();\n    viewport.setVisiblePanels(renderingPanels.map(function (index) {\n      return allPanels[index];\n    }));\n    return renderingPanels;\n  };\n  /**\n   * Synchronize info of panels instance with info given by external rendering.\n   * @ko 외부 렌더링 방식에 의해 입력받은 패널의 정보와 현재 플리킹이 갖는 패널 정보를 동기화한다.\n   * @private\n   * @param - Info object of how panel infos are changed.<ko>패널 정보들의 변경 정보를 담는 오브젝트.</ko>\n   * @param - Whether called from sync method <ko> sync 메소드로부터 호출됐는지 여부 </ko>\n   */\n\n\n  __proto.beforeSync = function (diffInfo) {\n    var _this = this;\n\n    var maintained = diffInfo.maintained,\n        added = diffInfo.added,\n        changed = diffInfo.changed,\n        removed = diffInfo.removed;\n    var viewport = this.viewport;\n    var panelManager = viewport.panelManager;\n    var isCircular = this.options.circular;\n    var cloneCount = panelManager.getCloneCount();\n    var prevClonedPanels = panelManager.clonedPanels(); // Update visible panels\n\n    var newVisiblePanels = viewport.getVisiblePanels().filter(function (panel) {\n      return findIndex(removed, function (index) {\n        return index === panel.getIndex();\n      }) < 0;\n    });\n    viewport.setVisiblePanels(newVisiblePanels); // Did not changed at all\n\n    if (added.length <= 0 && removed.length <= 0 && changed.length <= 0 && cloneCount === prevClonedPanels.length) {\n      return this;\n    }\n\n    var prevOriginalPanels = panelManager.originalPanels();\n    var newPanels = [];\n    var newClones = counter(cloneCount).map(function () {\n      return [];\n    });\n    maintained.forEach(function (_a) {\n      var beforeIdx = _a[0],\n          afterIdx = _a[1];\n      newPanels[afterIdx] = prevOriginalPanels[beforeIdx];\n      newPanels[afterIdx].setIndex(afterIdx);\n    });\n    added.forEach(function (addIndex) {\n      newPanels[addIndex] = new Panel(null, addIndex, _this.viewport);\n    });\n\n    if (isCircular) {\n      counter(cloneCount).forEach(function (groupIndex) {\n        var prevCloneGroup = prevClonedPanels[groupIndex];\n        var newCloneGroup = newClones[groupIndex];\n        maintained.forEach(function (_a) {\n          var beforeIdx = _a[0],\n              afterIdx = _a[1];\n          newCloneGroup[afterIdx] = prevCloneGroup ? prevCloneGroup[beforeIdx] : newPanels[afterIdx].clone(groupIndex, false);\n          newCloneGroup[afterIdx].setIndex(afterIdx);\n        });\n        added.forEach(function (addIndex) {\n          var newPanel = newPanels[addIndex];\n          newCloneGroup[addIndex] = newPanel.clone(groupIndex, false);\n        });\n      });\n    }\n\n    added.forEach(function (index) {\n      viewport.updateCheckedIndexes({\n        min: index,\n        max: index\n      });\n    });\n    removed.forEach(function (index) {\n      viewport.updateCheckedIndexes({\n        min: index - 1,\n        max: index + 1\n      });\n    });\n    var checkedIndexes = viewport.getCheckedIndexes();\n    checkedIndexes.forEach(function (_a, idx) {\n      var min = _a[0],\n          max = _a[1]; // Push checked indexes backward\n\n      var pushedIndex = added.filter(function (index) {\n        return index < min && panelManager.has(index);\n      }).length - removed.filter(function (index) {\n        return index < min;\n      }).length;\n      checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n    }); // Only effective only when there are least one panel which have changed its index\n\n    if (changed.length > 0) {\n      // Removed checked index by changed ones after pushing\n      maintained.forEach(function (_a) {\n        var next = _a[1];\n        viewport.updateCheckedIndexes({\n          min: next,\n          max: next\n        });\n      });\n    }\n\n    panelManager.replacePanels(newPanels, newClones);\n    this.isPanelChangedAtBeforeSync = true;\n  };\n  /**\n   * Synchronize info of panels with DOM info given by external rendering.\n   * @ko 외부 렌더링 방식에 의해 입력받은 DOM의 정보와 현재 플리킹이 갖는 패널 정보를 동기화 한다.\n   * @private\n   * @param - Info object of how panel elements are changed.<ko>패널의 DOM 요소들의 변경 정보를 담는 오브젝트.</ko>\n   */\n\n\n  __proto.sync = function (diffInfo) {\n    var list = diffInfo.list,\n        maintained = diffInfo.maintained,\n        added = diffInfo.added,\n        changed = diffInfo.changed,\n        removed = diffInfo.removed; // Did not changed at all\n\n    if (added.length <= 0 && removed.length <= 0 && changed.length <= 0) {\n      return this;\n    }\n\n    var viewport = this.viewport;\n    var _a = this.options,\n        renderOnlyVisible = _a.renderOnlyVisible,\n        circular = _a.circular;\n    var panelManager = viewport.panelManager;\n\n    if (!renderOnlyVisible) {\n      var indexRange = panelManager.getRange();\n      var beforeDiffInfo = diffInfo;\n\n      if (circular) {\n        var prevOriginalPanelCount_1 = indexRange.max;\n        var originalPanelCount_1 = list.length / (panelManager.getCloneCount() + 1) >> 0;\n        var originalAdded = added.filter(function (index) {\n          return index < originalPanelCount_1;\n        });\n        var originalRemoved = removed.filter(function (index) {\n          return index <= prevOriginalPanelCount_1;\n        });\n        var originalMaintained = maintained.filter(function (_a) {\n          var beforeIdx = _a[0];\n          return beforeIdx <= prevOriginalPanelCount_1;\n        });\n        var originalChanged = changed.filter(function (_a) {\n          var beforeIdx = _a[0];\n          return beforeIdx <= prevOriginalPanelCount_1;\n        });\n        beforeDiffInfo = {\n          added: originalAdded,\n          maintained: originalMaintained,\n          removed: originalRemoved,\n          changed: originalChanged\n        };\n      }\n\n      this.beforeSync(beforeDiffInfo);\n    }\n\n    var visiblePanels = renderOnlyVisible ? viewport.getVisiblePanels() : this.getAllPanels(true);\n    added.forEach(function (addedIndex) {\n      var addedElement = list[addedIndex];\n      var beforePanel = visiblePanels[addedIndex];\n      beforePanel.setElement(addedElement); // As it can be 0\n\n      beforePanel.unCacheBbox();\n    });\n\n    if (this.isPanelChangedAtBeforeSync) {\n      // Reset visible panels\n      viewport.setVisiblePanels([]);\n      this.isPanelChangedAtBeforeSync = false;\n    }\n\n    viewport.resize();\n    return this;\n  };\n\n  __proto.listenInput = function () {\n    var flicking = this;\n    var viewport = flicking.viewport;\n    var stateMachine = viewport.stateMachine; // Set event context\n\n    flicking.eventContext = {\n      flicking: flicking,\n      viewport: flicking.viewport,\n      transitTo: stateMachine.transitTo,\n      triggerEvent: flicking.triggerEvent,\n      moveCamera: flicking.moveCamera,\n      stopCamera: viewport.stopCamera\n    };\n    var handlers = {};\n\n    var _loop_1 = function (key) {\n      var eventType = AXES_EVENTS[key];\n\n      handlers[eventType] = function (e) {\n        return stateMachine.fire(eventType, e, flicking.eventContext);\n      };\n    };\n\n    for (var key in AXES_EVENTS) {\n      _loop_1(key);\n    } // Connect Axes instance with PanInput\n\n\n    flicking.viewport.connectAxesHandler(handlers);\n  };\n\n  __proto.listenResize = function () {\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", this.resize);\n    }\n  };\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @example\n   * eg.Flicking.VERSION;  // ex) 3.0.0\n   * @memberof eg.Flicking\n   */\n\n\n  Flicking.VERSION = \"3.6.3\";\n  /**\n   * Direction constant - \"PREV\" or \"NEXT\"\n   * @ko 방향 상수 - \"PREV\" 또는 \"NEXT\"\n   * @type {object}\n   * @property {\"PREV\"} PREV - Prev direction from current hanger position.<br/>It's `left(←️)` direction when `horizontal: true`.<br/>Or, `up(↑️)` direction when `horizontal: false`.<ko>현재 행어를 기준으로 이전 방향.<br/>`horizontal: true`일 경우 `왼쪽(←️)` 방향.<br/>`horizontal: false`일 경우 `위쪽(↑️)`방향이다.</ko>\n   * @property {\"NEXT\"} NEXT - Next direction from current hanger position.<br/>It's `right(→)` direction when `horizontal: true`.<br/>Or, `down(↓️)` direction when `horizontal: false`.<ko>현재 행어를 기준으로 다음 방향.<br/>`horizontal: true`일 경우 `오른쪽(→)` 방향.<br/>`horizontal: false`일 경우 `아래쪽(↓️)`방향이다.</ko>\n   * @example\n   * eg.Flicking.DIRECTION.PREV; // \"PREV\"\n   * eg.Flicking.DIRECTION.NEXT; // \"NEXT\"\n   */\n\n  Flicking.DIRECTION = DIRECTION;\n  /**\n   * Event type object with event name strings.\n   * @ko 이벤트 이름 문자열들을 담은 객체\n   * @type {object}\n   * @property {\"holdStart\"} HOLD_START - holdStart event<ko>holdStart 이벤트</ko>\n   * @property {\"holdEnd\"} HOLD_END - holdEnd event<ko>holdEnd 이벤트</ko>\n   * @property {\"moveStart\"} MOVE_START - moveStart event<ko>moveStart 이벤트</ko>\n   * @property {\"move\"} MOVE - move event<ko>move 이벤트</ko>\n   * @property {\"moveEnd\"} MOVE_END - moveEnd event<ko>moveEnd 이벤트</ko>\n   * @property {\"change\"} CHANGE - change event<ko>change 이벤트</ko>\n   * @property {\"restore\"} RESTORE - restore event<ko>restore 이벤트</ko>\n   * @property {\"select\"} SELECT - select event<ko>select 이벤트</ko>\n   * @property {\"needPanel\"} NEED_PANEL - needPanel event<ko>needPanel 이벤트</ko>\n   * @example\n   * eg.Flicking.EVENTS.MOVE_START; // \"MOVE_START\"\n   */\n\n  Flicking.EVENTS = EVENTS;\n  return Flicking;\n}(Component);\n\nexport default Flicking;\nexport { DEFAULT_OPTIONS, MOVE_TYPE, withFlickingMethods };","map":{"version":3,"sources":["../src/consts.ts","../src/utils.ts","../src/components/Panel.ts","../src/components/PanelManager.ts","../src/states/State.ts","../src/states/IdleState.ts","../src/states/HoldingState.ts","../src/states/DraggingState.ts","../src/states/AnimatingState.ts","../src/states/DisabledState.ts","../src/components/StateMachine.ts","../src/moves/MoveType.ts","../src/moves/Snap.ts","../src/moves/FreeScroll.ts","../src/components/Viewport.ts","../src/Flicking.ts"],"names":["MOVE_TYPE","SNAP","FREE_SCROLL","DEFAULT_MOVE_TYPE_OPTIONS","snap","type","count","freeScroll","isBrowser","DEFAULT_OPTIONS","classPrefix","deceleration","horizontal","circular","infinite","infiniteThreshold","lastIndex","threshold","duration","panelEffect","Math","defaultIndex","inputType","thresholdAngle","bounce","autoResize","adaptive","zIndex","bound","overflow","hanger","anchor","gap","moveType","useOffset","isEqualSize","isConstantSize","renderOnlyVisible","renderExternal","iOSEdgeSwipeThreshold","collectStatistics","DEFAULT_VIEWPORT_CSS","position","DEFAULT_CAMERA_CSS","width","height","willChange","DEFAULT_PANEL_CSS","EVENTS","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","CHANGE","RESTORE","SELECT","NEED_PANEL","VISIBLE_CHANGE","AXES_EVENTS","HOLD","RELEASE","ANIMATION_END","FINISH","STATE_TYPE","IDLE","HOLDING","DRAGGING","ANIMATING","DISABLED","DIRECTION","PREV","NEXT","FLICKING_METHODS","prev","next","moveTo","getIndex","getAllPanels","getCurrentPanel","getElement","getPanel","getPanelCount","getStatus","getVisiblePanels","enableInput","disableInput","destroy","resize","setStatus","isPlaying","checkTranslateSupport","transforms","webkitTransform","msTransform","MozTransform","OTransform","transform","name","has3d","supportedStyle","document","transformName","prefixedTransform","el","styleVal","window","transformInfo","TRANSFORM","merge","target","srcs","Object","value","source","parseElement","element","Array","elements","isString","tempDiv","toArray","addClass","className","hasClass","applyCSS","cssObj","clamp","val","min","max","isBetween","iterable","isArray","arr","parseArithmeticExpression","cssValue","base","defaultVal","defaultValue","cssRegex","idx","calculatedValue","matchResult","sign","unit","parsedValue","parseFloat","getProgress","pos","range","center","findIndex","callback","i","counter","counterArray","circulate","indexed","size","offset","restoreStyle","originalStyle","withFlickingMethods","prototype","flickingName","result","getBbox","bbox","x","y","offsetHeight","clientRect","index","relativeAnchorPosition","isClone","isVirtual","cloneIndex","style","cachedBbox","state","options","givenBbox","prevSize","cloneState","panel","viewport","panelCount","scrollAreaSize","relativeIndex","progress","outsetRange","relativePanelPosition","outsetProgress","panelSize","rightRelativePanelPosition","visibleSize","visibleRatio","currentPanel","hangerPosition","anchorPosition","currentPosition","eventType","identicalPanels","updateFunction","eachPanel","prevSibling","currentIndex","prevPanelIndex","prevPanelPosition","prevPanelSize","hasEmptyPanelBetween","notYetMinPanel","newPosition","prevPanel","nextSibling","nextPanelIndex","nextPanelPosition","notYetMaxPanel","nextPanel","parsedElements","firstPanel","targetIndex","option","wasVisible","Boolean","cameraElement","elementStyle","currentElementStyle","styleToApply","cloneElement","clonedPanel","clonedState","removingPanels","currentElement","panels","allClones","newPanels","lastPanel","firstRemovedPanel","possibleLastPanel","isCircular","siblingElement","pushedIndex","panelsAfterIndex","emptyPanelCount","removedPanels","newLastIndex","clones","panelCount_1","cloneSet","replacedPanels","length","wasNonEmptyCount","deleteCount","deletedPanels","reversedPanels","nonEmptyIndexFromLast","allPanels","allPanelsCount","newClones_1","clonedPanels","insertTarget_1","panelElement","cloneCount","lastPanelClones","nextSiblingClones","cloneNextSibling","lastPanelSibling","cloneSiblingElement","newClones","clone","_this","this_1","insertingIndex","fragment_1","prevState","__extends","flicking","triggerEvent","transitTo","context","e","flick","releaseEvent","srcEvent","touchEvent","touch","clickedElement","clickedPanel","cameraPosition","clickedPanelPosition","direction","moveCamera","stopCamera","delta","absDelta","inputEvent","velocity","inputDelta","isNextDirection","swipeDistance","swipeAngle","belowAngleThreshold","overThreshold","moveTypeContext","axesEvent","targetPanel","interruptDestInfo","nearestPanel","destInfo","scrollArea","loopCount","originalTargetPosition","newCloneIndex","newTargetPosition","newTargetPanel","isTrusted","currentState","nextState","ctx","destPos","halfGap","minimumDistanceToChange","originalPanel","firstClonedPanel","lapped","_super","snapCount","eventDelta","nearestIsCurrent","shouldMoveWhenBounceIs0","shouldMoveToAdjacent","estimatedHangerPos","panelToMove","cycleIndex","passedPanelCount","panelPosition","panelNextPosition","panelPrevPosition","siblingPanel","panelIndex","siblingIndex","originalPosition","defaultDuration","basePanel","basePosition","adjacentPanel","targetRelativeAnchorPosition","estimatedPanelPosition","estimatedPosition","estimatedPanel","lastPosition","currentPanelPosition","lastHangerPosition","panelMaintainRatio","relativeHangerPosition","positionOffset","translate","checkedIndexes","isAdaptiveCached","isViewportGiven","isCameraGiven","originalViewportStyle","originalCameraStyle","eventResult","onSuccess","onStopped","originalNearestPosition","modifiedNearestPosition","posOffset","moveVector","moveCoord","viewportElement","panelManager","minimumDistance","prevPosition","nextPosition","distance","minimumAnchorDistance","anchorDistance","nearest","shortestDistance","identicals","identical","newCenterPanel","newPanelPosition","indexes","visibleIndex","wasEmpty","newCurrentIndex","shouldApplyAdaptive","viewportStyle","sizeToApply","panelBbox","maximumPanelSize","viewportBbox","viewportSize","isFreeScroll","positionBounded","plugin","wrapper","originalPanels","topmostElement_1","deletingElement","status","createdPanels","orderedPanels","createdPanel","cameraPos_1","viewportSize_1","getNextPanel","getPrevPanel","isOutOfBoundNext","isOutOfBoundPrev","visiblePanels","getNext","isOutOfViewport","getAbsIndex_1","nextPanels","prevPanels","prevRange","nextRange","isOutOfBound","nearestAnchorPos","nearestIndex","nearestSize","hangerIsNextToNearestPanel","targetPosition","progressBetween","startIndex","axes","newPlugins","currentPlugins","removedPlugins","removed","changedRange","fragment","prevVisiblePanels","equalSizeClasses_1","cached_1","overlappedClass","viewportCandidate","hasViewportElement","cameraCandidate","hasCameraElement","panelElements","easing","interruptable","scale","indexRange","sumOriginalPanelSize","areaPrev","sizeSum","panelAtLeftBoundary","areaNext","panelAtRightBoundary","needCloneOnPrev","panel0OnFirstscreen","prevCloneCount","defaultPanel","defaultPosition","nextPanelPos","maintainingPanel","looped","panelsBeforeMaintainPanel","accumulatedSize","total","origPanel","cloneBasePos","clonedPanelPos","lastReplacePosition","replacePosition","relAnchorPosOfCombined","anchorPos","parsedBounce","parsedVal","maxLastIndex","checkingPanel","atLastPanel","nextIndex","currentNearestPosition","panelRight","cameraNext","emptyPanelExistsBetween","firstIndex","lastPanelAfterNeed","atLastPanelAfterNeed","cameraPrev","checkingIndex","atFirstPanel","prevIndex","panelLeft","firstPanelAfterNeed","atFirstPanelAfterNeed","params","alreadyTriggered","hasHandler","fill","newVisiblePanels","addedPanels","firstVisiblePanelPos","firstVisiblePanel","lastVisiblePanel","getAbsIndex","newVisibleRange","prevRefCount","newRefCount","added","panelBboxes","defaultBbox_1","equalSizeClasses_2","Flicking","currentOptions","possiblePositions","nearestPosition","current","includeClone","html","shouldResetElements","parent","origStyle","maintained","before","after","values","prevPanelCount","diffResult","getPanelAbsIndex","visibleIndexes","changedIndex","renderingPanels","changed","diffInfo","prevClonedPanels","prevOriginalPanels","beforeIdx","afterIdx","prevCloneGroup","newCloneGroup","newPanel","beforeDiffInfo","prevOriginalPanelCount_1","originalPanelCount_1","list","originalAdded","originalRemoved","originalMaintained","originalChanged","addedElement","beforePanel","stateMachine","handlers","key","canceled","holding","previousPosition","inputOffset","cameraChange","currentDirection"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { FlickingOptions, EventType, Direction, AxesEventType, StateType, MoveTypeSnapOption, MoveTypeFreeScrollOption, FlickingMethodsKeys } from \"./types\";\n\nexport const MOVE_TYPE: {\n  SNAP: \"snap\";\n  FREE_SCROLL: \"freeScroll\";\n} = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n};\n\nexport const DEFAULT_MOVE_TYPE_OPTIONS: {\n  snap: MoveTypeSnapOption,\n  freeScroll: MoveTypeFreeScrollOption,\n} = {\n  snap: {\n    type: \"snap\",\n    count: 1,\n  },\n  freeScroll: {\n    type: \"freeScroll\",\n  },\n};\nexport const isBrowser = typeof document !== \"undefined\";\n\n/**\n * Default options for creating Flicking.\n * @ko 플리킹을 만들 때 사용하는 기본 옵션들\n * @private\n * @memberof eg.Flicking\n */\nexport const DEFAULT_OPTIONS: Readonly<FlickingOptions> = {\n  classPrefix: \"eg-flick\",\n  deceleration: 0.0075,\n  horizontal: true,\n  circular: false,\n  infinite: false,\n  infiniteThreshold: 0,\n  lastIndex: Infinity,\n  threshold: 40,\n  duration: 100,\n  panelEffect: x => 1 - Math.pow(1 - x, 3),\n  defaultIndex: 0,\n  inputType: [\"touch\", \"mouse\"],\n  thresholdAngle: 45,\n  bounce: 10,\n  autoResize: false,\n  adaptive: false,\n  zIndex: 2000,\n  bound: false,\n  overflow: false,\n  hanger: \"50%\",\n  anchor: \"50%\",\n  gap: 0,\n  moveType: DEFAULT_MOVE_TYPE_OPTIONS.snap,\n  useOffset: false,\n  isEqualSize: false,\n  isConstantSize: false,\n  renderOnlyVisible: false,\n  renderExternal: false,\n  iOSEdgeSwipeThreshold: 30,\n  collectStatistics: true,\n};\n\nexport const DEFAULT_VIEWPORT_CSS = {\n  position: \"relative\",\n  zIndex: DEFAULT_OPTIONS.zIndex,\n  overflow: \"hidden\",\n};\n\nexport const DEFAULT_CAMERA_CSS = {\n  width: \"100%\",\n  height: \"100%\",\n  willChange: \"transform\",\n};\n\nexport const DEFAULT_PANEL_CSS = {\n  position: \"absolute\",\n};\n\nexport const EVENTS: EventType = {\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  CHANGE: \"change\",\n  RESTORE: \"restore\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  VISIBLE_CHANGE: \"visibleChange\",\n};\n\nexport const AXES_EVENTS: AxesEventType = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\",\n};\n\nexport const STATE_TYPE: StateType = {\n  IDLE: 0,\n  HOLDING: 1,\n  DRAGGING: 2,\n  ANIMATING: 3,\n  DISABLED: 4,\n};\n\nexport const DIRECTION: Direction = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n};\nexport const FLICKING_METHODS: {[key in FlickingMethodsKeys]: true} = {\n  prev: true,\n  next: true,\n  moveTo: true,\n  getIndex: true,\n  getAllPanels: true,\n  getCurrentPanel: true,\n  getElement: true,\n  getPanel: true,\n  getPanelCount: true,\n  getStatus: true,\n  getVisiblePanels: true,\n  enableInput: true,\n  disableInput: true,\n  destroy: true,\n  resize: true,\n  setStatus: true,\n  isPlaying: true,\n};\n\n// Check whether browser supports transform: translate3d\n// https://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\nexport let checkTranslateSupport = () => {\n  const transforms = {\n    webkitTransform: \"-webkit-transform\",\n    msTransform: \"-ms-transform\",\n    MozTransform: \"-moz-transform\",\n    OTransform: \"-o-transform\",\n    transform: \"transform\",\n  };\n\n  if (!isBrowser) {\n    return {\n      name: transforms.transform,\n      has3d: true,\n    };\n  }\n  const supportedStyle = document.documentElement.style;\n  let transformName = \"\";\n  for (const prefixedTransform in transforms) {\n    if (prefixedTransform in supportedStyle) {\n      transformName = prefixedTransform;\n    }\n  }\n\n  if (!transformName) {\n    throw new Error(\"Browser doesn't support CSS3 2D Transforms.\");\n  }\n\n  const el = document.createElement(\"div\");\n\n  document.documentElement.insertBefore(el, null);\n\n  el.style[transformName] = \"translate3d(1px, 1px, 1px)\";\n  const styleVal = window.getComputedStyle(el).getPropertyValue(transforms[transformName]);\n\n  el.parentElement!.removeChild(el);\n\n  const transformInfo = {\n    name: transformName,\n    has3d: styleVal.length > 0 && styleVal !== \"none\",\n  };\n\n  checkTranslateSupport = () => transformInfo;\n\n  return transformInfo;\n};\n\nexport const TRANSFORM = checkTranslateSupport();\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { ElementLike, OriginalStyle, BoundingBox } from \"./types\";\nimport Flicking from \"./Flicking\";\nimport { FLICKING_METHODS } from \"./consts\";\n\nexport function merge(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function parseElement(element: ElementLike | ElementLike[]): HTMLElement[] {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n      while (tempDiv.firstChild) {\n        tempDiv.removeChild(tempDiv.firstChild);\n      }\n    } else {\n      elements.push(el as HTMLElement);\n    }\n  });\n\n  return elements;\n}\n\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n\n// Get class list of element as string array\nexport function classList(element: HTMLElement): string[] {\n  return element.classList\n    ? toArray(element.classList)\n    : element.className.split(\" \");\n}\n\n// Add class to specified element\nexport function addClass(element: HTMLElement, className: string): void {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    if (!hasClass(element, className)) {\n      element.className = (`${element.className} ${className}`).replace(/\\s{2,}/g, \" \");\n    }\n  }\n}\n\nexport function hasClass(element: HTMLElement, className: string): boolean {\n  if (element.classList) {\n    return element.classList.contains(className);\n  } else {\n    return (element.className.split(\" \").indexOf(className) >= 0);\n  }\n}\n\nexport function applyCSS(element: HTMLElement, cssObj: object): void {\n  Object.keys(cssObj).forEach(property => {\n    element.style[property] = cssObj[property];\n  });\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.max(Math.min(val, max), min);\n}\n\n// Min: inclusive, Max: exclusive\nexport function isBetween(val: number, min: number, max: number) {\n  return val >= min && val <= max;\n}\n\nexport interface ArrayLike<T> {\n  length: number;\n  [index: number]: T;\n}\n\nexport function toArray<T>(iterable: ArrayLike<T>): T[] {\n  return [].slice.call(iterable);\n}\n\nexport function isArray(arr: any): boolean {\n  return arr && arr.constructor === Array;\n}\n\nexport function parseArithmeticExpression(cssValue: number | string, base: number, defaultVal?: number): number {\n  // Set base / 2 to default value, if it's undefined\n  const defaultValue = defaultVal != null ? defaultVal : base / 2;\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return clamp(cssValue, 0, base);\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return defaultValue;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return defaultValue;\n  }\n\n  // Clamp between 0 ~ base\n  return clamp(calculatedValue, 0, base);\n}\n\nexport function getProgress(pos: number, range: number[]) {\n  // start, anchor, end\n  // -1 , 0 , 1\n  const [min, center, max] = range;\n\n  if (pos > center && (max - center)) {\n    // 0 ~ 1\n    return (pos - center) / (max - center);\n  } else if (pos < center && (center - min)) {\n    // -1 ~ 0\n    return (pos - center) / (center - min);\n  } else if (pos !== center && max - min) {\n    return (pos - min) / (max - min);\n  }\n  return 0;\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function counter(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n\n// Circulate number between range [min, max]\n/*\n * \"indexed\" means min and max is not same, so if it's true \"min - 1\" should be max\n * While if it's false, \"min - 1\" should be \"max - 1\"\n * use `indexed: true` when it should be used for circulating integers like index\n * or `indexed: false` when it should be used for something like positions.\n */\nexport function circulate(value: number, min: number, max: number, indexed: boolean): number {\n  const size = indexed\n    ? max - min + 1\n    : max - min;\n  if (value < min) {\n    const offset = indexed\n      ? (min - value - 1) % size\n      : (min - value) % size;\n    value = max - offset;\n  } else if (value > max) {\n    const offset = indexed\n      ? (value - max - 1) % size\n      : (value - max) % size;\n    value = min + offset;\n  }\n\n  return value;\n}\n\nexport function restoreStyle(element: HTMLElement, originalStyle: OriginalStyle): void {\n  originalStyle.className\n    ? element.setAttribute(\"class\", originalStyle.className)\n    : element.removeAttribute(\"class\");\n  originalStyle.style\n    ? element.setAttribute(\"style\", originalStyle.style)\n    : element.removeAttribute(\"style\");\n}\n\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\nexport function withFlickingMethods(prototype: any, flickingName: string) {\n  Object.keys(FLICKING_METHODS).forEach((name: keyof Flicking) => {\n    if (prototype[name]) {\n      return;\n    }\n    prototype[name] = function(...args) {\n      const result = this[flickingName][name](...args);\n\n      // fix `this` type to return your own `flicking` instance to the instance using the decorator.\n      if (result === this[flickingName]) {\n        return this;\n      } else {\n        return result;\n      }\n    };\n  });\n}\n\nexport function getBbox(element: HTMLElement, useOffset: boolean) {\n  let bbox: BoundingBox;\n  if (useOffset) {\n    bbox = {\n      x: 0,\n      y: 0,\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n    };\n  } else {\n    const clientRect = element.getBoundingClientRect();\n    bbox = {\n      x: clientRect.left,\n      y: clientRect.top,\n      width: clientRect.width,\n      height: clientRect.height,\n    };\n  }\n  return bbox;\n}\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Viewport from \"./Viewport\";\nimport { OriginalStyle, FlickingPanel, ElementLike, DestroyOption, BoundingBox } from \"../types\";\nimport { DEFAULT_PANEL_CSS, EVENTS } from \"../consts\";\nimport { addClass, applyCSS, parseArithmeticExpression, parseElement, getProgress, restoreStyle, hasClass, getBbox } from \"../utils\";\n\nclass Panel implements FlickingPanel {\n  public viewport: Viewport;\n  public prevSibling: Panel | null;\n  public nextSibling: Panel | null;\n\n  protected state: {\n    index: number;\n    position: number;\n    relativeAnchorPosition: number;\n    size: number;\n    isClone: boolean;\n    isVirtual: boolean;\n    // Index of cloned panel, zero-based integer(original: -1, cloned: [0, 1, 2, ...])\n    // if cloneIndex is 0, that means it's first cloned panel of original panel\n    cloneIndex: number;\n    originalStyle: OriginalStyle;\n    cachedBbox: BoundingBox | null;\n  };\n  private element: HTMLElement;\n  private original?: Panel;\n  private clonedPanels: Panel[];\n\n  public constructor(\n    element?: HTMLElement | null,\n    index?: number,\n    viewport?: Viewport,\n  ) {\n    this.viewport = viewport!;\n    this.prevSibling = null;\n    this.nextSibling = null;\n    this.clonedPanels = [];\n\n    this.state = {\n      index: index!,\n      position: 0,\n      relativeAnchorPosition: 0,\n      size: 0,\n      isClone: false,\n      isVirtual: false,\n      cloneIndex: -1,\n      originalStyle: {\n        className: \"\",\n        style: \"\",\n      },\n      cachedBbox: null,\n    };\n    this.setElement(element);\n  }\n\n  public resize(givenBbox?: BoundingBox): void {\n    const state = this.state;\n    const options = this.viewport.options;\n    const bbox = givenBbox\n      ? givenBbox\n      : this.getBbox();\n    this.state.cachedBbox = bbox;\n    const prevSize = state.size;\n\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    if (prevSize !== state.size) {\n      state.relativeAnchorPosition = parseArithmeticExpression(options.anchor, state.size);\n    }\n\n    if (!state.isClone) {\n      this.clonedPanels.forEach(panel => {\n        const cloneState = panel.state;\n\n        cloneState.size = state.size;\n        cloneState.cachedBbox = state.cachedBbox;\n        cloneState.relativeAnchorPosition = state.relativeAnchorPosition;\n      });\n    }\n  }\n\n  public unCacheBbox(): void {\n    this.state.cachedBbox = null;\n  }\n\n  public getProgress() {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const panelCount = viewport.panelManager.getPanelCount();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n\n    const relativeIndex = (options.circular ? Math.floor(this.getPosition() / scrollAreaSize) * panelCount : 0) + this.getIndex();\n    const progress = relativeIndex - viewport.getCurrentProgress();\n\n    return progress;\n  }\n\n  public getOutsetProgress() {\n    const viewport = this.viewport;\n    const outsetRange = [\n      -this.getSize(),\n      viewport.getRelativeHangerPosition() - this.getRelativeAnchorPosition(),\n      viewport.getSize(),\n    ];\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const outsetProgress = getProgress(relativePanelPosition, outsetRange);\n\n    return outsetProgress;\n  }\n\n  public getVisibleRatio() {\n    const viewport = this.viewport;\n    const panelSize = this.getSize();\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const rightRelativePanelPosition = relativePanelPosition + panelSize;\n\n    const visibleSize = Math.min(viewport.getSize(), rightRelativePanelPosition) - Math.max(relativePanelPosition, 0);\n    const visibleRatio = visibleSize >= 0\n      ? visibleSize / panelSize\n      : 0;\n\n    return visibleRatio;\n  }\n\n  public focus(duration?: number): void {\n    const viewport = this.viewport;\n    const currentPanel = viewport.getCurrentPanel();\n    const hangerPosition = viewport.getHangerPosition();\n    const anchorPosition = this.getAnchorPosition();\n    if (hangerPosition === anchorPosition || !currentPanel) {\n      return;\n    }\n\n    const currentPosition = currentPanel.getPosition();\n    const eventType = currentPosition === this.getPosition()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(this, viewport.findEstimatedPosition(this), eventType, null, duration);\n  }\n\n  public update(updateFunction: ((element: HTMLElement) => any) | null = null, shouldResize: boolean = true): void {\n    const identicalPanels = this.getIdenticalPanels();\n\n    if (updateFunction) {\n      identicalPanels.forEach(eachPanel => {\n        updateFunction(eachPanel.getElement());\n      });\n    }\n\n    if (shouldResize) {\n      identicalPanels.forEach(eachPanel => {\n        eachPanel.unCacheBbox();\n      });\n      this.viewport.addVisiblePanel(this);\n      this.viewport.resize();\n    }\n  }\n\n  public prev(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const prevSibling = this.prevSibling;\n\n    if (!prevSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const prevPanelIndex = prevSibling.getIndex();\n    const prevPanelPosition = prevSibling.getPosition();\n    const prevPanelSize = prevSibling.getSize();\n\n    const hasEmptyPanelBetween = currentIndex - prevPanelIndex > 1;\n    const notYetMinPanel = options.infinite\n      && currentIndex > 0\n      && prevPanelIndex > currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMinPanel) {\n      // Empty panel exists between\n      return null;\n    }\n\n    const newPosition = currentPosition - prevPanelSize - options.gap;\n\n    let prevPanel = prevSibling;\n    if (prevPanelPosition !== newPosition) {\n      prevPanel = prevSibling.clone(prevSibling.getCloneIndex(), true);\n      prevPanel.setPosition(newPosition);\n    }\n\n    return prevPanel;\n  }\n\n  public next(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const nextSibling = this.nextSibling;\n    const lastIndex = viewport.panelManager.getLastIndex();\n\n    if (!nextSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const nextPanelIndex = nextSibling.getIndex();\n    const nextPanelPosition = nextSibling.getPosition();\n\n    const hasEmptyPanelBetween = nextPanelIndex - currentIndex > 1;\n    const notYetMaxPanel = options.infinite\n      && currentIndex < lastIndex\n      && nextPanelIndex < currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMaxPanel) {\n      return null;\n    }\n\n    const newPosition = currentPosition + this.getSize() + options.gap;\n\n    let nextPanel = nextSibling;\n    if (nextPanelPosition !== newPosition) {\n      nextPanel = nextSibling.clone(nextSibling.getCloneIndex(), true);\n      nextPanel.setPosition(newPosition);\n    }\n\n    return nextPanel;\n  }\n\n  public insertBefore(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n    const firstPanel = viewport.panelManager.firstPanel()!;\n    const prevSibling = this.prevSibling;\n    // Finding correct inserting index\n    // While it should insert removing empty spaces,\n    // It also should have to be bigger than prevSibling' s index\n    const targetIndex = prevSibling && firstPanel.getIndex() !== this.getIndex()\n      ? Math.max(prevSibling.getIndex() + 1, this.getIndex() - parsedElements.length)\n      : Math.max(this.getIndex() - parsedElements.length, 0);\n\n    return viewport.insert(targetIndex, parsedElements);\n  }\n\n  public insertAfter(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.insert(this.getIndex() + 1, element);\n  }\n\n  public remove(): FlickingPanel {\n    this.viewport.remove(this.getIndex());\n\n    return this;\n  }\n\n  public destroy(option: Partial<DestroyOption>): void {\n    if (!option.preserveUI) {\n      const originalStyle = this.state.originalStyle;\n\n      restoreStyle(this.element, originalStyle);\n    }\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getAnchorPosition(): number {\n    return this.state.position + this.state.relativeAnchorPosition;\n  }\n\n  public getRelativeAnchorPosition(): number {\n    return this.state.relativeAnchorPosition;\n  }\n\n  public getIndex(): number {\n    return this.state.index;\n  }\n\n  public getPosition(): number {\n    return this.state.position;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getBbox(): BoundingBox {\n    const state = this.state;\n    const viewport = this.viewport;\n    const element = this.element;\n    const options = viewport.options;\n\n    if (!element) {\n      state.cachedBbox = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n      };\n    } else if (!state.cachedBbox) {\n      const wasVisible = Boolean(element.parentNode);\n      const cameraElement = viewport.getCameraElement();\n      if (!wasVisible) {\n        cameraElement.appendChild(element);\n        viewport.addVisiblePanel(this);\n      }\n      state.cachedBbox = getBbox(element, options.useOffset);\n\n      if (!wasVisible && viewport.options.renderExternal) {\n        cameraElement.removeChild(element);\n      }\n    }\n    return state.cachedBbox!;\n  }\n\n  public isClone(): boolean {\n    return this.state.isClone;\n  }\n\n  public getOverlappedClass(classes: string[]): string | undefined {\n    const element = this.element;\n\n    for (const className of classes) {\n      if (hasClass(element, className)) {\n        return className;\n      }\n    }\n  }\n\n  public getCloneIndex(): number {\n    return this.state.cloneIndex;\n  }\n\n  public getClonedPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getClonedPanels()\n      : this.clonedPanels;\n  }\n\n  public getIdenticalPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getIdenticalPanels()\n      : [this, ...this.clonedPanels];\n  }\n\n  public getOriginalPanel(): Panel {\n    return this.state.isClone\n      ? this.original!\n      : this;\n  }\n\n  public setIndex(index: number): void {\n    const state = this.state;\n\n    state.index = index;\n    this.clonedPanels.forEach(panel => panel.state.index = index);\n  }\n\n  public setPosition(pos: number): this {\n    this.state.position = pos;\n\n    return this;\n  }\n\n  public setPositionCSS(offset: number = 0): void {\n    if (!this.element) {\n      return;\n    }\n    const state = this.state;\n    const pos = state.position;\n    const options = this.viewport.options;\n    const elementStyle = this.element.style;\n    const currentElementStyle = options.horizontal\n      ? elementStyle.left\n      : elementStyle.top;\n    const styleToApply = `${pos - offset}px`;\n\n    if (!state.isVirtual && currentElementStyle !== styleToApply) {\n      options.horizontal\n        ? elementStyle.left = styleToApply\n        : elementStyle.top = styleToApply;\n    }\n  }\n\n  public clone(cloneIndex: number, isVirtual: boolean = false, element?: HTMLElement | null): Panel {\n    const state = this.state;\n    const viewport = this.viewport;\n    let cloneElement = element;\n\n    if (!cloneElement && this.element) {\n      cloneElement = isVirtual ? this.element : this.element.cloneNode(true) as HTMLElement;\n    }\n    const clonedPanel = new Panel(cloneElement, state.index, viewport);\n    const clonedState = clonedPanel.state;\n\n    clonedPanel.original = state.isClone\n      ? this.original\n      : this;\n    clonedState.isClone = true;\n    clonedState.isVirtual = isVirtual;\n    clonedState.cloneIndex = cloneIndex;\n    // Inherit some state values\n    clonedState.size = state.size;\n    clonedState.relativeAnchorPosition = state.relativeAnchorPosition;\n    clonedState.originalStyle = state.originalStyle;\n    clonedState.cachedBbox = state.cachedBbox;\n\n    if (!isVirtual) {\n      this.clonedPanels.push(clonedPanel);\n    } else {\n      clonedPanel.prevSibling = this.prevSibling;\n      clonedPanel.nextSibling = this.nextSibling;\n    }\n\n    return clonedPanel;\n  }\n\n  public removeElement(): void {\n    if (!this.viewport.options.renderExternal) {\n      const element = this.element;\n      element.parentNode && element.parentNode.removeChild(element);\n    }\n\n    // Do the same thing for clones\n    if (!this.state.isClone) {\n      this.removeClonedPanelsAfter(0);\n    }\n  }\n\n  public removeClonedPanelsAfter(start: number): void {\n    const options = this.viewport.options;\n    const removingPanels = this.clonedPanels.splice(start);\n\n    if (!options.renderExternal) {\n      removingPanels.forEach(panel => {\n        panel.removeElement();\n      });\n    }\n  }\n\n  public setElement(element?: HTMLElement | null): void {\n    if (!element) {\n      return;\n    }\n    const currentElement = this.element;\n    if (element !== currentElement) {\n      const options = this.viewport.options;\n\n      if (currentElement) {\n        if (options.horizontal) {\n          element.style.left = currentElement.style.left;\n        } else {\n          element.style.top = currentElement.style.top;\n        }\n      } else {\n        const originalStyle = this.state.originalStyle;\n\n        originalStyle.className = element.getAttribute(\"class\");\n        originalStyle.style = element.getAttribute(\"style\");\n      }\n\n      this.element = element;\n\n      if (options.classPrefix) {\n        addClass(element, `${options.classPrefix}-panel`);\n      }\n\n      // Update size info after applying panel css\n      applyCSS(this.element, DEFAULT_PANEL_CSS);\n    }\n  }\n}\n\nexport default Panel;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Panel from \"./Panel\";\nimport { FlickingOptions } from \"../types\";\nimport { findIndex, counter } from \"../utils\";\n\nclass PanelManager {\n  private cameraElement: HTMLElement;\n  private options: FlickingOptions;\n  private panels: Panel[];\n  private clones: Panel[][];\n  // index range of existing panels\n  private range: {\n    min: number;\n    max: number;\n  };\n  private length: number;\n  private lastIndex: number;\n  private cloneCount: number;\n\n  constructor(\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n  ) {\n    this.cameraElement = cameraElement;\n    this.panels = [];\n    this.clones = [];\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n    this.length = 0;\n    this.cloneCount = 0;\n    this.options = options;\n    this.lastIndex = options.lastIndex;\n  }\n\n  public firstPanel(): Panel | undefined {\n    return this.panels[this.range.min];\n  }\n\n  public lastPanel(): Panel | undefined {\n    return this.panels[this.range.max];\n  }\n\n  public allPanels(): ReadonlyArray<Panel> {\n    return [\n      ...this.panels,\n      ...this.clones.reduce((allClones, clones) => [...allClones, ...clones], []),\n    ];\n  }\n\n  public originalPanels(): ReadonlyArray<Panel> {\n    return this.panels;\n  }\n\n  public clonedPanels(): ReadonlyArray<Panel[]> {\n    return this.clones;\n  }\n\n  public replacePanels(newPanels: Panel[], newClones: Panel[][]): void {\n    this.panels = newPanels;\n    this.clones = newClones;\n\n    this.range = {\n      min: findIndex(newPanels, panel => Boolean(panel)),\n      max: newPanels.length - 1,\n    };\n    this.length = newPanels.filter(panel => Boolean(panel)).length;\n  }\n\n  public has(index: number): boolean {\n    return !!this.panels[index];\n  }\n\n  public get(index: number): Panel | undefined {\n    return this.panels[index];\n  }\n\n  public getPanelCount(): number {\n    return this.length;\n  }\n\n  public getLastIndex(): number {\n    return this.lastIndex;\n  }\n\n  public getRange(): Readonly<{ min: number, max: number }> {\n    return this.range;\n  }\n\n  public getCloneCount(): number {\n    return this.cloneCount;\n  }\n\n  public setLastIndex(lastIndex: number): void {\n    this.lastIndex = lastIndex;\n\n    const firstPanel = this.firstPanel();\n    const lastPanel = this.lastPanel();\n\n    if (!firstPanel || !lastPanel) {\n      return; // no meaning of updating range & length\n    }\n\n    // Remove panels above new last index\n    const range = this.range;\n    if (lastPanel.getIndex() > lastIndex) {\n      const removingPanels = this.panels.splice(lastIndex + 1);\n      this.length -= removingPanels.length;\n\n      const firstRemovedPanel = removingPanels.filter(panel => !!panel)[0];\n      const possibleLastPanel = firstRemovedPanel.prevSibling;\n      if (possibleLastPanel) {\n        range.max = possibleLastPanel.getIndex();\n      } else {\n        range.min = -1;\n        range.max = -1;\n      }\n\n      if (this.shouldRender()) {\n        removingPanels.forEach(panel => panel.removeElement());\n      }\n    }\n  }\n\n  public setCloneCount(cloneCount: number): void {\n    this.cloneCount = cloneCount;\n  }\n\n  // Insert at index\n  // Returns pushed elements from index, inserting at 'empty' position doesn't push elements behind it\n  public insert(index: number, newPanels: Panel[]): number {\n    const panels = this.panels;\n    const range = this.range;\n    const isCircular = this.options.circular;\n    const lastIndex = this.lastIndex;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    this.insertNewPanels(newPanels, siblingElement);\n\n    let pushedIndex = newPanels.length;\n    // Like when setting index 50 while visible panels are 0, 1, 2\n    if (index > range.max) {\n      newPanels.forEach((panel, offset) => {\n        panels[index + offset] = panel;\n      });\n    } else {\n      const panelsAfterIndex = panels.slice(index, index + newPanels.length);\n      // Find empty from beginning\n      let emptyPanelCount = findIndex(panelsAfterIndex, panel => !!panel);\n      if (emptyPanelCount < 0) {\n        // All empty\n        emptyPanelCount = panelsAfterIndex.length;\n      }\n      pushedIndex = newPanels.length - emptyPanelCount;\n\n      // Insert removing empty panels\n      panels.splice(index, emptyPanelCount, ...newPanels);\n\n      // Remove panels after last index\n      if (panels.length > lastIndex + 1) {\n        const removedPanels = panels.splice(lastIndex + 1)\n          .filter(panel => Boolean(panel));\n        this.length -= removedPanels.length;\n\n        // Find first\n        const newLastIndex = lastIndex - findIndex(this.panels.concat().reverse(), panel => !!panel);\n\n        // Can be filled with empty after newLastIndex\n        this.panels.splice(newLastIndex + 1);\n        this.range.max = newLastIndex;\n\n        if (this.shouldRender()) {\n          removedPanels.forEach(panel => panel.removeElement());\n        }\n      }\n    }\n\n    // Update index of previous panels\n    if (pushedIndex > 0) {\n      panels.slice(index + newPanels.length).forEach(panel => {\n        panel.setIndex(panel.getIndex() + pushedIndex);\n      });\n    }\n\n    // Update state\n    this.length += newPanels.length;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length - pushedIndex, nextSibling);\n      const clones = this.clones;\n      const panelCount = this.panels.length;\n      if (clones[0] && clones[0].length > lastIndex + 1) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(panelCount);\n        });\n      }\n    }\n\n    return pushedIndex;\n  }\n\n  public replace(index: number, newPanels: Panel[]): Panel[] {\n    const panels = this.panels;\n    const range = this.range;\n    const options = this.options;\n    const isCircular = options.circular;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index + newPanels.length);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    this.insertNewPanels(newPanels, siblingElement);\n\n    if (index > range.max) {\n      // Temporarily insert null at index to use splice()\n      (panels[index] as any) = null;\n    }\n\n    const replacedPanels = panels.splice(index, newPanels.length, ...newPanels);\n    const wasNonEmptyCount = replacedPanels.filter(panel => Boolean(panel)).length;\n\n    // Suppose inserting [1, 2, 3] at 0 position when there were [empty, 1]\n    // So length should be increased by 3(inserting panels) - 1(non-empty panels)\n    this.length += newPanels.length - wasNonEmptyCount;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length, nextSibling);\n    }\n\n    if (this.shouldRender()) {\n      replacedPanels.forEach(panel => panel && panel.removeElement());\n    }\n\n    return replacedPanels;\n  }\n\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    const isCircular = this.options.circular;\n    const panels = this.panels;\n    const clones = this.clones;\n    // Delete count should be equal or larger than 0\n    deleteCount = Math.max(deleteCount, 0);\n\n    const deletedPanels = panels\n      .splice(index, deleteCount)\n      .filter(panel => !!panel);\n\n    if (this.shouldRender()) {\n      deletedPanels.forEach(panel => panel.removeElement());\n    }\n\n    if (isCircular) {\n      clones.forEach(cloneSet => {\n        cloneSet.splice(index, deleteCount);\n      });\n    }\n\n    // Update indexes\n    panels\n      .slice(index)\n      .forEach(panel => {\n        panel.setIndex(panel.getIndex() - deleteCount);\n      });\n\n    // Check last panel is empty\n    let lastIndex = panels.length - 1;\n    if (!panels[lastIndex]) {\n      const reversedPanels = panels.concat().reverse();\n      const nonEmptyIndexFromLast = findIndex(reversedPanels, panel => !!panel);\n      lastIndex = nonEmptyIndexFromLast < 0\n        ? -1 // All empty\n        : lastIndex - nonEmptyIndexFromLast;\n\n      // Remove all empty panels from last\n      panels.splice(lastIndex + 1);\n      if (isCircular) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(lastIndex + 1);\n        });\n      }\n    }\n\n    // Update range & length\n    this.range = {\n      min: findIndex(panels, panel => !!panel),\n      max: lastIndex,\n    };\n    this.length -= deletedPanels.length;\n\n    if (this.length <= 0) {\n      // Reset clones\n      this.clones = [];\n      this.cloneCount = 0;\n    }\n\n    return deletedPanels;\n  }\n\n  public chainAllPanels() {\n    const allPanels = this.allPanels().filter(panel => !!panel);\n    const allPanelsCount = allPanels.length;\n\n    if (allPanelsCount <= 1) {\n      return;\n    }\n\n    allPanels.slice(1, allPanels.length - 1).forEach((panel, idx) => {\n      const prevPanel = allPanels[idx];\n      const nextPanel = allPanels[idx + 2];\n\n      panel.prevSibling = prevPanel;\n      panel.nextSibling = nextPanel;\n    });\n\n    const firstPanel = allPanels[0];\n    const lastPanel = allPanels[allPanelsCount - 1];\n\n    firstPanel.prevSibling = null;\n    firstPanel.nextSibling = allPanels[1];\n    lastPanel.prevSibling = allPanels[allPanelsCount - 2];\n    lastPanel.nextSibling = null;\n\n    if (this.options.circular) {\n      firstPanel.prevSibling = lastPanel;\n      lastPanel.nextSibling = firstPanel;\n    }\n  }\n\n  public insertClones(cloneIndex: number, index: number, clonedPanels: Panel[], deleteCount: number = 0): void {\n    const clones = this.clones;\n    const lastIndex = this.lastIndex;\n\n    if (!clones[cloneIndex]) {\n      const newClones: Panel[] = [];\n      clonedPanels.forEach((panel, offset) => {\n        newClones[index + offset] = panel;\n      });\n\n      clones[cloneIndex] = newClones;\n    } else {\n      const insertTarget = clones[cloneIndex];\n\n      if (index >= insertTarget.length) {\n        clonedPanels.forEach((panel, offset) => {\n          insertTarget[index + offset] = panel;\n        });\n      } else {\n        insertTarget.splice(index, deleteCount, ...clonedPanels);\n        // Remove panels after last index\n        if (clonedPanels.length > lastIndex + 1) {\n          clonedPanels.splice(lastIndex + 1);\n        }\n      }\n    }\n  }\n\n  // clones are operating in set\n  public removeClonesAfter(cloneIndex: number): void {\n    const panels = this.panels;\n\n    panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(cloneIndex);\n    });\n    this.clones.splice(cloneIndex);\n  }\n\n  public findPanelOf(element: HTMLElement): Panel | undefined {\n    const allPanels = this.allPanels();\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const panelElement = panel.getElement();\n      if (panelElement.contains(element)) {\n        return panel;\n      }\n    }\n  }\n\n  public findFirstPanelFrom(index: number): Panel | undefined {\n    for (const panel of this.panels.slice(index)) {\n      if (panel && panel.getIndex() >= index && panel.getElement().parentNode) {\n        return panel;\n      }\n    }\n  }\n\n  private addNewClones(index: number, originalPanels: Panel[], deleteCount: number, nextSibling: Panel | undefined) {\n    const cameraElement = this.cameraElement;\n    const cloneCount = this.getCloneCount();\n    const lastPanel = this.lastPanel();\n    const lastPanelClones: Panel[] = lastPanel\n      ? lastPanel.getClonedPanels()\n      : [];\n    const nextSiblingClones: Panel[] = nextSibling\n      ? nextSibling.getClonedPanels()\n      : [];\n\n    for (const cloneIndex of counter(cloneCount)) {\n      const cloneNextSibling = nextSiblingClones[cloneIndex];\n      const lastPanelSibling = lastPanelClones[cloneIndex];\n\n      const cloneSiblingElement = cloneNextSibling\n        ? cloneNextSibling.getElement()\n        : lastPanelSibling\n          ? lastPanelSibling.getElement().nextElementSibling\n          : null;\n\n      const newClones = originalPanels.map(panel => {\n        const clone = panel.clone(cloneIndex);\n\n        if (this.shouldRender()) {\n          cameraElement.insertBefore(clone.getElement(), cloneSiblingElement);\n        }\n\n        return clone;\n      });\n\n      this.insertClones(cloneIndex, index, newClones, deleteCount);\n    }\n  }\n\n  private updateIndex(insertingIndex: number) {\n    const panels = this.panels;\n    const range = this.range;\n\n    const newLastIndex = panels.length - 1;\n    if (newLastIndex > range.max) {\n      range.max = newLastIndex;\n    }\n    if (insertingIndex < range.min || range.min < 0) {\n      range.min = insertingIndex;\n    }\n  }\n\n  private insertNewPanels(newPanels: Panel[], siblingElement: HTMLElement | null) {\n    if (this.shouldRender()) {\n      const fragment = document.createDocumentFragment();\n      newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n      this.cameraElement.insertBefore(fragment, siblingElement);\n    }\n  }\n\n  private shouldRender(): boolean {\n    const options = this.options;\n\n    return !options.renderExternal && !options.renderOnlyVisible;\n  }\n}\n\nexport default PanelManager;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Panel from \"../components/Panel\";\nimport { ValueOf, Direction, StateType, FlickingContext } from \"../types\";\n\nabstract class State {\n  public delta: number = 0;\n  public direction: ValueOf<Direction> | null = null;\n  public targetPanel: Panel | null = null;\n  public lastPosition: number = 0;\n  public abstract readonly type: ValueOf<StateType>;\n  public abstract readonly holding: boolean;\n  public abstract readonly playing: boolean;\n\n  public onEnter(prevState: State): void {\n    this.delta = prevState.delta;\n    this.direction = prevState.direction;\n    this.targetPanel = prevState.targetPanel;\n    this.lastPosition = prevState.lastPosition;\n  }\n\n  public onExit(nextState: State): void {\n    // DO NOTHING\n  }\n\n  public onHold(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onChange(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onAnimationEnd(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onFinish(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { EVENTS, STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass IdleState extends State {\n  public readonly type = STATE_TYPE.IDLE;\n  public readonly holding = false;\n  public readonly playing = false;\n\n  public onEnter() {\n    this.direction = null;\n    this.targetPanel = null;\n    this.delta = 0;\n    this.lastPosition = 0;\n  }\n\n  public onHold(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Shouldn't do any action until any panels on flicking area\n    if (flicking.getPanelCount() <= 0) {\n      if (viewport.options.infinite) {\n        viewport.moveCamera(viewport.getCameraPosition(), e);\n      }\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    this.lastPosition = viewport.getCameraPosition();\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.HOLDING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  // By methods call\n  public onChange(e: any, context: FlickingContext): void {\n    const { triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.MOVE_START, e, false)\n      .onSuccess(() => {\n        // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.ANIMATING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n}\n\nexport default IdleState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS, DIRECTION } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass HoldingState extends State {\n  public readonly type = STATE_TYPE.HOLDING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  private releaseEvent: any = null;\n\n  public onChange(e: any, context: FlickingContext): void {\n    const { flicking, triggerEvent, transitTo } = context;\n\n    const offset = flicking.options.horizontal\n      ? e.inputEvent.offsetX\n      : e.inputEvent.offsetY;\n    this.direction = offset < 0\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    triggerEvent(EVENTS.MOVE_START, e, true)\n      .onSuccess(() => {\n        // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.DRAGGING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { viewport, triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (e.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      e.setTo({ flick: viewport.getCameraPosition() }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this.releaseEvent = e;\n  }\n\n  public onFinish(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this.releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this.releaseEvent;\n\n    // Static click\n    const srcEvent = releaseEvent.inputEvent.srcEvent;\n\n    let clickedElement: HTMLElement;\n    if (srcEvent.type === \"touchend\") {\n      const touchEvent = srcEvent as TouchEvent;\n      const touch = touchEvent.changedTouches[0];\n      clickedElement = document.elementFromPoint(touch.clientX, touch.clientY) as HTMLElement;\n    } else {\n      clickedElement = srcEvent.target;\n    }\n    const clickedPanel = viewport.panelManager.findPanelOf(clickedElement);\n    const cameraPosition = viewport.getCameraPosition();\n\n    if (clickedPanel) {\n      const clickedPanelPosition = clickedPanel.getPosition();\n      const direction = clickedPanelPosition > cameraPosition\n        ? DIRECTION.NEXT\n        : clickedPanelPosition < cameraPosition\n          ? DIRECTION.PREV\n          : null;\n\n      // Don't provide axes event, to use axes instance instead\n      triggerEvent(EVENTS.SELECT, null, true, {\n        direction, // Direction to the clicked panel\n        index: clickedPanel.getIndex(),\n        panel: clickedPanel,\n      });\n    }\n  }\n}\n\nexport default HoldingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DraggingState extends State {\n  public readonly type = STATE_TYPE.DRAGGING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { flicking, viewport, triggerEvent, transitTo, stopCamera } = context;\n\n    const delta = this.delta;\n    const absDelta = Math.abs(delta);\n    const options = flicking.options;\n    const horizontal = options.horizontal;\n    const moveType = viewport.moveType;\n    const inputEvent = e.inputEvent;\n\n    const velocity = horizontal\n      ? inputEvent.velocityX\n      : inputEvent.velocityY;\n    const inputDelta = horizontal\n      ? inputEvent.deltaX\n      : inputEvent.deltaY;\n    const isNextDirection = Math.abs(velocity) > 1\n      ? velocity < 0\n      : absDelta > 0\n        ? delta > 0\n        : inputDelta < 0;\n\n    const swipeDistance = viewport.options.bound\n      ? Math.max(absDelta, Math.abs(inputDelta))\n      : absDelta;\n    const swipeAngle = inputEvent.deltaX\n      ? Math.abs(180 * Math.atan(inputEvent.deltaY / inputEvent.deltaX) / Math.PI)\n      : 90;\n    const belowAngleThreshold = horizontal\n      ? swipeAngle <= options.thresholdAngle\n      : swipeAngle > options.thresholdAngle;\n    const overThreshold = swipeDistance >= options.threshold\n      && belowAngleThreshold;\n\n    const moveTypeContext = {\n      viewport,\n      axesEvent: e,\n      state: this,\n      swipeDistance,\n      isNextDirection,\n    };\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    const targetPanel = this.targetPanel;\n    if (!overThreshold && targetPanel) {\n      // Interrupted while animating\n      const interruptDestInfo = moveType.findPanelWhenInterrupted(moveTypeContext);\n\n      viewport.moveTo(\n        interruptDestInfo.panel,\n        interruptDestInfo.destPos,\n        interruptDestInfo.eventType,\n        e,\n        interruptDestInfo.duration,\n      );\n      transitTo(STATE_TYPE.ANIMATING);\n      return;\n    }\n\n    const currentPanel = viewport.getCurrentPanel();\n    const nearestPanel = viewport.getNearestPanel();\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      e.stop();\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    const destInfo = overThreshold\n      ? moveType.findTargetPanel(moveTypeContext)\n      : moveType.findRestorePanel(moveTypeContext);\n\n    viewport.moveTo(\n      destInfo.panel,\n      destInfo.destPos,\n      destInfo.eventType,\n      e,\n      destInfo.duration,\n    ).onSuccess(() => {\n      transitTo(STATE_TYPE.ANIMATING);\n    }).onStopped(() => {\n      transitTo(STATE_TYPE.DISABLED);\n      stopCamera(e);\n    });\n  }\n}\n\nexport default DraggingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\nimport { circulate } from \"../utils\";\n\nclass AnimatingState extends State {\n  public readonly type = STATE_TYPE.ANIMATING;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onHold(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    const options = viewport.options;\n    const scrollArea = viewport.getScrollArea();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const loopCount = Math.floor((this.lastPosition + this.delta - scrollArea.prev) / scrollAreaSize);\n\n    const targetPanel = this.targetPanel;\n    if (options.circular && loopCount !== 0 && targetPanel) {\n      const cloneCount = viewport.panelManager.getCloneCount();\n      const originalTargetPosition = targetPanel.getPosition();\n\n      // cloneIndex is from -1 to cloneCount - 1\n      const newCloneIndex = circulate(targetPanel.getCloneIndex() - loopCount, -1, cloneCount - 1, true);\n      const newTargetPosition = originalTargetPosition - loopCount * scrollAreaSize;\n      const newTargetPanel = targetPanel.getIdenticalPanels()[newCloneIndex + 1].clone(newCloneIndex, true);\n\n      // Set new target panel considering looped count\n      newTargetPanel.setPosition(newTargetPosition);\n      this.targetPanel = newTargetPanel;\n    }\n\n    // Reset last position and delta\n    this.delta = 0;\n    this.lastPosition = viewport.getCameraPosition();\n\n    // Update current panel as current nearest panel\n    viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.DRAGGING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onFinish(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext) {\n    const isTrusted = e && e.isTrusted;\n\n    viewport.options.bound\n      ? viewport.setCurrentPanel(this.targetPanel!)\n      : viewport.setCurrentPanel(viewport.getNearestPanel()!);\n\n    if (flicking.options.adaptive) {\n      viewport.updateAdaptiveSize();\n    }\n\n    transitTo(STATE_TYPE.IDLE);\n    viewport.updateCameraPosition();\n    triggerEvent(EVENTS.MOVE_END, e, isTrusted, {\n      direction: this.direction,\n    });\n  }\n}\n\nexport default AnimatingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DisabledState extends State {\n  public readonly type = STATE_TYPE.DISABLED;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onAnimationEnd(e: any, { transitTo }: FlickingContext): void {\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(e: any, { viewport, transitTo }: FlickingContext): void {\n    // Can stop Axes's change event\n    e.stop();\n\n    // Should update axes position as it's already changed at this moment\n    viewport.updateAxesPosition(viewport.getCameraPosition());\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(e: any, { transitTo }: FlickingContext): void {\n    // This is needed when stopped hold start event\n    if (e.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"../states/State\";\nimport { AxesEventType, ValueOf, FlickingContext, StateType } from \"../types\";\nimport { AXES_EVENTS, STATE_TYPE } from \"../consts\";\nimport IdleState from \"../states/IdleState\";\nimport HoldingState from \"../states/HoldingState\";\nimport DraggingState from \"../states/DraggingState\";\nimport AnimatingState from \"../states/AnimatingState\";\nimport DisabledState from \"../states/DisabledState\";\n\nclass StateMachine {\n  private state: State = new IdleState();\n\n  public fire(eventType: ValueOf<AxesEventType>, e: any, context: FlickingContext) {\n    const currentState = this.state;\n    switch (eventType) {\n      case AXES_EVENTS.HOLD:\n        currentState.onHold(e, context);\n        break;\n      case AXES_EVENTS.CHANGE:\n        currentState.onChange(e, context);\n        break;\n      case AXES_EVENTS.RELEASE:\n        currentState.onRelease(e, context);\n        break;\n      case AXES_EVENTS.ANIMATION_END:\n        currentState.onAnimationEnd(e, context);\n        break;\n      case AXES_EVENTS.FINISH:\n        currentState.onFinish(e, context);\n        break;\n    }\n  }\n\n  public getState(): State {\n    return this.state;\n  }\n\n  public transitTo = (nextStateType: ValueOf<StateType>): State => {\n    const currentState = this.state;\n\n    if (currentState.type !== nextStateType) {\n      let nextState: State;\n\n      switch (nextStateType) {\n        case STATE_TYPE.IDLE:\n          nextState = new IdleState();\n          break;\n        case STATE_TYPE.HOLDING:\n          nextState = new HoldingState();\n          break;\n        case STATE_TYPE.DRAGGING:\n          nextState = new DraggingState();\n          break;\n        case STATE_TYPE.ANIMATING:\n          nextState = new AnimatingState();\n          break;\n        case STATE_TYPE.DISABLED:\n          nextState = new DisabledState();\n          break;\n      }\n\n      currentState.onExit(nextState!);\n      nextState!.onEnter(currentState);\n\n      this.state = nextState!;\n    }\n    return this.state;\n  }\n}\n\nexport default StateMachine;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { MoveTypeStringOption, MoveTypeContext, DestinationInfo } from \"../types\";\nimport Panel from \"../components/Panel\";\nimport { EVENTS } from \"../consts\";\n\nabstract class MoveType {\n  protected readonly abstract type: string;\n\n  public abstract findTargetPanel(ctx: MoveTypeContext): DestinationInfo;\n\n  public is(type: MoveTypeStringOption): boolean {\n    return type === this.type;\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    const viewport = ctx.viewport;\n    const options = viewport.options;\n\n    const panel = options.circular\n      ? this.findRestorePanelInCircularMode(ctx)\n      : viewport.getCurrentPanel()!;\n\n    return {\n      panel,\n      destPos: viewport.findEstimatedPosition(panel),\n      duration: options.duration,\n      eventType: EVENTS.RESTORE,\n    };\n  }\n\n  public findPanelWhenInterrupted(ctx: MoveTypeContext): DestinationInfo {\n    const { state, viewport } = ctx;\n    const targetPanel = state.targetPanel!;\n\n    return {\n      panel: targetPanel,\n      destPos: viewport.findEstimatedPosition(targetPanel),\n      duration: viewport.options.duration,\n      eventType: \"\",\n    };\n  }\n\n  // Calculate minimum distance to \"change\" panel\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const relativeAnchorPosition = currentPanel.getRelativeAnchorPosition();\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |--------|--------------|\n     * [][      |<-Anchor    ][] <- Panel + Half-Gap\n     */\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanel.getSize() - relativeAnchorPosition + halfGap\n      : relativeAnchorPosition + halfGap;\n\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    return minimumDistanceToChange;\n  }\n\n  private findRestorePanelInCircularMode(ctx: MoveTypeContext): Panel {\n    const viewport = ctx.viewport;\n    const originalPanel = viewport.getCurrentPanel()!.getOriginalPanel();\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = originalPanel.getIdenticalPanels()[1];\n    const lapped = Math.abs(originalPanel.getAnchorPosition() - hangerPosition)\n      > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n\n    return (!ctx.isNextDirection && lapped)\n      ? firstClonedPanel\n      : originalPanel;\n  }\n}\n\nexport default MoveType;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport MoveType from \"./MoveType\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { clamp } from \"../utils\";\n\nclass Snap extends MoveType {\n  protected readonly type: string = MOVE_TYPE.SNAP;\n  protected count: number;\n\n  constructor(count: number) {\n    super();\n    this.count = count;\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, axesEvent, swipeDistance } = ctx;\n    const snapCount = this.count;\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const currentPanel = viewport.getCurrentPanel()!;\n    const nearestPanel = viewport.getNearestPanel()!;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const nearestIsCurrent = nearestPanel.getIndex() === currentPanel.getIndex();\n\n    // This can happen when bounce is 0\n    const shouldMoveWhenBounceIs0 = viewport.canSetBoundMode() && nearestIsCurrent;\n    const shouldMoveToAdjacent = !viewport.isOutOfBound()\n      && (swipeDistance <= minimumDistanceToChange || shouldMoveWhenBounceIs0);\n\n    if (snapCount > 1 && eventDelta > minimumDistanceToChange) {\n      return this.findSnappedPanel(ctx);\n    } else if (shouldMoveToAdjacent) {\n      return this.findAdjacentPanel(ctx);\n    } else {\n      return {\n        panel: nearestPanel,\n        duration: viewport.options.duration,\n        destPos: viewport.findEstimatedPosition(nearestPanel),\n        // As swipeDistance holds mouse/touch position change regardless of bounce option value\n        // swipDistance > minimumDistanceToChange can happen in bounce area\n        // Second condition is for handling that.\n        eventType: (swipeDistance <= minimumDistanceToChange)\n          || (viewport.isOutOfBound() && nearestIsCurrent)\n          ? EVENTS.RESTORE\n          : EVENTS.CHANGE,\n      };\n    }\n  }\n\n  protected findSnappedPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, viewport, state, isNextDirection } = ctx;\n\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const snapCount = this.count;\n    const options = viewport.options;\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const halfGap = options.gap / 2;\n    const estimatedHangerPos = axesEvent.destPos.flick + viewport.getRelativeHangerPosition();\n\n    let panelToMove = viewport.getNearestPanel()!;\n    let cycleIndex = panelToMove.getCloneIndex() + 1; // 0(original) or 1(clone)\n    let passedPanelCount = 0;\n\n    while (passedPanelCount < snapCount) {\n      // Since panelToMove holds also cloned panels, we should use original panel's position\n      const originalPanel = panelToMove.getOriginalPanel();\n      const panelPosition = originalPanel.getPosition() + cycleIndex * scrollAreaSize;\n      const panelSize = originalPanel.getSize();\n\n      const panelNextPosition = panelPosition + panelSize + halfGap;\n      const panelPrevPosition = panelPosition - halfGap;\n\n      // Current panelToMove contains destPos\n      if (\n        (isNextDirection && panelNextPosition > estimatedHangerPos)\n        || (!isNextDirection && panelPrevPosition < estimatedHangerPos)\n      ) {\n        break;\n      }\n\n      const siblingPanel = isNextDirection\n        ? panelToMove.nextSibling\n        : panelToMove.prevSibling;\n      if (!siblingPanel) {\n        break;\n      }\n\n      const panelIndex = panelToMove.getIndex();\n      const siblingIndex = siblingPanel.getIndex();\n      if ((isNextDirection && siblingIndex <= panelIndex)\n        || (!isNextDirection && siblingIndex >= panelIndex)\n      ) {\n        cycleIndex = isNextDirection\n          ? cycleIndex + 1\n          : cycleIndex - 1;\n      }\n      panelToMove = siblingPanel;\n      passedPanelCount += 1;\n    }\n\n    const originalPosition = panelToMove.getOriginalPanel().getPosition();\n\n    if (cycleIndex !== 0) {\n      panelToMove = panelToMove.clone(panelToMove.getCloneIndex(), true);\n      panelToMove.setPosition(originalPosition + cycleIndex * scrollAreaSize);\n    }\n\n    const defaultDuration = viewport.options.duration;\n    const duration = clamp(axesEvent.duration, defaultDuration, defaultDuration * passedPanelCount);\n\n    return {\n      panel: panelToMove,\n      destPos: viewport.findEstimatedPosition(panelToMove),\n      duration,\n      eventType: Math.max(eventDelta, state.delta) > minimumDistanceToChange\n        ? EVENTS.CHANGE\n        : EVENTS.RESTORE,\n    };\n  }\n\n  private findAdjacentPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentIndex = viewport.getCurrentIndex();\n    const currentPanel = viewport.panelManager.get(currentIndex)!;\n    const hangerPosition = viewport.getHangerPosition();\n    const scrollArea = viewport.getScrollArea();\n\n    const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n    const lapped = options.circular\n      && (Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n        > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition));\n\n    // If lapped in circular mode, use first cloned panel as base panel\n    const basePanel = lapped\n      ? firstClonedPanel\n      : currentPanel;\n    const basePosition = basePanel.getPosition();\n\n    const adjacentPanel = isNextDirection\n      ? basePanel.nextSibling\n      : basePanel.prevSibling;\n\n    const eventType = adjacentPanel\n      ? EVENTS.CHANGE\n      : EVENTS.RESTORE;\n    const panelToMove = adjacentPanel\n      ? adjacentPanel\n      : basePanel;\n    const targetRelativeAnchorPosition = panelToMove.getRelativeAnchorPosition();\n\n    const estimatedPanelPosition = options.circular\n      ? isNextDirection\n        ? basePosition + basePanel.getSize() + targetRelativeAnchorPosition + options.gap\n        : basePosition - (panelToMove.getSize() - targetRelativeAnchorPosition) - options.gap\n      : panelToMove.getAnchorPosition();\n    const estimatedPosition = estimatedPanelPosition - viewport.getRelativeHangerPosition();\n    const destPos = viewport.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return {\n      panel: panelToMove,\n      destPos,\n      duration: options.duration,\n      eventType,\n    };\n  }\n}\n\nexport default Snap;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Snap from \"./Snap\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { circulate, clamp } from \"../utils\";\n\nclass FreeScroll extends Snap {\n  protected readonly type: string = MOVE_TYPE.FREE_SCROLL;\n\n  constructor() {\n    // Set snap count to Infinity\n    super(Infinity);\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, state, viewport } = ctx;\n    const destPos = axesEvent.destPos.flick;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const scrollArea = viewport.getScrollArea();\n    const currentPanel = viewport.getCurrentPanel()!;\n    const options = viewport.options;\n\n    const delta = Math.abs(axesEvent.delta.flick + state.delta);\n    if (delta > minimumDistanceToChange) {\n      const destInfo = super.findSnappedPanel(ctx);\n\n      destInfo.duration = axesEvent.duration;\n      destInfo.destPos = destPos;\n      destInfo.eventType = !options.circular && destInfo.panel === currentPanel\n        ? \"\"\n        : EVENTS.CHANGE;\n\n      return destInfo;\n    } else {\n      let estimatedPosition = options.circular\n        ? circulate(destPos, scrollArea.prev, scrollArea.next, false)\n        : destPos;\n      estimatedPosition = clamp(estimatedPosition, scrollArea.prev, scrollArea.next);\n      estimatedPosition += viewport.getRelativeHangerPosition();\n\n      const estimatedPanel = viewport.findNearestPanelAt(estimatedPosition)!;\n\n      return {\n        panel: estimatedPanel,\n        destPos,\n        duration: axesEvent.duration,\n        eventType: \"\",\n      };\n    }\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    return this.findTargetPanel(ctx);\n  }\n\n  public findPanelWhenInterrupted(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport } = ctx;\n\n    return {\n      panel: viewport.getNearestPanel()!,\n      destPos: viewport.getCameraPosition(),\n      duration: 0,\n      eventType: \"\",\n    };\n  }\n\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const lastPosition = viewport.stateMachine.getState().lastPosition;\n    const currentPanelPosition = currentPanel.getPosition();\n\n    // As camera can stop anywhere in free scroll mode,\n    // minimumDistanceToChange should be calculated differently.\n    // Ref #191(https://github.com/naver/egjs-flicking/issues/191)\n    const lastHangerPosition = lastPosition + viewport.getRelativeHangerPosition();\n\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanelPosition + currentPanel.getSize() - lastHangerPosition + halfGap\n      : lastHangerPosition - currentPanelPosition + halfGap;\n    minimumDistanceToChange = Math.abs(minimumDistanceToChange % scrollAreaSize);\n\n    return Math.min(minimumDistanceToChange, scrollAreaSize - minimumDistanceToChange);\n  }\n}\n\nexport default FreeScroll;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes, { PanInput } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport Panel from \"./Panel\";\nimport PanelManager from \"./PanelManager\";\nimport StateMachine from \"./StateMachine\";\nimport MoveType from \"../moves/MoveType\";\nimport { FlickingOptions, FlickingPanel, FlickingStatus, ElementLike, EventType, TriggerCallback, NeedPanelEvent, FlickingEvent, MoveTypeObjectOption, OriginalStyle, Plugin, DestroyOption, BoundingBox } from \"../types\";\nimport { DEFAULT_VIEWPORT_CSS, DEFAULT_CAMERA_CSS, TRANSFORM, DEFAULT_OPTIONS, EVENTS, DIRECTION, STATE_TYPE, MOVE_TYPE } from \"../consts\";\nimport { clamp, applyCSS, toArray, parseArithmeticExpression, isBetween, isArray, parseElement, hasClass, restoreStyle, circulate, findIndex, getBbox } from \"../utils\";\nimport Snap from \"../moves/Snap\";\nimport FreeScroll from \"../moves/FreeScroll\";\n\nexport default class Viewport {\n  public options: FlickingOptions;\n  public stateMachine: StateMachine;\n  public panelManager: PanelManager;\n  public moveType: MoveType;\n\n  private flicking: Flicking;\n  private axes: Axes;\n  private panInput: PanInput;\n\n  private viewportElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  private triggerEvent: Flicking[\"triggerEvent\"];\n  private axesHandlers: { [key: string]: any };\n\n  private currentPanel: Panel | undefined;\n  private nearestPanel: Panel | undefined;\n  private visiblePanels: Panel[];\n\n  private plugins: Plugin[] = [];\n  private panelBboxes: { [className: string]: BoundingBox };\n  private state: {\n    size: number;\n    position: number;\n    panelMaintainRatio: number;\n    relativeHangerPosition: number;\n    positionOffset: number;\n    scrollArea: {\n      prev: number;\n      next: number;\n    };\n    translate: {\n      name: string,\n      has3d: boolean,\n    };\n    infiniteThreshold: number;\n    checkedIndexes: Array<[number, number]>;\n    isAdaptiveCached: boolean;\n    isViewportGiven: boolean;\n    isCameraGiven: boolean;\n    originalViewportStyle: OriginalStyle;\n    originalCameraStyle: OriginalStyle;\n    cachedBbox: BoundingBox | null;\n  };\n\n  constructor(\n    flicking: Flicking,\n    options: FlickingOptions,\n    triggerEvent: Flicking[\"triggerEvent\"],\n  ) {\n    this.flicking = flicking;\n    this.triggerEvent = triggerEvent;\n\n    this.state = {\n      size: 0,\n      position: 0,\n      panelMaintainRatio: 0,\n      relativeHangerPosition: 0,\n      positionOffset: 0,\n      scrollArea: {\n        prev: 0,\n        next: 0,\n      },\n      translate: TRANSFORM,\n      infiniteThreshold: 0,\n      checkedIndexes: [],\n      isAdaptiveCached: false,\n      isViewportGiven: false,\n      isCameraGiven: false,\n      originalViewportStyle: {\n        className: null,\n        style: null,\n      },\n      originalCameraStyle: {\n        className: null,\n        style: null,\n      },\n      cachedBbox: null,\n    };\n    this.options = options;\n    this.stateMachine = new StateMachine();\n    this.visiblePanels = [];\n    this.panelBboxes = {};\n\n    this.build();\n  }\n\n  public moveTo(\n    panel: Panel,\n    destPos: number,\n    eventType: EventType[\"CHANGE\"] | EventType[\"RESTORE\"] | \"\",\n    axesEvent: any,\n    duration: number = this.options.duration,\n  ): TriggerCallback {\n    const state = this.state;\n    const currentState = this.stateMachine.getState();\n    const currentPosition = state.position;\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const direction = destPos === currentPosition\n      ? null\n      : destPos > currentPosition\n        ? DIRECTION.NEXT\n        : DIRECTION.PREV;\n\n    let eventResult: TriggerCallback;\n    if (eventType === EVENTS.CHANGE) {\n      eventResult = this.triggerEvent(EVENTS.CHANGE, axesEvent, isTrusted, {\n        index: panel.getIndex(),\n        panel,\n        direction,\n      });\n    } else if (eventType === EVENTS.RESTORE) {\n      eventResult = this.triggerEvent(EVENTS.RESTORE, axesEvent, isTrusted);\n    } else {\n      eventResult = {\n        onSuccess(callback: () => void): TriggerCallback {\n          callback();\n          return this;\n        },\n        onStopped(): TriggerCallback {\n          return this;\n        },\n      };\n    }\n\n    eventResult.onSuccess(() => {\n      currentState.delta = 0;\n      currentState.lastPosition = this.getCameraPosition();\n      currentState.targetPanel = panel;\n      currentState.direction = destPos === currentPosition\n        ? null\n        : destPos > currentPosition\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      if (destPos === currentPosition) {\n        // no move\n        this.nearestPanel = panel;\n        this.currentPanel = panel;\n      }\n\n      if (axesEvent && axesEvent.setTo) {\n        // freeScroll only occurs in release events\n        axesEvent.setTo({ flick: destPos }, duration);\n      } else {\n        this.axes.setTo({ flick: destPos }, duration);\n      }\n    });\n\n    return eventResult;\n  }\n\n  public moveCamera(pos: number, axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const transform = state.translate.name;\n    const scrollArea = state.scrollArea;\n\n    // Update position & nearestPanel\n    if (options.circular && !isBetween(pos, scrollArea.prev, scrollArea.next)) {\n      pos = circulate(pos, scrollArea.prev, scrollArea.next, false);\n    }\n    state.position = pos;\n    this.nearestPanel = this.findNearestPanel();\n    const nearestPanel = this.nearestPanel;\n    const originalNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    // From 0(panel position) to 1(panel position + panel size)\n    // When it's on gap area value will be (val > 1 || val < 0)\n    if (nearestPanel) {\n      const hangerPosition = this.getHangerPosition();\n      const panelPosition = nearestPanel.getPosition();\n      const panelSize = nearestPanel.getSize();\n      const halfGap = options.gap / 2;\n\n      // As panel's range is from panel position - half gap ~ panel pos + panel size + half gap\n      state.panelMaintainRatio = (hangerPosition - panelPosition + halfGap) / (panelSize + 2 * halfGap);\n    } else {\n      state.panelMaintainRatio = 0;\n    }\n\n    this.checkNeedPanel(axesEvent);\n\n    // Possibly modified after need panel, if it's looped\n    const modifiedNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    pos += (modifiedNearestPosition - originalNearestPosition);\n    state.position = pos;\n\n    this.updateVisiblePanels();\n\n    // Offset is needed to fix camera layer size in visible-only rendering mode\n    const posOffset = options.renderOnlyVisible\n      ? state.positionOffset\n      : 0;\n    const moveVector = options.horizontal\n      ? [-(pos - posOffset), 0] : [0, -(pos - posOffset)];\n    const moveCoord = moveVector.map(coord => `${Math.round(coord)}px`).join(\", \");\n\n    this.cameraElement.style[transform] = state.translate.has3d\n      ? `translate3d(${moveCoord}, 0px)`\n      : `translate(${moveCoord})`;\n  }\n\n  public stopCamera = (axesEvent: any): void => {\n    if (axesEvent && axesEvent.setTo) {\n      axesEvent.setTo({ flick: this.state.position }, 0);\n    }\n\n    this.stateMachine.transitTo(STATE_TYPE.IDLE);\n  }\n\n  public unCacheBbox(): void {\n    const state = this.state;\n    const options = this.options;\n\n    state.cachedBbox = null;\n    this.visiblePanels = [];\n\n    const viewportElement = this.viewportElement;\n    if (!options.horizontal) {\n      // Don't preserve previous width for adaptive resizing\n      viewportElement.style.width = \"\";\n    } else {\n      viewportElement.style.height = \"\";\n    }\n    state.isAdaptiveCached = false;\n    this.panelBboxes = {};\n  }\n\n  public resize(): void {\n    this.updateSize();\n    this.updateOriginalPanelPositions();\n    this.updateAdaptiveSize();\n    this.updateScrollArea();\n    this.updateClonePanels();\n    this.updateVisiblePanelPositions();\n    this.updateCameraPosition();\n    this.updatePlugins();\n  }\n\n  // Find nearest anchor from current hanger position\n  public findNearestPanel(): Panel | undefined {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const hangerPosition = this.getHangerPosition();\n\n    if (this.isOutOfBound()) {\n      const position = state.position;\n\n      return position <= state.scrollArea.prev\n        ? panelManager.firstPanel()\n        : panelManager.lastPanel();\n    }\n\n    return this.findNearestPanelAt(hangerPosition);\n  }\n\n  public findNearestPanelAt(position: number): Panel | undefined {\n    const panelManager = this.panelManager;\n\n    const allPanels = panelManager.allPanels();\n    let minimumDistance = Infinity;\n    let nearestPanel: Panel | undefined;\n\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const prevPosition = panel.getPosition();\n      const nextPosition = prevPosition + panel.getSize();\n\n      // Use shortest distance from panel's range\n      const distance = isBetween(position, prevPosition, nextPosition)\n        ? 0\n        : Math.min(\n          Math.abs(prevPosition - position),\n          Math.abs(nextPosition - position),\n        );\n\n      if (distance > minimumDistance) {\n        break;\n      } else if (distance === minimumDistance) {\n        const minimumAnchorDistance = Math.abs(position - nearestPanel!.getAnchorPosition());\n        const anchorDistance = Math.abs(position - panel.getAnchorPosition());\n\n        if (anchorDistance > minimumAnchorDistance) {\n          break;\n        }\n      }\n\n      minimumDistance = distance;\n      nearestPanel = panel;\n    }\n\n    return nearestPanel;\n  }\n\n  public findNearestIdenticalPanel(panel: Panel): Panel {\n    let nearest = panel;\n    let shortestDistance = Infinity;\n    const hangerPosition = this.getHangerPosition();\n\n    const identicals = panel.getIdenticalPanels();\n    identicals.forEach(identical => {\n      const anchorPosition = identical.getAnchorPosition();\n      const distance = Math.abs(anchorPosition - hangerPosition);\n\n      if (distance < shortestDistance) {\n        nearest = identical;\n        shortestDistance = distance;\n      }\n    });\n\n    return nearest;\n  }\n\n  // Find shortest camera position that distance is minimum\n  public findShortestPositionToPanel(panel: Panel): number {\n    const state = this.state;\n    const options = this.options;\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = this.getHangerPosition();\n    const distance = Math.abs(hangerPosition - anchorPosition);\n    const scrollAreaSize = state.scrollArea.next - state.scrollArea.prev;\n\n    if (!options.circular) {\n      const position = anchorPosition - state.relativeHangerPosition;\n      return this.canSetBoundMode()\n        ? clamp(position, state.scrollArea.prev, state.scrollArea.next)\n        : position;\n    } else {\n      // If going out of viewport border is more efficient way of moving, choose that position\n      return distance <= scrollAreaSize - distance\n        ? anchorPosition - state.relativeHangerPosition\n        : anchorPosition > hangerPosition\n          // PREV TO NEXT\n          ? anchorPosition - state.relativeHangerPosition - scrollAreaSize\n          // NEXT TO PREV\n          : anchorPosition - state.relativeHangerPosition + scrollAreaSize;\n    }\n  }\n\n  public findEstimatedPosition(panel: Panel): number {\n    const scrollArea = this.getScrollArea();\n\n    let estimatedPosition = panel.getAnchorPosition() - this.getRelativeHangerPosition();\n    estimatedPosition = this.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return estimatedPosition;\n  }\n\n  public addVisiblePanel(panel: Panel): void {\n    if (this.getVisibleIndexOf(panel) < 0) {\n      this.visiblePanels.push(panel);\n    }\n  }\n\n  public enable(): void {\n    this.panInput.enable();\n  }\n\n  public disable(): void {\n    this.panInput.disable();\n  }\n\n  public insert(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const lastIndex = this.panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const options = this.options;\n    const parsedElements = parseElement(element);\n\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const pushedIndex = this.panelManager.insert(index, panels);\n\n    // ...then calc bbox for all panels\n    this.resizePanels(panels);\n\n    if (!this.currentPanel) {\n      this.currentPanel = panels[0];\n      this.nearestPanel = panels[0];\n\n      const newCenterPanel = panels[0];\n      const newPanelPosition = this.findEstimatedPosition(newCenterPanel);\n      state.position = newPanelPosition;\n      this.updateAxesPosition(newPanelPosition);\n      state.panelMaintainRatio = (newCenterPanel.getRelativeAnchorPosition() + options.gap / 2) / (newCenterPanel.getSize() + options.gap);\n    }\n\n    // Update checked indexes in infinite mode\n    this.updateCheckedIndexes({ min: index, max: index });\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      if (index < min) {\n        // Push checked index\n        state.checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n      }\n    });\n\n    this.resize();\n\n    return panels;\n  }\n\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const lastIndex = panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const parsedElements = parseElement(element);\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const replacedPanels = panelManager.replace(index, panels);\n\n    replacedPanels.forEach(panel => {\n      const visibleIndex = this.getVisibleIndexOf(panel);\n      if (visibleIndex > -1) {\n        this.visiblePanels.splice(visibleIndex, 1);\n      }\n    });\n\n    // ...then calc bbox for all panels\n    this.resizePanels(panels);\n\n    const currentPanel = this.currentPanel;\n    const wasEmpty = !currentPanel;\n    if (wasEmpty) {\n      this.currentPanel = panels[0];\n      this.nearestPanel = panels[0];\n\n      const newCenterPanel = panels[0];\n      const newPanelPosition = this.findEstimatedPosition(newCenterPanel);\n      state.position = newPanelPosition;\n      this.updateAxesPosition(newPanelPosition);\n      state.panelMaintainRatio = (newCenterPanel.getRelativeAnchorPosition() + options.gap / 2) / (newCenterPanel.getSize() + options.gap);\n    } else if (isBetween(currentPanel!.getIndex(), index, index + panels.length - 1)) {\n      // Current panel is replaced\n      this.currentPanel = panelManager.get(currentPanel!.getIndex());\n    }\n\n    // Update checked indexes in infinite mode\n    this.updateCheckedIndexes({ min: index, max: index + panels.length - 1 });\n\n    this.resize();\n\n    return panels;\n  }\n\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    const state = this.state;\n    // Index should not below 0\n    index = Math.max(index, 0);\n\n    const panelManager = this.panelManager;\n    const currentIndex = this.getCurrentIndex();\n\n    const removedPanels = panelManager.remove(index, deleteCount);\n    if (isBetween(currentIndex, index, index + deleteCount - 1)) {\n      // Current panel is removed\n      // Use panel at removing index - 1 as new current panel if it exists\n      const newCurrentIndex = Math.max(index - 1, panelManager.getRange().min);\n      this.currentPanel = panelManager.get(newCurrentIndex);\n    }\n\n    // Update checked indexes in infinite mode\n    if (deleteCount > 0) {\n      // Check whether removing index will affect checked indexes\n      // Suppose index 0 is empty and removed index 1, then checked index 0 should be deleted and vice versa.\n      this.updateCheckedIndexes({ min: index - 1, max: index + deleteCount });\n      // Uncache visible panels to refresh panels\n      this.visiblePanels = [];\n    }\n\n    if (panelManager.getPanelCount() <= 0) {\n      this.currentPanel = undefined;\n      this.nearestPanel = undefined;\n    }\n\n    this.resize();\n\n    const scrollArea = state.scrollArea;\n    if (state.position < scrollArea.prev || state.position > scrollArea.next) {\n      const newPosition = circulate(state.position, scrollArea.prev, scrollArea.next, false);\n      this.moveCamera(newPosition);\n      this.updateAxesPosition(newPosition);\n    }\n\n    return removedPanels;\n  }\n\n  public updateAdaptiveSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const horizontal = options.horizontal;\n    const currentPanel = this.getCurrentPanel();\n\n    if (!currentPanel) {\n      return;\n    }\n\n    const shouldApplyAdaptive = options.adaptive || !state.isAdaptiveCached;\n    const viewportStyle = this.viewportElement.style;\n    if (shouldApplyAdaptive) {\n      let sizeToApply: number;\n      if (options.adaptive) {\n        const panelBbox = currentPanel.getBbox();\n\n        sizeToApply = horizontal ? panelBbox.height : panelBbox.width;\n      } else {\n        // Find minimum height of panels to maximum panel size\n        const maximumPanelSize = this.panelManager.originalPanels().reduce((maximum, panel) => {\n          const panelBbox = panel.getBbox();\n          return Math.max(maximum, horizontal ? panelBbox.height : panelBbox.width);\n        }, 0);\n\n        sizeToApply = maximumPanelSize;\n      }\n\n      if (!state.isAdaptiveCached) {\n        const viewportBbox = this.updateBbox();\n        sizeToApply = Math.max(sizeToApply, horizontal ? viewportBbox.height : viewportBbox.width);\n        state.isAdaptiveCached = true;\n      }\n\n      const viewportSize = `${sizeToApply}px`;\n      if (horizontal) {\n        viewportStyle.height = viewportSize;\n        state.cachedBbox!.height = sizeToApply;\n      } else {\n        viewportStyle.width = viewportSize;\n        state.cachedBbox!.width = sizeToApply;\n      }\n    }\n  }\n\n  // Update camera position after resizing\n  public updateCameraPosition(): void {\n    const state = this.state;\n    const currentPanel = this.getCurrentPanel();\n    const cameraPosition = this.getCameraPosition();\n    const currentState = this.stateMachine.getState();\n    const isFreeScroll = this.moveType.is(MOVE_TYPE.FREE_SCROLL);\n    const relativeHangerPosition = this.getRelativeHangerPosition();\n    const halfGap = this.options.gap / 2;\n\n    if (currentState.holding || currentState.playing) {\n      this.updateVisiblePanels();\n      return;\n    }\n\n    let newPosition: number;\n    if (isFreeScroll) {\n      const positionBounded = this.canSetBoundMode() && (cameraPosition === state.scrollArea.prev || cameraPosition === state.scrollArea.next);\n      const nearestPanel = this.getNearestPanel();\n\n      // Preserve camera position if it is bound to scroll area limit\n      newPosition = positionBounded || !nearestPanel\n        ? cameraPosition\n        : nearestPanel.getPosition() - halfGap + (nearestPanel.getSize() + 2 * halfGap) * state.panelMaintainRatio - relativeHangerPosition;\n    } else {\n      newPosition = currentPanel\n        ? currentPanel.getAnchorPosition() - relativeHangerPosition\n        : cameraPosition;\n    }\n\n    if (this.canSetBoundMode()) {\n      newPosition = clamp(newPosition, state.scrollArea.prev, state.scrollArea.next);\n    }\n\n    // Pause & resume axes to prevent axes's \"change\" event triggered\n    // This should be done before moveCamera, as moveCamera can trigger needPanel\n    this.updateAxesPosition(newPosition);\n\n    this.moveCamera(newPosition);\n  }\n\n  public updateBbox(): BoundingBox {\n    const state = this.state;\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n\n    if (!state.cachedBbox) {\n      state.cachedBbox = getBbox(viewportElement, options.useOffset);\n    }\n\n    return state.cachedBbox!;\n  }\n\n  public updatePlugins(): void {\n    // update for resize\n    this.plugins.forEach(plugin => {\n      plugin.update && plugin.update(this.flicking);\n    });\n  }\n\n  public destroy(option: Partial<DestroyOption>): void {\n    const state = this.state;\n    const wrapper = this.flicking.getElement();\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const originalPanels = this.panelManager.originalPanels();\n\n    this.removePlugins(this.plugins);\n    if (!option.preserveUI) {\n      restoreStyle(viewportElement, state.originalViewportStyle);\n      restoreStyle(cameraElement, state.originalCameraStyle);\n\n      if (!state.isCameraGiven && !this.options.renderExternal) {\n        const topmostElement = state.isViewportGiven\n          ? viewportElement\n          : wrapper;\n        const deletingElement = state.isViewportGiven\n          ? cameraElement\n          : viewportElement;\n\n        originalPanels.forEach(panel => {\n          topmostElement.appendChild(panel.getElement());\n        });\n\n        topmostElement.removeChild(deletingElement);\n      }\n    }\n\n    this.axes.destroy();\n    this.panInput.destroy();\n\n    originalPanels.forEach(panel => { panel.destroy(option); });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public restore(status: FlickingStatus): void {\n    const panels = status.panels;\n    const defaultIndex = this.options.defaultIndex;\n    const cameraElement = this.cameraElement;\n    const panelManager = this.panelManager;\n\n    // Restore index\n    cameraElement.innerHTML = panels.map(panel => panel.html).join(\"\");\n\n    // Create panels first\n    this.refreshPanels();\n    const createdPanels = panelManager.originalPanels();\n\n    // ...then order it by its index\n    const orderedPanels: Panel[] = [];\n    panels.forEach((panel, idx) => {\n      const createdPanel = createdPanels[idx];\n      createdPanel.setIndex(panel.index);\n      orderedPanels[panel.index] = createdPanel;\n    });\n    panelManager.replacePanels(orderedPanels, []);\n    panelManager.setCloneCount(0); // No clones at this point\n\n    const panelCount = panelManager.getPanelCount();\n    if (panelCount > 0) {\n      this.currentPanel = panelManager.get(status.index)\n        || panelManager.get(defaultIndex)\n        || panelManager.firstPanel();\n      this.nearestPanel = this.currentPanel;\n    } else {\n      this.currentPanel = undefined;\n      this.nearestPanel = undefined;\n    }\n    this.visiblePanels = orderedPanels.filter(panel => Boolean(panel));\n\n    this.resize();\n\n    this.axes.setTo({ flick: status.position }, 0);\n    this.moveCamera(status.position);\n  }\n\n  public calcVisiblePanels(): Panel[] {\n    const allPanels = this.panelManager.allPanels();\n    if (this.options.renderOnlyVisible) {\n      const cameraPos = this.getCameraPosition();\n      const viewportSize = this.getSize();\n      const basePanel = this.nearestPanel!;\n\n      const getNextPanel = (panel: Panel) => {\n        const nextPanel = panel.nextSibling;\n\n        if (nextPanel && nextPanel.getPosition() >= panel.getPosition()) {\n          return nextPanel;\n        } else {\n          return null;\n        }\n      };\n\n      const getPrevPanel = (panel: Panel) => {\n        const prevPanel = panel.prevSibling;\n\n        if (prevPanel && prevPanel.getPosition() <= panel.getPosition()) {\n          return prevPanel;\n        } else {\n          return null;\n        }\n      };\n\n      const isOutOfBoundNext = (panel: Panel) => panel.getPosition() >= cameraPos + viewportSize;\n      const isOutOfBoundPrev = (panel: Panel) => panel.getPosition() + panel.getSize() <= cameraPos;\n\n      const getVisiblePanels = (\n        panel: Panel,\n        getNext: (panel: Panel) => Panel | null,\n        isOutOfViewport: (panel: Panel) => boolean,\n      ): Panel[] => {\n        const visiblePanels: Panel[] = [];\n\n        let lastPanel = panel;\n        while (true) {\n          const nextPanel = getNext(lastPanel);\n          if (!nextPanel || isOutOfViewport(nextPanel)) {\n            break;\n          }\n          visiblePanels.push(nextPanel);\n          lastPanel = nextPanel;\n        }\n        return visiblePanels;\n      };\n\n      const panelCount = this.panelManager.getPanelCount();\n      const getAbsIndex = (panel: Panel) => panel.getIndex() + (panel.getCloneIndex() + 1) * panelCount;\n      const nextPanels = getVisiblePanels(basePanel, getNextPanel, isOutOfBoundNext);\n      const prevPanels = getVisiblePanels(basePanel, getPrevPanel, isOutOfBoundPrev);\n\n      return [basePanel, ...nextPanels, ...prevPanels].sort((panel1, panel2) => getAbsIndex(panel1) - getAbsIndex(panel2));\n    } else {\n      return allPanels.filter(panel => {\n        const outsetProgress = panel.getOutsetProgress();\n\n        return outsetProgress > -1 && outsetProgress < 1;\n      });\n    }\n  }\n\n  public getCurrentPanel(): Panel | undefined {\n    return this.currentPanel;\n  }\n\n  public getCurrentIndex(): number {\n    const currentPanel = this.currentPanel;\n\n    return currentPanel\n      ? currentPanel.getIndex()\n      : -1;\n  }\n\n  public getNearestPanel(): Panel | undefined {\n    return this.nearestPanel;\n  }\n\n  // Get progress from nearest panel\n  public getCurrentProgress(): number {\n    const currentState = this.stateMachine.getState();\n    let nearestPanel = currentState.playing || currentState.holding\n      ? this.nearestPanel\n      : this.currentPanel;\n\n    const panelManager = this.panelManager;\n    if (!nearestPanel) {\n      // There're no panels\n      return NaN;\n    }\n    const { prev: prevRange, next: nextRange } = this.getScrollArea();\n    const cameraPosition = this.getCameraPosition();\n    const isOutOfBound = this.isOutOfBound();\n    let prevPanel = nearestPanel.prevSibling;\n    let nextPanel = nearestPanel.nextSibling;\n    let hangerPosition = this.getHangerPosition();\n    let nearestAnchorPos = nearestPanel.getAnchorPosition();\n\n    if (\n      isOutOfBound\n      && prevPanel\n      && nextPanel\n      && cameraPosition < nextRange\n      // On the basis of anchor, prevPanel is nearestPanel.\n      && (hangerPosition - prevPanel.getAnchorPosition() < nearestAnchorPos - hangerPosition)\n    ) {\n      nearestPanel = prevPanel;\n      nextPanel = nearestPanel.nextSibling;\n      prevPanel = nearestPanel.prevSibling;\n      nearestAnchorPos = nearestPanel.getAnchorPosition();\n    }\n    const nearestIndex = nearestPanel.getIndex() + (nearestPanel.getCloneIndex() + 1) * panelManager.getPanelCount();\n    const nearestSize = nearestPanel.getSize();\n\n    if (isOutOfBound) {\n      const relativeHangerPosition = this.getRelativeHangerPosition();\n\n      if (nearestAnchorPos > nextRange + relativeHangerPosition) {\n        // next bounce area: hangerPosition - relativeHangerPosition - nextRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - nextRange;\n      } else if (nearestAnchorPos < prevRange + relativeHangerPosition) {\n        // prev bounce area: hangerPosition - relativeHangerPosition - prevRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - prevRange;\n      }\n    }\n    const hangerIsNextToNearestPanel = hangerPosition >= nearestAnchorPos;\n    const gap = this.options.gap;\n\n    let basePosition = nearestAnchorPos;\n    let targetPosition = nearestAnchorPos;\n    if (hangerIsNextToNearestPanel) {\n      targetPosition = nextPanel\n        ? nextPanel.getAnchorPosition()\n        : nearestAnchorPos + nearestSize + gap;\n    } else {\n      basePosition = prevPanel\n        ? prevPanel.getAnchorPosition()\n        : nearestAnchorPos - nearestSize - gap;\n    }\n\n    const progressBetween = (hangerPosition - basePosition) / (targetPosition - basePosition);\n    const startIndex = hangerIsNextToNearestPanel\n      ? nearestIndex\n      : prevPanel\n        ? prevPanel.getIndex()\n        : nearestIndex - 1;\n\n    return startIndex + progressBetween;\n  }\n\n  // Update axes flick position without triggering event\n  public updateAxesPosition(position: number) {\n    const axes = this.axes;\n    axes.off();\n    axes.setTo({\n      flick: position,\n    }, 0);\n    axes.on(this.axesHandlers);\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getScrollArea(): { prev: number, next: number } {\n    return this.state.scrollArea;\n  }\n\n  public isOutOfBound(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const scrollArea = state.scrollArea;\n\n    return !options.circular\n      && options.bound\n      && (state.position <= scrollArea.prev || state.position >= scrollArea.next);\n  }\n\n  public canSetBoundMode(): boolean {\n    const options = this.options;\n\n    return options.bound && !options.circular;\n  }\n\n  public getViewportElement(): HTMLElement {\n    return this.viewportElement;\n  }\n\n  public getCameraElement(): HTMLElement {\n    return this.cameraElement;\n  }\n\n  public getScrollAreaSize(): number {\n    const scrollArea = this.state.scrollArea;\n\n    return scrollArea.next - scrollArea.prev;\n  }\n\n  public getRelativeHangerPosition(): number {\n    return this.state.relativeHangerPosition;\n  }\n\n  public getHangerPosition(): number {\n    return this.state.position + this.state.relativeHangerPosition;\n  }\n\n  public getCameraPosition(): number {\n    return this.state.position;\n  }\n\n  public getPositionOffset(): number {\n    return this.state.positionOffset;\n  }\n\n  public getCheckedIndexes(): Array<[number, number]> {\n    return this.state.checkedIndexes;\n  }\n\n  public getVisiblePanels(): Panel[] {\n    return this.visiblePanels;\n  }\n\n  public setCurrentPanel(panel: Panel): void {\n    this.currentPanel = panel;\n  }\n\n  public setLastIndex(index: number): void {\n    const currentPanel = this.currentPanel;\n    const panelManager = this.panelManager;\n\n    panelManager.setLastIndex(index);\n    if (currentPanel && currentPanel.getIndex() > index) {\n      this.currentPanel = panelManager.lastPanel();\n    }\n\n    this.resize();\n  }\n\n  public setVisiblePanels(panels: Panel[]): void {\n    this.visiblePanels = panels;\n  }\n\n  public connectAxesHandler(handlers: { [key: string]: (event: { [key: string]: any; }) => any }): void {\n    const axes = this.axes;\n\n    this.axesHandlers = handlers;\n    axes.on(handlers);\n  }\n\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    const newPlugins = ([] as Plugin[]).concat(plugins);\n\n    newPlugins.forEach(plugin => {\n      plugin.init(this.flicking);\n    });\n\n    this.plugins = this.plugins.concat(newPlugins);\n    return this;\n  }\n\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    const currentPlugins = this.plugins;\n    const removedPlugins = ([] as Plugin[]).concat(plugins);\n\n    removedPlugins.forEach(plugin => {\n      const index = currentPlugins.indexOf(plugin);\n\n      if (index > -1) {\n        currentPlugins.splice(index, 1);\n      }\n\n      plugin.destroy(this.flicking);\n    });\n    return this;\n  }\n\n  public updateCheckedIndexes(changedRange: { min: number, max: number }): void {\n    const state = this.state;\n\n    let removed = 0;\n    state.checkedIndexes.concat().forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (changedRange.min <= max && changedRange.max >= min) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx - removed, 1);\n        removed++;\n      }\n    });\n  }\n\n  public appendUncachedPanelElements(panels: Panel[]): void {\n    const options = this.options;\n    const fragment = document.createDocumentFragment();\n\n    if (options.isEqualSize) {\n      const prevVisiblePanels = this.visiblePanels;\n      const equalSizeClasses = options.isEqualSize as string[]; // for readability\n      const cached: { [className: string]: boolean } = {};\n\n      this.visiblePanels = [];\n\n      Object.keys(this.panelBboxes).forEach(className => {\n        cached[className] = true;\n      });\n\n      panels.forEach(panel => {\n        const overlappedClass = panel.getOverlappedClass(equalSizeClasses);\n        if (overlappedClass && !cached[overlappedClass]) {\n          if (!options.renderExternal) {\n            fragment.appendChild(panel.getElement());\n          }\n          this.visiblePanels.push(panel);\n          cached[overlappedClass] = true;\n        } else if (!overlappedClass) {\n          if (!options.renderExternal) {\n            fragment.appendChild(panel.getElement());\n          }\n          this.visiblePanels.push(panel);\n        }\n      });\n      prevVisiblePanels.forEach(panel => {\n        this.addVisiblePanel(panel);\n      });\n    } else {\n      if (!options.renderExternal) {\n        panels.forEach(panel => fragment.appendChild(panel.getElement()));\n      }\n      this.visiblePanels = panels.filter(panel => Boolean(panel));\n    }\n\n    if (!options.renderExternal) {\n      this.cameraElement.appendChild(fragment);\n    }\n  }\n\n  private updateClonePanels() {\n    const panelManager = this.panelManager;\n\n    // Clone panels in circular mode\n    if (this.options.circular && panelManager.getPanelCount() > 0) {\n      this.clonePanels();\n      this.updateClonedPanelPositions();\n    }\n    panelManager.chainAllPanels();\n  }\n\n  private getVisibleIndexOf(panel: Panel): number {\n    return findIndex(this.visiblePanels, visiblePanel => visiblePanel === panel);\n  }\n\n  private build(): void {\n    this.setElements();\n    this.applyCSSValue();\n    this.setMoveType();\n    this.setAxesInstance();\n    this.refreshPanels();\n    this.setDefaultPanel();\n    this.resize();\n    this.moveToDefaultPanel();\n  }\n\n  private setElements(): void {\n    const state = this.state;\n    const options = this.options;\n    const wrapper = this.flicking.getElement();\n    const classPrefix = options.classPrefix;\n\n    const viewportCandidate = wrapper.children[0] as HTMLElement;\n    const hasViewportElement = viewportCandidate && hasClass(viewportCandidate, `${classPrefix}-viewport`);\n\n    const viewportElement = hasViewportElement\n      ? viewportCandidate\n      : document.createElement(\"div\");\n\n    const cameraCandidate = hasViewportElement\n      ? viewportElement.children[0] as HTMLElement\n      : wrapper.children[0] as HTMLElement;\n    const hasCameraElement = cameraCandidate && hasClass(cameraCandidate, `${classPrefix}-camera`);\n\n    const cameraElement = hasCameraElement\n      ? cameraCandidate\n      : document.createElement(\"div\");\n\n    if (!hasCameraElement) {\n      cameraElement.className = `${classPrefix}-camera`;\n\n      const panelElements = hasViewportElement\n        ? viewportElement.children\n        : wrapper.children;\n\n      // Make all panels to be a child of camera element\n      // wrapper <- viewport <- camera <- panels[1...n]\n      toArray(panelElements).forEach(child => {\n        cameraElement.appendChild(child);\n      });\n    } else {\n      state.originalCameraStyle = {\n        className: cameraElement.getAttribute(\"class\"),\n        style: cameraElement.getAttribute(\"style\"),\n      };\n    }\n\n    if (!hasViewportElement) {\n      viewportElement.className = `${classPrefix}-viewport`;\n\n      // Add viewport element to wrapper\n      wrapper.appendChild(viewportElement);\n    } else {\n      state.originalViewportStyle = {\n        className: viewportElement.getAttribute(\"class\"),\n        style: viewportElement.getAttribute(\"style\"),\n      };\n    }\n\n    if (!hasCameraElement || !hasViewportElement) {\n      viewportElement.appendChild(cameraElement);\n    }\n\n    this.viewportElement = viewportElement;\n    this.cameraElement = cameraElement;\n    state.isViewportGiven = hasViewportElement;\n    state.isCameraGiven = hasCameraElement;\n  }\n\n  private applyCSSValue(): void {\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const viewportStyle = this.viewportElement.style;\n\n    // Set default css values for each element\n    applyCSS(viewportElement, DEFAULT_VIEWPORT_CSS);\n    applyCSS(cameraElement, DEFAULT_CAMERA_CSS);\n\n    viewportElement.style.zIndex = `${options.zIndex}`;\n    if (options.horizontal) {\n      viewportStyle.minHeight = \"100%\";\n      viewportStyle.width = \"100%\";\n    } else {\n      viewportStyle.minWidth = \"100%\";\n      viewportStyle.height = \"100%\";\n    }\n    if (options.overflow) {\n      viewportStyle.overflow = \"visible\";\n    }\n\n    this.panelManager = new PanelManager(this.cameraElement, options);\n  }\n\n  private setMoveType(): void {\n    const moveType = this.options.moveType as MoveTypeObjectOption;\n\n    switch (moveType.type) {\n      case MOVE_TYPE.SNAP:\n        this.moveType = new Snap(moveType.count);\n        break;\n      case MOVE_TYPE.FREE_SCROLL:\n        this.moveType = new FreeScroll();\n        break;\n      default:\n        throw new Error(\"moveType is not correct!\");\n    }\n  }\n\n  private setAxesInstance(): void {\n    const state = this.state;\n    const options = this.options;\n\n    const scrollArea = state.scrollArea;\n    const horizontal = options.horizontal;\n\n    this.axes = new Axes({\n      flick: {\n        range: [scrollArea.prev, scrollArea.next],\n        circular: options.circular,\n        bounce: [0, 0], // will be updated in resize()\n      },\n    }, {\n      easing: options.panelEffect,\n      deceleration: options.deceleration,\n      interruptable: true,\n    });\n\n    this.panInput = new PanInput(this.viewportElement, {\n      inputType: options.inputType,\n      thresholdAngle: options.thresholdAngle,\n      iOSEdgeSwipeThreshold: options.iOSEdgeSwipeThreshold,\n      scale: options.horizontal ? [-1, 0] : [0, -1],\n    });\n\n    this.axes.connect(horizontal ? [\"flick\", \"\"] : [\"\", \"flick\"], this.panInput);\n  }\n\n  private refreshPanels(): void {\n    const panelManager = this.panelManager;\n    // Panel elements were attached to camera element by Flicking class\n    const panelElements = this.cameraElement.children;\n\n    // Initialize panels\n    const panels = toArray(panelElements).map(\n      (el: HTMLElement, idx: number) => new Panel(el, idx, this),\n    );\n\n    panelManager.replacePanels(panels, []);\n    this.visiblePanels = panels.filter(panel => Boolean(panel));\n  }\n\n  private setDefaultPanel(): void {\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const indexRange = this.panelManager.getRange();\n    const index = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n\n    this.currentPanel = panelManager.get(index);\n  }\n\n  private clonePanels() {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n\n    const gap = options.gap;\n    const viewportSize = state.size;\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    // There're no panels exist\n    if (!firstPanel) {\n      return;\n    }\n\n    // For each panels, clone itself while last panel's position + size is below viewport size\n    const panels = panelManager.originalPanels();\n    const reversedPanels = panels.concat().reverse();\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + gap;\n    const relativeAnchorPosition = firstPanel.getRelativeAnchorPosition();\n    const relativeHangerPosition = this.getRelativeHangerPosition();\n\n    const areaPrev = (relativeHangerPosition - relativeAnchorPosition) % sumOriginalPanelSize;\n    let sizeSum = 0;\n    let panelAtLeftBoundary!: Panel;\n    for (const panel of reversedPanels) {\n      if (!panel) {\n        continue;\n      }\n      sizeSum += panel.getSize() + gap;\n      if (sizeSum >= areaPrev) {\n        panelAtLeftBoundary = panel;\n        break;\n      }\n    }\n\n    const areaNext = (viewportSize - relativeHangerPosition + relativeAnchorPosition) % sumOriginalPanelSize;\n    sizeSum = 0;\n    let panelAtRightBoundary!: Panel;\n    for (const panel of panels) {\n      if (!panel) {\n        continue;\n      }\n      sizeSum += panel.getSize() + gap;\n      if (sizeSum >= areaNext) {\n        panelAtRightBoundary = panel;\n        break;\n      }\n    }\n\n    // Need one more set of clones on prev area of original panel 0\n    const needCloneOnPrev = panelAtLeftBoundary.getIndex() !== 0\n      && panelAtLeftBoundary.getIndex() <= panelAtRightBoundary.getIndex();\n\n    // Visible count of panel 0 on first screen\n    const panel0OnFirstscreen = Math.ceil((relativeHangerPosition + firstPanel.getSize() - relativeAnchorPosition) / sumOriginalPanelSize)\n      + Math.ceil((viewportSize - relativeHangerPosition + relativeAnchorPosition) / sumOriginalPanelSize)\n      - 1; // duplication\n\n    const cloneCount = panel0OnFirstscreen\n      + (needCloneOnPrev ? 1 : 0);\n    const prevCloneCount = panelManager.getCloneCount();\n\n    panelManager.setCloneCount(cloneCount);\n    if (options.renderExternal) {\n      return;\n    }\n\n    if (cloneCount > prevCloneCount) {\n      // should clone more\n      for (let cloneIndex = prevCloneCount; cloneIndex < cloneCount; cloneIndex++) {\n        const clones = panels.map(origPanel => origPanel.clone(cloneIndex));\n        const fragment = document.createDocumentFragment();\n        clones.forEach(panel => fragment.appendChild(panel.getElement()));\n\n        this.cameraElement.appendChild(fragment);\n        this.visiblePanels.push(...clones.filter(clone => Boolean(clone)));\n        panelManager.insertClones(cloneIndex, 0, clones);\n      }\n    } else if (cloneCount < prevCloneCount) {\n      // should remove some\n      panelManager.removeClonesAfter(cloneCount);\n    }\n  }\n\n  private moveToDefaultPanel(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const indexRange = this.panelManager.getRange();\n\n    const defaultIndex = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n    const defaultPanel = panelManager.get(defaultIndex);\n\n    let defaultPosition = 0;\n    if (defaultPanel) {\n      defaultPosition = defaultPanel.getAnchorPosition() - state.relativeHangerPosition;\n      defaultPosition = this.canSetBoundMode()\n        ? clamp(defaultPosition, state.scrollArea.prev, state.scrollArea.next)\n        : defaultPosition;\n    }\n\n    this.moveCamera(defaultPosition);\n    this.axes.setTo({ flick: defaultPosition }, 0);\n  }\n\n  private updateSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const panels = this.panelManager.originalPanels()\n      .filter(panel => Boolean(panel));\n    const bbox = this.updateBbox();\n\n    const prevSize = state.size;\n    // Update size & hanger position\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    if (prevSize !== state.size) {\n      state.relativeHangerPosition = parseArithmeticExpression(options.hanger, state.size);\n      state.infiniteThreshold = parseArithmeticExpression(options.infiniteThreshold, state.size);\n    }\n\n    if (panels.length <= 0) {\n      return;\n    }\n\n    this.resizePanels(panels);\n  }\n\n  private updateOriginalPanelPositions(): void {\n    const gap = this.options.gap;\n    const panelManager = this.panelManager;\n\n    const firstPanel = panelManager.firstPanel();\n    const panels = panelManager.originalPanels();\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const currentPanel = this.currentPanel!;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n    const scrollArea = this.state.scrollArea;\n\n    // Update panel position && fit to wrapper\n    let nextPanelPos = firstPanel.getPosition();\n    let maintainingPanel: Panel = firstPanel;\n    if (nearestPanel) {\n      // We should maintain nearestPanel's position\n      const looped = !isBetween(currentState.lastPosition + currentState.delta, scrollArea.prev, scrollArea.next);\n\n      maintainingPanel = looped\n        ? currentPanel\n        : nearestPanel;\n    } else if (firstPanel.getIndex() > 0) {\n      maintainingPanel = currentPanel;\n    }\n\n    const panelsBeforeMaintainPanel = panels.slice(0, maintainingPanel.getIndex() + (maintainingPanel.getCloneIndex() + 1) * panels.length);\n    const accumulatedSize = panelsBeforeMaintainPanel.reduce((total, panel) => {\n      return total + panel.getSize() + gap;\n    }, 0);\n\n    nextPanelPos = maintainingPanel.getPosition() - accumulatedSize;\n\n    panels.forEach(panel => {\n      const newPosition = nextPanelPos;\n      const panelSize = panel.getSize();\n\n      panel.setPosition(newPosition);\n      nextPanelPos += panelSize + gap;\n    });\n\n    if (!this.options.renderOnlyVisible) {\n      panels.forEach(panel => panel.setPositionCSS());\n    }\n  }\n\n  private updateClonedPanelPositions(): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const clonedPanels = panelManager.clonedPanels()\n      .reduce((allClones, clones) => [...allClones, ...clones], [])\n      .filter(panel => Boolean(panel));\n\n    const scrollArea = state.scrollArea;\n\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n    // Locate all cloned panels linearly first\n    for (const panel of clonedPanels) {\n      const origPanel = panel.getOriginalPanel();\n      const cloneIndex = panel.getCloneIndex();\n      const cloneBasePos = sumOriginalPanelSize * (cloneIndex + 1);\n      const clonedPanelPos = cloneBasePos + origPanel.getPosition();\n\n      panel.setPosition(clonedPanelPos);\n    }\n\n    let lastReplacePosition = firstPanel.getPosition();\n    // reverse() pollutes original array, so copy it with concat()\n    for (const panel of clonedPanels.concat().reverse()) {\n      const panelSize = panel.getSize();\n      const replacePosition = lastReplacePosition - panelSize - options.gap;\n\n      if (replacePosition + panelSize <= scrollArea.prev) {\n        // Replace is not meaningful, as it won't be seen in current scroll area\n        break;\n      }\n\n      panel.setPosition(replacePosition);\n      lastReplacePosition = replacePosition;\n    }\n\n    if (!this.options.renderOnlyVisible) {\n      clonedPanels.forEach(panel => {\n        panel.setPositionCSS();\n      });\n    }\n  }\n\n  private updateVisiblePanelPositions(): void {\n    if (this.options.renderOnlyVisible) {\n      this.visiblePanels.forEach(panel => {\n        panel.setPositionCSS(this.state.positionOffset);\n      });\n    }\n  }\n\n  private updateScrollArea(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const axes = this.axes;\n\n    // Set viewport scrollable area\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n    const relativeHangerPosition = state.relativeHangerPosition;\n\n    if (!firstPanel) {\n      state.scrollArea = {\n        prev: 0,\n        next: 0,\n      };\n    } else if (this.canSetBoundMode()) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition();\n\n      if (sumOriginalPanelSize >= state.size) {\n        state.scrollArea = {\n          prev: firstPanel.getPosition(),\n          next: lastPanel.getPosition() + lastPanel.getSize() - state.size,\n        };\n      } else {\n        // Find anchor position of set of the combined panels\n        const relAnchorPosOfCombined = parseArithmeticExpression(options.anchor, sumOriginalPanelSize);\n        const anchorPos = firstPanel.getPosition() + clamp(\n          relAnchorPosOfCombined,\n          sumOriginalPanelSize - (state.size - relativeHangerPosition),\n          relativeHangerPosition,\n        );\n\n        state.scrollArea = {\n          prev: anchorPos - relativeHangerPosition,\n          next: anchorPos - relativeHangerPosition,\n        };\n      }\n    } else if (options.circular) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n      // Maximum scroll extends to first clone sequence's first panel\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: sumOriginalPanelSize + firstPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    } else {\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: lastPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    }\n\n    const viewportSize = state.size;\n    const bounce = options.bounce;\n\n    let parsedBounce: number[];\n    if (isArray(bounce)) {\n      parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, viewportSize, DEFAULT_OPTIONS.bounce as number));\n    } else {\n      const parsedVal = parseArithmeticExpression(bounce as number | string, viewportSize, DEFAULT_OPTIONS.bounce as number);\n      parsedBounce = [parsedVal, parsedVal];\n    }\n\n    // Update axes range and bounce\n    const flick = axes.axis.flick;\n    flick.range = [state.scrollArea.prev, state.scrollArea.next];\n    flick.bounce = parsedBounce;\n  }\n\n  private checkNeedPanel(axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentPanel = this.currentPanel;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n\n    if (!options.infinite) {\n      return;\n    }\n\n    const gap = options.gap;\n    const infiniteThreshold = state.infiniteThreshold;\n    const maxLastIndex = panelManager.getLastIndex();\n\n    if (maxLastIndex < 0) {\n      return;\n    }\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      this.triggerNeedPanel({\n        axesEvent,\n        siblingPanel: null,\n        direction: null,\n        indexRange: {\n          min: 0,\n          max: maxLastIndex,\n          length: maxLastIndex + 1,\n        },\n      });\n      return;\n    }\n\n    const originalNearestPosition = nearestPanel.getPosition();\n\n    // Check next direction\n    let checkingPanel: Panel | null = !currentState.holding && !currentState.playing\n      ? currentPanel\n      : nearestPanel;\n\n    while (checkingPanel) {\n      const currentIndex = checkingPanel.getIndex();\n      const nextSibling = checkingPanel.nextSibling;\n      const lastPanel = panelManager.lastPanel()!;\n      const atLastPanel = currentIndex === lastPanel.getIndex();\n      const nextIndex = !atLastPanel && nextSibling\n        ? nextSibling.getIndex()\n        : maxLastIndex + 1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelRight = checkingPanel.getPosition() + checkingPanel.getSize() - (currentNearestPosition - originalNearestPosition);\n      const cameraNext = state.position + state.size;\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = (nextIndex - currentIndex > 1);\n      // Expected prev panel's left position is smaller than camera position\n      const overThreshold = panelRight + gap - infiniteThreshold <= cameraNext;\n\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.NEXT,\n          indexRange: {\n            min: currentIndex + 1,\n            max: nextIndex - 1,\n            length: nextIndex - currentIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at max panel index\n      if (options.circular && currentIndex === maxLastIndex && overThreshold) {\n        const firstPanel = panelManager.firstPanel();\n        const firstIndex = firstPanel\n          ? firstPanel.getIndex()\n          : -1;\n\n        if (firstIndex > 0) {\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.NEXT,\n            indexRange: {\n              min: 0,\n              max: firstIndex - 1,\n              length: firstIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether panels are changed\n      const lastPanelAfterNeed = panelManager.lastPanel()!;\n      const atLastPanelAfterNeed = lastPanelAfterNeed && currentIndex === lastPanelAfterNeed.getIndex();\n\n      if (atLastPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.nextSibling;\n    }\n\n    // Check prev direction\n    checkingPanel = nearestPanel;\n    while (checkingPanel) {\n      const cameraPrev = state.position;\n      const checkingIndex = checkingPanel.getIndex();\n      const prevSibling = checkingPanel.prevSibling;\n      const firstPanel = panelManager.firstPanel()!;\n      const atFirstPanel = checkingIndex === firstPanel.getIndex();\n      const prevIndex = !atFirstPanel && prevSibling\n        ? prevSibling.getIndex()\n        : -1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelLeft = checkingPanel.getPosition() - (currentNearestPosition - originalNearestPosition);\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = checkingIndex - prevIndex > 1;\n      // Expected prev panel's right position is smaller than camera position\n      const overThreshold = panelLeft - gap + infiniteThreshold >= cameraPrev;\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.PREV,\n          indexRange: {\n            min: prevIndex + 1,\n            max: checkingIndex - 1,\n            length: checkingIndex - prevIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at panel 0\n      if (options.circular && checkingIndex === 0 && overThreshold) {\n        const lastPanel = panelManager.lastPanel();\n\n        if (lastPanel && lastPanel.getIndex() < maxLastIndex) {\n          const lastIndex = lastPanel.getIndex();\n\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.PREV,\n            indexRange: {\n              min: lastIndex + 1,\n              max: maxLastIndex,\n              length: maxLastIndex - lastIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether panels were changed\n      const firstPanelAfterNeed = panelManager.firstPanel();\n      const atFirstPanelAfterNeed = firstPanelAfterNeed && checkingIndex === firstPanelAfterNeed.getIndex();\n\n      // Looped in circular mode\n      if (atFirstPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.prevSibling;\n    }\n  }\n\n  private triggerNeedPanel(params: {\n    axesEvent: any;\n    siblingPanel: Panel | null,\n    direction: FlickingEvent[\"direction\"];\n    indexRange: NeedPanelEvent[\"range\"];\n  }): void {\n    const { axesEvent, siblingPanel, direction, indexRange } = params;\n    const options = this.options;\n    const checkedIndexes = this.state.checkedIndexes;\n    const alreadyTriggered = checkedIndexes.some(([min, max]) => min === indexRange.min || max === indexRange.max);\n    const hasHandler = this.flicking.hasOn(EVENTS.NEED_PANEL);\n\n    if (alreadyTriggered || !hasHandler) {\n      return;\n    }\n\n    // Should done before triggering event, as we can directly add panels by event callback\n    checkedIndexes.push([indexRange.min, indexRange.max]);\n\n    const index = siblingPanel\n      ? siblingPanel.getIndex()\n      : 0;\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n\n    this.triggerEvent(\n      EVENTS.NEED_PANEL,\n      axesEvent,\n      isTrusted,\n      {\n        index,\n        panel: siblingPanel,\n        direction,\n        range: indexRange,\n        fill: (element: ElementLike | ElementLike[]) => {\n          const panelManager = this.panelManager;\n          if (!siblingPanel) {\n            return this.insert(panelManager.getRange().max + 1, element);\n          }\n\n          const parsedElements = parseElement(element);\n          // Slice elements to fit size equal to empty spaces\n          const elements = direction === DIRECTION.NEXT\n            ? parsedElements.slice(0, indexRange.length)\n            : parsedElements.slice(-indexRange.length);\n\n          if (direction === DIRECTION.NEXT) {\n            if (options.circular && index === panelManager.getLastIndex()) {\n              // needPanel event is triggered on last index, insert at index 0\n              return this.insert(0, elements);\n            } else {\n              return siblingPanel.insertAfter(elements);\n            }\n          } else if (direction === DIRECTION.PREV) {\n            if (options.circular && index === 0) {\n              // needPanel event is triggered on first index(0), insert at the last index\n              return this.insert(indexRange.max - elements.length + 1, elements);\n            } else {\n              return siblingPanel.insertBefore(elements);\n            }\n          } else {\n            // direction is null when there're no panels exist\n            return this.insert(0, elements);\n          }\n        },\n      } as Partial<NeedPanelEvent>,\n    );\n  }\n\n  private updateVisiblePanels() {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentState = this.stateMachine.getState();\n    const cameraElement = this.cameraElement;\n    const { renderExternal, renderOnlyVisible } = options;\n    if (!renderOnlyVisible) {\n      return;\n    }\n\n    if (!this.nearestPanel) {\n      this.visiblePanels = [];\n      while (cameraElement.firstChild) {\n        cameraElement.removeChild(cameraElement.firstChild);\n      }\n      return;\n    }\n\n    const prevVisiblePanels = this.visiblePanels;\n    const newVisiblePanels = this.calcVisiblePanels();\n\n    const { addedPanels, removedPanels } = this.checkVisiblePanelChange(prevVisiblePanels, newVisiblePanels);\n\n    if (addedPanels.length <= 0 && removedPanels.length <= 0) {\n      // Visible panels not changed\n      return;\n    }\n\n    if (currentState.holding) {\n      newVisiblePanels.push(...removedPanels);\n    } else {\n      const firstVisiblePanelPos = newVisiblePanels[0].getPosition();\n      state.positionOffset = firstVisiblePanelPos;\n    }\n\n    newVisiblePanels.forEach(panel => {\n      panel.setPositionCSS(state.positionOffset);\n    });\n\n    if (!renderExternal) {\n      if (!currentState.holding) {\n        removedPanels.forEach(panel => {\n          const panelElement = panel.getElement();\n          panelElement.parentNode && cameraElement.removeChild(panelElement);\n        });\n      }\n\n      const fragment = document.createDocumentFragment();\n      addedPanels.forEach(panel => {\n        fragment.appendChild(panel.getElement());\n      });\n\n      cameraElement.appendChild(fragment);\n    }\n\n    const firstVisiblePanel = newVisiblePanels[0];\n    const lastVisiblePanel = newVisiblePanels[newVisiblePanels.length - 1];\n    const getAbsIndex = (panel: Panel) => panel.getIndex() + (panel.getCloneIndex() + 1) * panelManager.getPanelCount();\n\n    const newVisibleRange = {\n      min: getAbsIndex(firstVisiblePanel),\n      max: getAbsIndex(lastVisiblePanel),\n    };\n    this.visiblePanels = newVisiblePanels;\n    this.flicking.trigger(EVENTS.VISIBLE_CHANGE, {\n      type: EVENTS.VISIBLE_CHANGE,\n      range: newVisibleRange,\n    });\n  }\n\n  private checkVisiblePanelChange(prevVisiblePanels: Panel[], newVisiblePanels: Panel[]) {\n    const prevRefCount = prevVisiblePanels.map(() => 0);\n    const newRefCount = newVisiblePanels.map(() => 0);\n\n    prevVisiblePanels.forEach((prevPanel, prevIndex) => {\n      newVisiblePanels.forEach((newPanel, newIndex) => {\n        if (prevPanel === newPanel) {\n          prevRefCount[prevIndex]++;\n          newRefCount[newIndex]++;\n        }\n      });\n    });\n\n    const removedPanels = prevRefCount.reduce((removed: Panel[], count, index) => {\n      return count === 0\n        ? [...removed, prevVisiblePanels[index]]\n        : removed;\n    }, []);\n    const addedPanels = newRefCount.reduce((added: Panel[], count, index) => {\n      return count === 0\n        ? [...added, newVisiblePanels[index]]\n        : added;\n    }, []);\n\n    return { removedPanels, addedPanels };\n  }\n\n  private resizePanels(panels: Panel[]): void {\n    const options = this.options;\n    const panelBboxes = this.panelBboxes;\n\n    if (options.isEqualSize === true) {\n      if (!panelBboxes.default) {\n        const defaultPanel = panels[0];\n        panelBboxes.default = defaultPanel.getBbox();\n      }\n\n      const defaultBbox = panelBboxes.default;\n\n      panels.forEach(panel => {\n        panel.resize(defaultBbox);\n      });\n      return;\n    } else if (options.isEqualSize) {\n      const equalSizeClasses = options.isEqualSize;\n\n      panels.forEach(panel => {\n        const overlappedClass = panel.getOverlappedClass(equalSizeClasses);\n        if (overlappedClass) {\n          panel.resize(panelBboxes[overlappedClass]);\n          panelBboxes[overlappedClass] = panel.getBbox();\n        } else {\n          panel.resize();\n        }\n      });\n      return;\n    }\n    panels.forEach(panel => {\n      panel.resize();\n    });\n  }\n}\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Component from \"@egjs/component\";\nimport Viewport from \"./components/Viewport\";\nimport Panel from \"./components/Panel\";\n\nimport { merge, getProgress, parseElement, isString, counter, findIndex } from \"./utils\";\nimport { DEFAULT_OPTIONS, EVENTS, DIRECTION, AXES_EVENTS, STATE_TYPE, DEFAULT_MOVE_TYPE_OPTIONS } from \"./consts\";\nimport {\n  FlickingOptions,\n  FlickingEvent,\n  Direction,\n  EventType,\n  FlickingPanel,\n  TriggerCallback,\n  FlickingContext,\n  FlickingStatus,\n  Plugin,\n  ElementLike,\n  DestroyOption,\n  BeforeSyncResult,\n  SyncResult,\n  ChangeEvent,\n  SelectEvent,\n  NeedPanelEvent,\n  VisibleChangeEvent,\n  MoveTypeStringOption,\n  ValueOf,\n} from \"./types\";\n// import { sendEvent } from \"./ga/ga\";\nimport { DiffResult } from \"@egjs/list-differ\";\n\n/**\n * @memberof eg\n * @extends eg.Component\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\" , \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|eg.Component}\n * @requires {@link https://github.com/naver/egjs-axes|eg.Axes}\n * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n */\nclass Flicking extends Component<{\n  holdStart: FlickingEvent;\n  holdEnd: FlickingEvent;\n  moveStart: FlickingEvent;\n  move: FlickingEvent;\n  moveEnd: FlickingEvent;\n  change: ChangeEvent;\n  restore: FlickingEvent;\n  select: SelectEvent;\n  needPanel: NeedPanelEvent;\n  visibleChange: VisibleChangeEvent;\n}> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @example\n   * eg.Flicking.VERSION;  // ex) 3.0.0\n   * @memberof eg.Flicking\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n  /**\n   * Direction constant - \"PREV\" or \"NEXT\"\n   * @ko 방향 상수 - \"PREV\" 또는 \"NEXT\"\n   * @type {object}\n   * @property {\"PREV\"} PREV - Prev direction from current hanger position.<br/>It's `left(←️)` direction when `horizontal: true`.<br/>Or, `up(↑️)` direction when `horizontal: false`.<ko>현재 행어를 기준으로 이전 방향.<br/>`horizontal: true`일 경우 `왼쪽(←️)` 방향.<br/>`horizontal: false`일 경우 `위쪽(↑️)`방향이다.</ko>\n   * @property {\"NEXT\"} NEXT - Next direction from current hanger position.<br/>It's `right(→)` direction when `horizontal: true`.<br/>Or, `down(↓️)` direction when `horizontal: false`.<ko>현재 행어를 기준으로 다음 방향.<br/>`horizontal: true`일 경우 `오른쪽(→)` 방향.<br/>`horizontal: false`일 경우 `아래쪽(↓️)`방향이다.</ko>\n   * @example\n   * eg.Flicking.DIRECTION.PREV; // \"PREV\"\n   * eg.Flicking.DIRECTION.NEXT; // \"NEXT\"\n   */\n  public static DIRECTION: Direction = DIRECTION;\n\n  /**\n   * Event type object with event name strings.\n   * @ko 이벤트 이름 문자열들을 담은 객체\n   * @type {object}\n   * @property {\"holdStart\"} HOLD_START - holdStart event<ko>holdStart 이벤트</ko>\n   * @property {\"holdEnd\"} HOLD_END - holdEnd event<ko>holdEnd 이벤트</ko>\n   * @property {\"moveStart\"} MOVE_START - moveStart event<ko>moveStart 이벤트</ko>\n   * @property {\"move\"} MOVE - move event<ko>move 이벤트</ko>\n   * @property {\"moveEnd\"} MOVE_END - moveEnd event<ko>moveEnd 이벤트</ko>\n   * @property {\"change\"} CHANGE - change event<ko>change 이벤트</ko>\n   * @property {\"restore\"} RESTORE - restore event<ko>restore 이벤트</ko>\n   * @property {\"select\"} SELECT - select event<ko>select 이벤트</ko>\n   * @property {\"needPanel\"} NEED_PANEL - needPanel event<ko>needPanel 이벤트</ko>\n   * @example\n   * eg.Flicking.EVENTS.MOVE_START; // \"MOVE_START\"\n   */\n  public static EVENTS: EventType = EVENTS;\n\n  public options: FlickingOptions;\n\n  private wrapper: HTMLElement;\n  private viewport: Viewport;\n  private eventContext: FlickingContext;\n  private isPanelChangedAtBeforeSync: boolean = false;\n\n  /**\n   * @param element A base element for the eg.Flicking module. When specifying a value as a `string` type, you must specify a css selector string to select the element.<ko>eg.Flicking 모듈을 사용할 기준 요소. `string`타입으로 값 지정시 요소를 선택하기 위한 css 선택자 문자열을 지정해야 한다.</ko>\n   * @param options An option object of the eg.Flicking module<ko>eg.Flicking 모듈의 옵션 객체</ko>\n   * @param {string} [options.classPrefix=\"eg-flick\"] A prefix of class names will be added for the panels, viewport, and camera.<ko>패널들과 뷰포트, 카메라에 추가될 클래스 이름의 접두사.</ko>\n   * @param {number} [options.deceleration=0.0075] Deceleration value for panel movement animation for animation triggered by manual user input. A higher value means a shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n   * @param {boolean} [options.horizontal=true] The direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param {boolean} [options.circular=false] Enables circular mode, which connects first/last panel for continuous scrolling.<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능하다.</ko>\n   * @param {boolean} [options.infinite=false] Enables infinite mode, which can automatically trigger needPanel until reaching the last panel's index reaches the lastIndex.<ko>무한 모드를 활성화한다. 무한 모드에서는 needPanel 이벤트를 자동으로 트리거한다. 해당 동작은 마지막 패널의 인덱스가 lastIndex와 일치할때까지 일어난다.</ko>\n   * @param {number} [options.infiniteThreshold=0] A Threshold from viewport edge before triggering `needPanel` event in infinite mode.<ko>무한 모드에서 `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리.</ko>\n   * @param {number} [options.lastIndex=Infinity] Maximum panel index that Flicking can set. Flicking won't trigger `needPanel` when the event's panel index is greater than it.<br/>Also, if the last panel's index reached a given index, you can't add more panels.<ko>Flicking이 설정 가능한 패널의 최대 인덱스. `needPanel` 이벤트에 지정된 인덱스가 최대 패널의 개수보다 같거나 커야 하는 경우에 이벤트를 트리거하지 않게 한다.<br>또한, 마지막 패널의 인덱스가 주어진 인덱스와 동일할 경우, 새로운 패널을 더 이상 추가할 수 없다.</ko>\n   * @param {number} [options.threshold=40] Movement threshold to change panel(unit: pixel). It should be dragged above the threshold to change the current panel.<ko>패널 변경을 위한 이동 임계값 (단위: 픽셀). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.</ko>\n   * @param {number} [options.duration=100] Duration of the panel movement animation. (unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @param {function} [options.panelEffect=x => 1 - Math.pow(1 - x, 3)] An easing function applied to the panel movement animation. Default value is `easeOutCubic`.<ko>패널 이동 애니메이션에 적용할 easing함수. 기본값은 `easeOutCubic`이다.</ko>\n   * @param {number} [options.defaultIndex=0] Index of the panel to set as default when initializing. A zero-based integer.<ko>초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n   * @param {string[]} [options.inputType=[\"touch,\"mouse\"]] Types of input devices to enable.({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Reference})<ko>활성화할 입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 참고})</ko>\n   * @param {number} [options.thresholdAngle=45] The threshold angle value(0 ~ 90).<br>If the input angle from click/touched position is above or below this value in horizontal and vertical mode each, scrolling won't happen.<ko>스크롤 동작을 막기 위한 임계각(0 ~ 90).<br>클릭/터치한 지점으로부터 계산된 사용자 입력의 각도가 horizontal/vertical 모드에서 각각 크거나 작으면, 스크롤 동작이 이루어지지 않는다.</ko>\n   * @param {number|string|number[]|string[]} [options.bounce=[10,10]] The size value of the bounce area. Only can be enabled when `circular=false`.<br>You can set different bounce value for prev/next direction by using array.<br>`number` for px value, and `string` for px, and % value relative to viewport size.(ex - 0, \"10px\", \"20%\")<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.<br>배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정 가능하다.<br>`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있다.(ex - 0, \"10px\", \"20%\")</ko>\n   * @param {boolean} [options.autoResize=false] Whether the `resize` method should be called automatically after a window resize event.<ko>window의 `resize` 이벤트 이후 자동으로 resize()메소드를 호출할지의 여부.</ko>\n   * @param {boolean} [options.adaptive=false] Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n   * @param {number|\"\"} [options.zIndex=2000] z-index value for viewport element.<ko>뷰포트 엘리먼트의 z-index 값.</ko>\n   * @param {boolean} [options.bound=false] Prevent the view from going out of the first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {boolean} [options.overflow=false] Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n   * @param {string} [options.hanger=\"50%\"] The reference position of the hanger in the viewport, which hangs panel anchors should be stopped at.<br>It should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign.<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {string} [options.anchor=\"50%\"] The reference position of the anchor in panels, which can be hanged by viewport hanger.<br>It should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign.<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {number} [options.gap=0] Space value between panels. Should be given in number.(px)<ko>패널간에 부여할 간격의 크기를 나타내는 숫자.(px)</ko>\n   * @param {eg.Flicking.MoveTypeOption} [options.moveType=\"snap\"] Movement style by user input. (ex: snap, freeScroll)<ko>사용자 입력에 의한 이동 방식.(ex: snap, freeScroll)</ko>\n   * @param {boolean} [options.useOffset=false] Whether to use `offsetWidth`/`offsetHeight` instead of `getBoundingClientRect` for panel/viewport size calculation.<br/>You can use this option to calculate the original panel size when CSS transform is applied to viewport or panel.<br/>⚠️ If panel size is not fixed integer value, there can be a 1px gap between panels.<ko>패널과 뷰포트의 크기를 계산할 때 `offsetWidth`/`offsetHeight`를 `getBoundingClientRect` 대신 사용할지 여부.<br/>패널이나 뷰포트에 CSS transform이 설정되어 있을 때 원래 패널 크기를 계산하려면 옵션을 활성화한다.<br/>⚠️ 패널의 크기가 정수로 고정되어있지 않다면 패널 사이에 1px의 공간이 생길 수 있다.</ko>\n   * @param {boolean} [options.renderOnlyVisible] Whether to render visible panels only. This can dramatically increase performance when there're many panels.<ko>보이는 패널만 렌더링할지 여부를 설정한다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있다.</ko>\n   * @param {boolean|string[]} [options.isEqualSize] This option indicates whether all panels have the same size(true) of first panel, or it can hold a list of class names that determines panel size.<br/>Enabling this option can increase performance while recalculating panel size.<ko>모든 패널의 크기가 동일한지(true), 혹은 패널 크기를 결정하는 패널 클래스들의 리스트.<br/>이 옵션을 설정하면 패널 크기 재설정시에 성능을 높일 수 있다.</ko>\n   * @param {boolean} [options.isConstantSize] Whether all panels have a constant size that won't be changed after resize. Enabling this option can increase performance while recalculating panel size.<ko>모든 패널의 크기가 불변인지의 여부. 이 옵션을 'true'로 설정하면 패널 크기 재설정시에 성능을 높일 수 있다.</ko>\n   * @param {boolean} [options.renderExternal] Whether to use external rendering. It will delegate DOM manipulation and can synchronize the rendered state by calling `sync()` method. You can use this option to use in frameworks like React, Vue, Angular, which has its states and rendering methods.<ko>외부 렌더링을 사용할 지의 여부. 이 옵션을 사용시 렌더링을 외부에 위임할 수 있고, `sync()`를 호출하여 그 상태를 동기화할 수 있다. 이 옵션을 사용하여, React, Vue, Angular 등 자체적인 상태와 렌더링 방법을 갖는 프레임워크에 대응할 수 있다.</ko>\n   * @param {boolean} [options.collectStatistics=true] Whether to collect statistics on how you are using `Flicking`. These statistical data do not contain any personal information and are used only as a basis for the development of a user-friendly product.<ko>어떻게 `Flicking`을 사용하고 있는지에 대한 통계 수집 여부를 나타낸다. 이 통계자료는 개인정보를 포함하고 있지 않으며 오직 사용자 친화적인 제품으로 발전시키기 위한 근거자료로서 활용한다.</ko>\n   */\n  constructor(\n    element: string | HTMLElement,\n    options: Partial<FlickingOptions> = {},\n  ) {\n    super();\n\n    // Set flicking wrapper user provided\n    let wrapper: HTMLElement | null;\n    if (isString(element)) {\n      wrapper = document.querySelector(element);\n      if (!wrapper) {\n        throw new Error(\"Base element doesn't exist.\");\n      }\n    } else if (element.nodeName && element.nodeType === 1) {\n      wrapper = element;\n    } else {\n      throw new Error(\"Element should be provided in string or HTMLElement.\");\n    }\n\n    this.wrapper = wrapper;\n    // Override default options\n    this.options = merge({}, DEFAULT_OPTIONS, options) as FlickingOptions;\n    // Override moveType option\n    const currentOptions = this.options;\n    const moveType = currentOptions.moveType as MoveTypeStringOption;\n\n    if (moveType in DEFAULT_MOVE_TYPE_OPTIONS) {\n      currentOptions.moveType = DEFAULT_MOVE_TYPE_OPTIONS[moveType as keyof typeof DEFAULT_MOVE_TYPE_OPTIONS];\n    }\n\n    // Make viewport instance with panel container element\n    this.viewport = new Viewport(this, this.options, this.triggerEvent);\n    this.listenInput();\n    this.listenResize();\n\n    // if (this.options.collectStatistics) {\n    //   sendEvent(\n    //     \"usage\",\n    //     \"options\",\n    //     options,\n    //   );\n    // }\n  }\n\n  /**\n   * Move to the previous panel if it exists.\n   * @ko 이전 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public prev(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      const prevPanel = currentPanel.prev();\n      if (prevPanel) {\n        prevPanel.focus(duration);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the next panel if it exists.\n   * @ko 다음 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation(unit: ms).<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public next(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      const nextPanel = currentPanel.next();\n      if (nextPanel) {\n        nextPanel.focus(duration);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the panel of given index.\n   * @ko 주어진 인덱스에 해당하는 패널로 이동한다.\n   * @param index The index number of the panel to move.<ko>이동할 패널의 인덱스 번호.</ko>\n   * @param duration [duration=options.duration] Duration of the panel movement.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public moveTo(index: number, duration?: number): this {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    const state = viewport.stateMachine.getState();\n\n    if (!panel || state.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = viewport.getHangerPosition();\n\n    let targetPanel = panel;\n    if (this.options.circular) {\n      const scrollAreaSize = viewport.getScrollAreaSize();\n      // Check all three possible locations, find the nearest position among them.\n      const possiblePositions = [\n        anchorPosition - scrollAreaSize,\n        anchorPosition,\n        anchorPosition + scrollAreaSize,\n      ];\n      const nearestPosition = possiblePositions.reduce((nearest, current) => {\n        return (Math.abs(current - hangerPosition) < Math.abs(nearest - hangerPosition))\n          ? current\n          : nearest;\n      }, Infinity) - panel.getRelativeAnchorPosition();\n\n      const identicals = panel.getIdenticalPanels();\n      const offset = nearestPosition - anchorPosition;\n      if (offset > 0) {\n        // First cloned panel is nearest\n        targetPanel = identicals[1];\n      } else if (offset < 0) {\n        // Last cloned panel is nearest\n        targetPanel = identicals[identicals.length - 1];\n      }\n\n      targetPanel = targetPanel.clone(targetPanel.getCloneIndex(), true);\n      targetPanel.setPosition(nearestPosition);\n    }\n    const currentIndex = this.getIndex();\n\n    if (hangerPosition === targetPanel.getAnchorPosition() && currentIndex === index) {\n      return this;\n    }\n\n    const eventType = panel.getIndex() === viewport.getCurrentIndex()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      targetPanel,\n      viewport.findEstimatedPosition(targetPanel),\n      eventType,\n      null,\n      duration,\n    );\n    return this;\n  }\n\n  /**\n   * Return index of the current panel. `-1` if no panel exists.\n   * @ko 현재 패널의 인덱스 번호를 반환한다. 패널이 하나도 없을 경우 `-1`을 반환한다.\n   * @return Current panel's index, zero-based integer.<ko>현재 패널의 인덱스 번호. 0부터 시작하는 정수.</ko>\n   */\n  public getIndex(): number {\n    return this.viewport.getCurrentIndex();\n  }\n\n  /**\n   * Return the wrapper element user provided in constructor.\n   * @ko 사용자가 생성자에서 제공한 래퍼 엘리먼트를 반환한다.\n   * @return Wrapper element user provided.<ko>사용자가 제공한 래퍼 엘리먼트.</ko>\n   */\n  public getElement(): HTMLElement {\n    return this.wrapper;\n  }\n\n  /**\n   * Return current panel. `null` if no panel exists.\n   * @ko 현재 패널을 반환한다. 패널이 하나도 없을 경우 `null`을 반환한다.\n   * @return Current panel.<ko>현재 패널.</ko>\n   */\n  public getCurrentPanel(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.getCurrentPanel();\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return the panel of given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 패널을 반환한다. 해당 패널이 존재하지 않을 시 `null`이다.\n   * @return Panel of given index.<ko>주어진 인덱스에 해당하는 패널.</ko>\n   */\n  public getPanel(index: number): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return all panels.\n   * @ko 모든 패널들을 반환한다.\n   * @param - Should include cloned panels or not.<ko>복사된 패널들을 포함할지의 여부.</ko>\n   * @return All panels.<ko>모든 패널들.</ko>\n   */\n  public getAllPanels(includeClone?: boolean): FlickingPanel[] {\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const panels = includeClone\n      ? panelManager.allPanels()\n      : panelManager.originalPanels();\n\n    return panels\n      .filter(panel => !!panel);\n  }\n\n  /**\n   * Return the panels currently shown in viewport area.\n   * @ko 현재 뷰포트 영역에서 보여지고 있는 패널들을 반환한다.\n   * @return Panels currently shown in viewport area.<ko>현재 뷰포트 영역에 보여지는 패널들</ko>\n   */\n  public getVisiblePanels(): FlickingPanel[] {\n    return this.viewport.calcVisiblePanels();\n  }\n\n  /**\n   * Return length of original panels.\n   * @ko 원본 패널의 개수를 반환한다.\n   * @return Length of original panels.<ko>원본 패널의 개수</ko>\n   */\n  public getPanelCount(): number {\n    return this.viewport.panelManager.getPanelCount();\n  }\n\n  /**\n   * Return how many groups of clones are created.\n   * @ko 몇 개의 클론 그룹이 생성되었는지를 반환한다.\n   * @return Length of cloned panel groups.<ko>클론된 패널 그룹의 개수</ko>\n   */\n  public getCloneCount(): number {\n    return this.viewport.panelManager.getCloneCount();\n  }\n\n  /**\n   * Get maximum panel index for `infinite` mode.\n   * @ko `infinite` 모드에서 적용되는 추가 가능한 패널의 최대 인덱스 값을 반환한다.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return Maximum index of panel that can be added.<ko>최대 추가 가능한 패널의 인덱스.</ko>\n   */\n  public getLastIndex(): number {\n    return this.viewport.panelManager.getLastIndex();\n  }\n\n  /**\n   * Set maximum panel index for `infinite' mode.<br>[needPanel]{@link eg.Flicking#events:needPanel} won't be triggered anymore when last panel's index reaches it.<br>Also, you can't add more panels after it.\n   * @ko `infinite` 모드에서 적용되는 패널의 최대 인덱스를 설정한다.<br>마지막 패널의 인덱스가 설정한 값에 도달할 경우 더 이상 [needPanel]{@link eg.Flicking#events:needPanel} 이벤트가 발생되지 않는다.<br>또한, 설정한 인덱스 이후로 새로운 패널을 추가할 수 없다.\n   * @param - Maximum panel index.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public setLastIndex(index: number): this {\n    this.viewport.setLastIndex(index);\n\n    return this;\n  }\n\n  /**\n   * Return panel movement animation.\n   * @ko 현재 패널 이동 애니메이션이 진행 중인지를 반환한다.\n   * @return Is animating or not.<ko>애니메이션 진행 여부.</ko>\n   */\n  public isPlaying(): boolean {\n    return this.viewport.stateMachine.getState().playing;\n  }\n\n  /**\n   * Unblock input devices.\n   * @ko 막았던 입력 장치로부터의 입력을 푼다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public enableInput(): this {\n    this.viewport.enable();\n\n    return this;\n  }\n\n  /**\n   * Block input devices.\n   * @ko 입력 장치로부터의 입력을 막는다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public disableInput(): this {\n    this.viewport.disable();\n\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to [setStatus()]{@link eg.Flicking#setStatus}.\n   * @ko 현재 상태 값을 반환한다. 반환받은 값을 [setStatus()]{@link eg.Flicking#setStatus} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있다.\n   * @return An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus(): FlickingStatus {\n    const viewport = this.viewport;\n\n    const panels = viewport.panelManager.originalPanels()\n      .filter(panel => !!panel)\n      .map(panel => {\n        return {\n          html: panel.getElement().outerHTML,\n          index: panel.getIndex(),\n        };\n      });\n\n    return {\n      index: viewport.getCurrentIndex(),\n      panels,\n      position: viewport.getCameraPosition(),\n    };\n  }\n\n  /**\n   * Restore to the state of the `status`.\n   * @ko `status`의 상태로 복원한다.\n   * @param status Status value to be restored. You can specify the return value of the [getStatus()]{@link eg.Flicking#getStatus} method.<ko>복원할 상태 값. [getStatus()]{@link eg.Flicking#getStatus}메서드의 반환값을 지정하면 된다.</ko>\n   */\n  public setStatus(status: FlickingStatus): void {\n    this.viewport.restore(status);\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking.\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가한다.\n   * @param - The plugin(s) to add.<ko>추가할 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    this.viewport.addPlugins(plugins);\n    return this;\n  }\n\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거한다.\n   * @param - The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    this.viewport.removePlugins(plugins);\n    return this;\n  }\n\n  /**\n   * Return the reference element and all its children to the state they were in before the instance was created. Remove all attached event handlers. Specify `null` for all attributes of the instance (including inherited attributes).\n   * @ko 기준 요소와 그 하위 패널들을 인스턴스 생성전의 상태로 되돌린다. 부착된 모든 이벤트 핸들러를 탈거한다. 인스턴스의 모든 속성(상속받은 속성포함)에 `null`을 지정한다.\n   * @example\n   * const flick = new eg.Flicking(\"#flick\");\n   * flick.destroy();\n   * console.log(flick.moveTo); // null\n   */\n  public destroy(option: Partial<DestroyOption> = {}): void {\n    this.off();\n\n    if (this.options.autoResize) {\n      window.removeEventListener(\"resize\", this.resize);\n    }\n\n    this.viewport.destroy(option);\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  /**\n   * Update panels to current state.\n   * @ko 패널들을 현재 상태에 맞춰 갱신한다.\n   * @method\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public resize = (): this => {\n    const viewport = this.viewport;\n    const options = this.options;\n    const wrapper = this.getElement();\n\n    const allPanels = viewport.panelManager.allPanels();\n    if (!options.isConstantSize) {\n      allPanels.forEach(panel => panel.unCacheBbox());\n    }\n\n    const shouldResetElements = options.renderOnlyVisible\n      && !options.isConstantSize\n      && options.isEqualSize !== true;\n\n    // Temporarily set parent's height to prevent scroll (#333)\n    const parent = wrapper.parentElement!;\n    const origStyle = parent.style.height;\n    parent.style.height = `${parent.offsetHeight}px`;\n\n    viewport.unCacheBbox();\n    // This should be done before adding panels, to lower performance issue\n    viewport.updateBbox();\n\n    if (shouldResetElements) {\n      viewport.appendUncachedPanelElements(allPanels as Panel[]);\n    }\n\n    viewport.resize();\n    parent.style.height = origStyle;\n\n    return this;\n  }\n\n  /**\n   * Add new panels at the beginning of panels.\n   * @ko 제일 앞에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.replace(3, document.createElement(\"div\")); // Add new panel at index 3\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 2\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Prepended at index 0, 1\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 0, pushing every panels behind it.\n   */\n  public prepend(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n\n    const insertingIndex = Math.max(viewport.panelManager.getRange().min - parsedElements.length, 0);\n    return viewport.insert(insertingIndex, parsedElements);\n  }\n\n  /**\n   * Add new panels at the end of panels.\n   * @ko 제일 끝에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.append(document.createElement(\"div\")); // Appended at index 0\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\"); // Appended at index 1\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Appended at index 2, 3\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\"); // Appended at index 4, 5\n   */\n  public append(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n\n    return viewport.insert(viewport.panelManager.getRange().max + 1, element);\n  }\n\n  /**\n   * Replace existing panels with new panels from given index. If target index is empty, add new panel at target index.\n   * @ko 주어진 인덱스로부터의 패널들을 새로운 패널들로 교체한다. 인덱스에 해당하는 자리가 비어있다면, 새로운 패널을 해당 자리에 집어넣는다.\n   * @param index - Start index to replace new panels.<ko>새로운 패널들로 교체할 시작 인덱스</ko>\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of created panels by replace.<ko>교체되어 새롭게 추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   *\n   * // This will add new panel at index 3,\n   * // Index 0, 1, 2 is empty at this moment.\n   * // [empty, empty, empty, PANEL]\n   * flicking.replace(3, document.createElement(\"div\"));\n   *\n   * // As index 2 was empty, this will also add new panel at index 2.\n   * // [empty, empty, PANEL, PANEL]\n   * flicking.replace(2, \"\\<div\\>Panel\\</div\\>\");\n   *\n   * // Index 3 was not empty, so it will replace previous one.\n   * // It will also add new panels at index 4 and 5.\n   * // before - [empty, empty, PANEL, PANEL]\n   * // after - [empty, empty, PANEL, NEW_PANEL, NEW_PANEL, NEW_PANEL]\n   * flicking.replace(3, [\"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\"])\n   */\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.replace(index, element);\n  }\n\n  /**\n   * Remove panel at target index. This will decrease index of panels behind it.\n   * @ko `index`에 해당하는 자리의 패널을 제거한다. 수행시 `index` 이후의 패널들의 인덱스가 감소된다.\n   * @param index - Index of panel to remove.<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] - Number of panels to remove from index.<ko>`index` 이후로 제거할 패널의 개수.</ko>\n   * @return Array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    return this.viewport.remove(index, deleteCount);\n  }\n\n  /**\n   * Get indexes to render. Should be used with `renderOnlyVisible` option.\n   * @private\n   * @ko 렌더링이 필요한 인덱스들을 반환한다. `renderOnlyVisible` 옵션과 함께 사용해야 한다.\n   * @param - Info object of how panel infos are changed.<ko>패널 정보들의 변경 정보를 담는 오브젝트.</ko>\n   * @return Array of indexes to render.<ko>렌더링할 인덱스의 배열</ko>\n   */\n  public getRenderingIndexes(diffResult: DiffResult<any>): number[] {\n    const viewport = this.viewport;\n    const isCircular = this.options.circular;\n    const visiblePanels = viewport.getVisiblePanels();\n    const maintained = diffResult.maintained.reduce((values: {[key: number]: number}, [before, after]) => {\n      values[before] = after;\n      return values;\n    }, {});\n\n    const prevPanelCount = diffResult.prevList.length;\n    const panelCount = diffResult.list.length;\n    const added = diffResult.added;\n    const getPanelAbsIndex = (panel: Panel) => {\n      return panel.getIndex() + (panel.getCloneIndex() + 1) * prevPanelCount;\n    };\n\n    let visibleIndexes = visiblePanels.map(panel => getPanelAbsIndex(panel));\n    visibleIndexes = visibleIndexes\n      .filter(val => maintained[val % prevPanelCount] != null)\n      .map(val => {\n        const cloneIndex = Math.floor(val / prevPanelCount);\n        const changedIndex = maintained[val % prevPanelCount];\n\n        return isCircular\n          ? changedIndex + panelCount * cloneIndex\n          : changedIndex;\n      });\n\n    const renderingPanels = [...visibleIndexes, ...added];\n    const allPanels = viewport.panelManager.allPanels();\n\n    viewport.setVisiblePanels(renderingPanels.map(index => allPanels[index]));\n\n    return renderingPanels;\n  }\n\n  /**\n   * Synchronize info of panels instance with info given by external rendering.\n   * @ko 외부 렌더링 방식에 의해 입력받은 패널의 정보와 현재 플리킹이 갖는 패널 정보를 동기화한다.\n   * @private\n   * @param - Info object of how panel infos are changed.<ko>패널 정보들의 변경 정보를 담는 오브젝트.</ko>\n   * @param - Whether called from sync method <ko> sync 메소드로부터 호출됐는지 여부 </ko>\n   */\n  public beforeSync(diffInfo: BeforeSyncResult) {\n    const { maintained, added, changed, removed } = diffInfo;\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const isCircular = this.options.circular;\n    const cloneCount = panelManager.getCloneCount();\n    const prevClonedPanels = panelManager.clonedPanels();\n\n    // Update visible panels\n    const newVisiblePanels = viewport.getVisiblePanels()\n      .filter(panel => findIndex(removed, index => {\n        return index === panel.getIndex();\n      }) < 0);\n    viewport.setVisiblePanels(newVisiblePanels);\n\n    // Did not changed at all\n    if (\n      added.length <= 0\n      && removed.length <= 0\n      && changed.length <= 0\n      && cloneCount === prevClonedPanels.length\n    ) {\n      return this;\n    }\n    const prevOriginalPanels = panelManager.originalPanels();\n    const newPanels: Panel[] = [];\n    const newClones: Panel[][] = counter(cloneCount).map(() => []);\n\n    maintained.forEach(([beforeIdx, afterIdx]) => {\n      newPanels[afterIdx] = prevOriginalPanels[beforeIdx];\n      newPanels[afterIdx].setIndex(afterIdx);\n    });\n\n    added.forEach(addIndex => {\n      newPanels[addIndex] = new Panel(null, addIndex, this.viewport);\n    });\n\n    if (isCircular) {\n      counter(cloneCount).forEach(groupIndex => {\n        const prevCloneGroup = prevClonedPanels[groupIndex];\n        const newCloneGroup = newClones[groupIndex];\n\n        maintained.forEach(([beforeIdx, afterIdx]) => {\n          newCloneGroup[afterIdx] = prevCloneGroup\n            ? prevCloneGroup[beforeIdx]\n            : newPanels[afterIdx].clone(groupIndex, false);\n\n          newCloneGroup[afterIdx].setIndex(afterIdx);\n        });\n\n        added.forEach(addIndex => {\n          const newPanel = newPanels[addIndex];\n\n          newCloneGroup[addIndex] = newPanel.clone(groupIndex, false);\n        });\n      });\n    }\n\n    added.forEach(index => { viewport.updateCheckedIndexes({ min: index, max: index }); });\n    removed.forEach(index => { viewport.updateCheckedIndexes({ min: index - 1, max: index + 1 }); });\n\n    const checkedIndexes = viewport.getCheckedIndexes();\n    checkedIndexes.forEach(([min, max], idx) => {\n      // Push checked indexes backward\n      const pushedIndex = added.filter(index => index < min && panelManager.has(index)).length\n        - removed.filter(index => index < min).length;\n      checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n    });\n\n    // Only effective only when there are least one panel which have changed its index\n    if (changed.length > 0) {\n      // Removed checked index by changed ones after pushing\n      maintained.forEach(([, next]) => { viewport.updateCheckedIndexes({ min: next, max: next }); });\n    }\n    panelManager.replacePanels(newPanels, newClones);\n    this.isPanelChangedAtBeforeSync = true;\n  }\n\n  /**\n   * Synchronize info of panels with DOM info given by external rendering.\n   * @ko 외부 렌더링 방식에 의해 입력받은 DOM의 정보와 현재 플리킹이 갖는 패널 정보를 동기화 한다.\n   * @private\n   * @param - Info object of how panel elements are changed.<ko>패널의 DOM 요소들의 변경 정보를 담는 오브젝트.</ko>\n   */\n  public sync(diffInfo: SyncResult): this {\n    const { list, maintained, added, changed, removed } = diffInfo;\n\n    // Did not changed at all\n    if (added.length <= 0 && removed.length <= 0 && changed.length <= 0) {\n      return this;\n    }\n    const viewport = this.viewport;\n    const { renderOnlyVisible, circular } = this.options;\n    const panelManager = viewport.panelManager;\n\n    if (!renderOnlyVisible) {\n      const indexRange = panelManager.getRange();\n      let beforeDiffInfo: BeforeSyncResult = diffInfo;\n\n      if (circular) {\n        const prevOriginalPanelCount = indexRange.max;\n        const originalPanelCount = (list.length / (panelManager.getCloneCount() + 1)) >> 0;\n        const originalAdded = added.filter(index => index < originalPanelCount);\n        const originalRemoved = removed.filter(index => index <= prevOriginalPanelCount);\n        const originalMaintained = maintained.filter(([beforeIdx]) => beforeIdx <= prevOriginalPanelCount);\n        const originalChanged = changed.filter(([beforeIdx]) => beforeIdx <= prevOriginalPanelCount);\n\n        beforeDiffInfo = {\n          added: originalAdded,\n          maintained: originalMaintained,\n          removed: originalRemoved,\n          changed: originalChanged,\n        };\n      }\n      this.beforeSync(beforeDiffInfo);\n    }\n\n    const visiblePanels = renderOnlyVisible\n      ? viewport.getVisiblePanels()\n      : this.getAllPanels(true);\n\n    added.forEach(addedIndex => {\n      const addedElement = list[addedIndex];\n      const beforePanel = visiblePanels[addedIndex] as Panel;\n\n      beforePanel.setElement(addedElement);\n      // As it can be 0\n      beforePanel.unCacheBbox();\n    });\n    if (this.isPanelChangedAtBeforeSync) {\n      // Reset visible panels\n      viewport.setVisiblePanels([]);\n      this.isPanelChangedAtBeforeSync = false;\n    }\n    viewport.resize();\n\n    return this;\n  }\n\n  private listenInput(): void {\n    const flicking = this;\n    const viewport = flicking.viewport;\n    const stateMachine = viewport.stateMachine;\n\n    // Set event context\n    flicking.eventContext = {\n      flicking,\n      viewport: flicking.viewport,\n      transitTo: stateMachine.transitTo,\n      triggerEvent: flicking.triggerEvent,\n      moveCamera: flicking.moveCamera,\n      stopCamera: viewport.stopCamera,\n    };\n\n    const handlers = {};\n    for (const key in AXES_EVENTS) {\n      const eventType = AXES_EVENTS[key];\n\n      handlers[eventType] = (e: any) => stateMachine.fire(eventType, e, flicking.eventContext);\n    }\n\n    // Connect Axes instance with PanInput\n    flicking.viewport.connectAxesHandler(handlers);\n  }\n\n  private listenResize(): void {\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", this.resize);\n    }\n  }\n\n  private triggerEvent = <T extends FlickingEvent>(\n    eventName: ValueOf<Omit<EventType, \"VISIBLE_CHANGE\">>, // visibleChange event has no common event definition from other events\n    axesEvent: any,\n    isTrusted: boolean,\n    params: Partial<T> = {},\n  ): TriggerCallback => {\n    const viewport = this.viewport;\n\n    let canceled: boolean = true;\n\n    // Ignore events before viewport is initialized\n    if (viewport) {\n      const state = viewport.stateMachine.getState();\n      const { prev, next } = viewport.getScrollArea();\n      const pos = viewport.getCameraPosition();\n      let progress = getProgress(pos, [prev, prev, next]);\n\n      if (this.options.circular) {\n        progress %= 1;\n      }\n      canceled = !super.trigger(eventName, merge({\n        type: eventName,\n        index: this.getIndex(),\n        panel: this.getCurrentPanel(),\n        direction: state.direction,\n        holding: state.holding,\n        progress,\n        axesEvent,\n        isTrusted,\n      }, params) as FlickingEvent);\n    }\n\n    return {\n      onSuccess(callback: () => void): TriggerCallback {\n        if (!canceled) {\n          callback();\n        }\n        return this;\n      },\n      onStopped(callback: () => void): TriggerCallback {\n        if (canceled) {\n          callback();\n        }\n        return this;\n      },\n    } as TriggerCallback;\n  }\n\n  // Return result of \"move\" event triggered\n  private moveCamera = (axesEvent: any): TriggerCallback => {\n    const viewport = this.viewport;\n    const state = viewport.stateMachine.getState();\n    const options = this.options;\n\n    const pos = axesEvent.pos.flick;\n    const previousPosition = viewport.getCameraPosition();\n\n    if (axesEvent.isTrusted && state.holding) {\n      const inputOffset = options.horizontal\n        ? axesEvent.inputEvent.offsetX\n        : axesEvent.inputEvent.offsetY;\n\n      const isNextDirection = inputOffset < 0;\n\n      let cameraChange = pos - previousPosition;\n      const looped = isNextDirection === (pos < previousPosition);\n      if (options.circular && looped) {\n        // Reached at max/min range of axes\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        cameraChange = (cameraChange > 0 ? -1 : 1) * (scrollAreaSize - Math.abs(cameraChange));\n      }\n\n      const currentDirection = cameraChange === 0\n        ? state.direction\n        : cameraChange > 0\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      state.direction = currentDirection;\n    }\n    state.delta += axesEvent.delta.flick;\n\n    viewport.moveCamera(pos, axesEvent);\n    return this.triggerEvent(EVENTS.MOVE, axesEvent, axesEvent.isTrusted)\n      .onStopped(() => {\n        // Undo camera movement\n        viewport.moveCamera(previousPosition, axesEvent);\n      });\n  }\n}\n\nexport default Flicking;\n"]},"metadata":{},"sourceType":"module"}