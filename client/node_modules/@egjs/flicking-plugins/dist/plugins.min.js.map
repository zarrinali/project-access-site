{"version":3,"file":"plugins.min.js","sources":["../src/Parallax.ts","../src/Fade.ts","../src/AutoPlay.ts"],"sourcesContent":["import Flicking, { FlickingEvent, Plugin } from \"@egjs/flicking\";\n\n/**\n * You can apply parallax effect while panel is moving.\n * @ko 패널들을 움직이면서 parallax 효과를 부여할 수 있습니다.\n * @memberof eg.Flicking.plugins\n */\nclass Parallax implements Plugin {\n  /**\n   * @param - Selector of the element to apply parallax effect <ko> Parallax 효과를 적용할 엘리먼트의 선택자 </ko>\n   * @param - Effect amplication scale <ko>효과 증폭도</ko>\n   * @example\n   * flicking.addPlugins(new eg.Flicking.plugins.Parallax(\"img\", 1));\n   */\n  constructor(private selector: string = \"\", private scale: number = 1) {}\n  public init(flicking: Flicking): void {\n    flicking.on(\"move\", this.onMove);\n    this.move(flicking);\n  }\n  public update(flicking: Flicking): void {\n    this.move(flicking);\n  }\n  public destroy(flicking: Flicking): void {\n    flicking.off(\"move\", this.onMove);\n  }\n  private onMove = (e: FlickingEvent): void => {\n    this.move(e.currentTarget);\n  }\n  private move(flicking: Flicking): void {\n    const panels = flicking.getVisiblePanels();\n\n    panels.forEach(panel => {\n      const progress = panel.getOutsetProgress();\n      const el = panel.getElement();\n      const target = el.querySelector<HTMLElement>(this.selector)!;\n      const parentTarget = target.parentNode as Element;\n      const rect = target.getBoundingClientRect();\n      const parentRect = parentTarget.getBoundingClientRect();\n      const position = (parentRect.width - rect.width) / 2 * progress * this.scale;\n      const transform = `translate(-50%) translate(${position}px)`;\n      const style = target.style;\n\n      style.cssText += `transform: ${transform};-webkit-transform: ${transform};-ms-transform:${transform}`;\n    });\n  }\n}\nexport default Parallax;\n","import Flicking, { FlickingEvent, Plugin } from \"@egjs/flicking\";\n\n/**\n * You can apply fade in / out effect while panel is moving.\n * @ko 패널들을 움직이면서 fade in / out 효과를 부여할 수 있습니다.\n * @memberof eg.Flicking.plugins\n */\nclass Fade implements Plugin {\n  /**\n   * @param - The selector of the element to which the fade effect is to be applied. If the selector is blank, it applies to panel element. <ko>Fade 효과를 적용할 대상의 선택자. 선택자가 공백이면 패널 엘리먼트에 적용된다.</ko>\n   * @param - Effect amplication scale <ko>효과 증폭도</ko>\n   * @example\n   * flicking.addPlugins(new eg.Flicking.plugins.Fade(\"p\", 1));\n   */\n  constructor(private selector: string = \"\", private scale: number = 1) {}\n  public init(flicking: Flicking): void {\n    flicking.on(\"move\", this.onMove);\n    this.move(flicking);\n  }\n  public update(flicking: Flicking): void {\n    this.move(flicking);\n  }\n  public destroy(flicking: Flicking): void {\n    flicking.off(\"move\", this.onMove);\n  }\n  private onMove = (e: FlickingEvent): void => {\n    this.move(e.currentTarget);\n  }\n  private move(flicking: Flicking): void {\n    const panels = flicking.getVisiblePanels();\n    const selector = this.selector;\n    const scale = this.scale;\n\n    panels.forEach(panel => {\n      const progress = panel.getOutsetProgress();\n      const el = panel.getElement();\n      const target = selector ? el.querySelector<HTMLElement>(selector)! : el;\n      const opacity = Math.min(1, Math.max(0, (1 - Math.abs(progress * scale))));\n\n      target.style.opacity = `${opacity}`;\n    });\n  }\n}\n\nexport default Fade;\n","import Flicking, { FlickingEvent, Plugin, Direction } from \"@egjs/flicking\";\n\ninterface AutoPlayOptions {\n  duration: number;\n  direction: Direction[keyof Direction];\n  stopOnHover: boolean;\n}\n\n// tslint:disable-next-line naming-convention\nconst DEFAULT_OPTION: AutoPlayOptions = {\n  duration: 2000,\n  direction: \"NEXT\",\n  stopOnHover: false,\n};\n\n/**\n * Plugin that allow you to automatically move to the next/previous panel, on a specific time basis\n * @ko 일정 시간마다, 자동으로 다음/이전 패널로 넘어가도록 할 수 있는 플러그인\n * @memberof eg.Flicking.plugins\n */\nclass AutoPlay implements Plugin {\n  /* Options */\n  private duration: AutoPlayOptions[\"duration\"];\n  private direction: AutoPlayOptions[\"direction\"];\n  private stopOnHover: AutoPlayOptions[\"stopOnHover\"];\n\n  /* Internal Values */\n  private flicking: Flicking | null = null;\n  private timerId = 0;\n  private mouseEntered = false;\n\n  /**\n   * @param options Options for the AutoPlay instance.<ko>AutoPlay 옵션</ko>\n   * @param options.duration Time to wait before moving on to the next panel.<ko>다음 패널로 움직이기까지 대기 시간</ko>\n   * @param options.direction The direction in which the panel moves.<ko>패널이 움직이는 방향</ko>\n   * @param options.stopOnHover Whether to stop when mouse hover upon the element.<ko>엘리먼트에 마우스를 올렸을 때 AutoPlay를 정지할지 여부</ko>\n   * @example\n   * flicking.addPlugins(new eg.Flicking.plugins.AutoPlay(2000, \"NEXT\"));\n   */\n  constructor(options: Partial<AutoPlayOptions> = DEFAULT_OPTION, direction: AutoPlayOptions[\"direction\"] = DEFAULT_OPTION.direction) {\n    if (typeof options === \"number\") {\n      // Fallback for previous interface\n      this.duration = options as number;\n      this.direction = direction;\n      this.stopOnHover = DEFAULT_OPTION.stopOnHover;\n      return;\n    }\n\n    const mergedOptions = {\n      ...DEFAULT_OPTION,\n      ...options,\n    } as AutoPlayOptions;\n    const { duration, direction: dir, stopOnHover } = mergedOptions;\n\n    this.duration = duration;\n    this.direction = dir;\n    this.stopOnHover = stopOnHover;\n  }\n\n  public init(flicking: Flicking): void {\n    flicking.on({\n      moveStart: this.stop,\n      holdStart: this.stop,\n      moveEnd: this.play,\n      select: this.play,\n    });\n\n    this.flicking = flicking;\n    if (this.stopOnHover) {\n      const targetEl = this.flicking.getElement();\n      targetEl.addEventListener(\"mouseenter\", this.onMouseEnter, false);\n      targetEl.addEventListener(\"mouseleave\", this.onMouseLeave, false);\n    }\n\n    this.play();\n  }\n\n  public destroy(): void {\n    const flicking = this.flicking;\n    this.mouseEntered = false;\n    this.stop();\n\n    if (!flicking) return;\n\n    flicking.off(\"moveStart\", this.stop);\n    flicking.off(\"holdStart\", this.stop);\n    flicking.off(\"moveEnd\", this.play);\n    flicking.off(\"select\", this.play);\n\n    const targetEl = flicking.getElement();\n    targetEl.removeEventListener(\"mouseenter\", this.onMouseEnter, false);\n    targetEl.removeEventListener(\"mouseleave\", this.onMouseLeave, false);\n\n    this.flicking = null;\n  }\n\n  public play = () => {\n    const flicking = this.flicking;\n    if (!flicking) return;\n\n    this.stop();\n\n    if (this.mouseEntered || flicking.isPlaying()) return;\n\n    this.timerId = window.setTimeout(() => {\n      flicking[this.direction === \"NEXT\" ? \"next\" : \"prev\"]();\n\n      this.play();\n    }, this.duration);\n  }\n\n  public stop = () => {\n    clearTimeout(this.timerId);\n  }\n\n  private onMouseEnter = () => {\n    this.mouseEntered = true;\n    this.stop();\n  }\n\n  private onMouseLeave = () => {\n    this.mouseEntered = false;\n    this.play();\n  }\n}\n\nexport default AutoPlay;\n"],"names":["selector","scale","e","_this","move","currentTarget","flicking","on","this","onMove","off","getVisiblePanels","forEach","panel","progress","getOutsetProgress","target","getElement","querySelector","parentTarget","parentNode","rect","getBoundingClientRect","transform","width","style","cssText","panels","el","opacity","Math","min","max","abs","DEFAULT_OPTION","duration","direction","stopOnHover","options","stop","mouseEntered","isPlaying","timerId","window","setTimeout","play","clearTimeout","mergedOptions","tslib_1","dir","moveStart","holdStart","moveEnd","select","targetEl","addEventListener","onMouseEnter","onMouseLeave","removeEventListener"],"mappings":"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"}